<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Game 2020</title>
  
  <subtitle>https://2020.iosdevlog.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://2020.iosdevlog.com/"/>
  <updated>2020-03-27T14:23:28.036Z</updated>
  <id>https://2020.iosdevlog.com/</id>
  
  <author>
    <name>iOSDevLog</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计图生成 App，Supernova 限时免费</title>
    <link href="https://2020.iosdevlog.com/2020/03/27/supernova/"/>
    <id>https://2020.iosdevlog.com/2020/03/27/supernova/</id>
    <published>2020-03-27T14:05:53.000Z</published>
    <updated>2020-03-27T14:23:28.036Z</updated>
    
    <content type="html"><![CDATA[<figure><img src="https://2020.iosdevlog.com/2020/03/27/supernova/supernano.jpg" alt="" /><figcaption>Supernano</figcaption></figure><ul><li>Sketch 和 Adobe XD 原型</li><li>----&gt;</li><li>Flutter，iOS，Android，React Native App</li></ul><p>Supernano 可以帮助设计师直接创建出可运行的原生 App，或是帮助工程师们大大减少花费在拼 UI 上的时间消耗。</p><a id="more"></a><p>由于 <strong>COVID-19 新型冠状病毒</strong> 引起的近期事件，<em>Supernova 公司</em>将免费开放 Supernova 的所有功能，直到 2020年6月1日。</p><p>他们希望消除创建应用程序的所有限制，可能会增加构建工具以协助和应对这种前所未有的情况以及未来发展的可能性。 <em>Supernova 公司</em> 还希望它减轻当前经济不确定性所造成的任何财务负担。</p><h2 id="如何加入-supernova">如何加入 Supernova</h2><p>如果您是 Supernova 的新手，请在 <a href="https://supernova.io/" target="_blank" rel="noopener">supernova.io</a>（mac only！）上下载它，打开该应用程序，然后完成注册过程。</p><p>如果您已经是用户，请登录并更新到8.5版。</p><p>您应该会收到以下公告：</p><p><img src="https://2020.iosdevlog.com/2020/03/27/supernova/unlock.png" /></p><p>单击“解锁所有功能”以消除对该产品的所有限制。</p><p>请享用。</p><h2 id="问答环节">问答环节</h2><p>Windows可用吗？</p><blockquote><p>很不幸的是，不行。 <em>Supernova 公司</em> 已按原样解锁了当前产品的所有功能。它仍然是仅Mac应用程序。 <em>Supernova 公司</em> 正在努力尽快发布基于云的版本。</p></blockquote><p>我对 Supernova 的使用有什么限制吗？</p><blockquote><p>不，所有功能均已解锁，因此您可以充分利用 Supernova 的潜力。您可以导入Sketch 和 Adobe XD 文件，原型并转换为 Flutter，iOS，Android 和React Native，而没有任何产品限制。有关使用 Supernova 的更多信息，请访问 <em>Supernova 公司</em> 的文档。</p></blockquote><p>我已经支付了每月或每年的 Supernova 许可证，这对我来说意味着什么？</p><blockquote><p><em>Supernova 公司</em> 已经为您的帐户免费提供了三个月的信用额。</p></blockquote><p>当这结束时会发生什么？</p><blockquote><p><em>Supernova 公司</em> 会在6月1日前一周提醒所有用户更改其帐户，以避免不必要的费用。您可以在帐户设置中选择退订或继续使用 Supernova 的付费版本。查看 <em>Supernova 公司</em> 的定价页面以获取有关计划的更多详细信息。</p></blockquote><p>详情：<a href="https://medium.com/@appsupernova/full-supernova-functionality-free-408bf912237f" target="_blank" rel="noopener">Full Supernova Functionality, Free</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure&gt;
&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/27/supernova/supernano.jpg&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Supernano&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Sketch 和 Adobe XD 原型&lt;/li&gt;
&lt;li&gt;----&amp;gt;&lt;/li&gt;
&lt;li&gt;Flutter，iOS，Android，React Native App&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Supernano 可以帮助设计师直接创建出可运行的原生 App，或是帮助工程师们大大减少花费在拼 UI 上的时间消耗。&lt;/p&gt;
    
    </summary>
    
    
      <category term="software" scheme="https://2020.iosdevlog.com/categories/software/"/>
    
    
      <category term="Android" scheme="https://2020.iosdevlog.com/tags/Android/"/>
    
      <category term="iOS" scheme="https://2020.iosdevlog.com/tags/iOS/"/>
    
      <category term="UI" scheme="https://2020.iosdevlog.com/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>Docker 实践</title>
    <link href="https://2020.iosdevlog.com/2020/03/27/docker/"/>
    <id>https://2020.iosdevlog.com/2020/03/27/docker/</id>
    <published>2020-03-27T10:55:24.000Z</published>
    <updated>2020-03-28T16:13:29.398Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/27/docker/docker-cheat-sheet.png" /></p><ul><li>Image/镜像: 系统镜像 CentOS.iso</li><li>Container/容器: 虚拟机 VM</li><li>Docker Hub: 镜像中心 GitHub</li></ul><a id="more"></a><p>查看 container ID / Get the ID of the container by using the docker ps command.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>停止 container / Use the docker stop command to stop the container.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Swap out &lt;the-container-id&gt; with the ID from docker ps</span></span><br><span class="line">docker stop &lt;the-container-id&gt;</span><br></pre></td></tr></table></figure><p>删除 container，<code>-f</code> 强删 / Once the container has stopped, you can remove it by using the docker rm command.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm &lt;the-container-id&gt;</span><br></pre></td></tr></table></figure><h2 id="centos-8-新用户">CentOS 8 新用户</h2><p><code>root</code> 帐号添加新用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser iosdevlog</span><br><span class="line">visudo</span><br></pre></td></tr></table></figure><p>添加 <code>iosdevlog</code> 那一行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">iosdevlog       ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p>切换到 iosdevlog</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - iosdevlog</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><h2 id="安装-docker">安装 Docker</h2><p><a href="https://www.docker.com/get-started" target="_blank" rel="noopener">Get Started with Docker</a></p><p>设置仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>安装 Docker Engine-Community</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io --nobest</span><br></pre></td></tr></table></figure><p>启动 Docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>通过运行 hello-world 映像来验证是否正确安装了 Docker Engine-Community</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h2 id="非-root-用户运行">非 root 用户运行</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /etc/group | grep docker</span><br><span class="line"><span class="comment"># sudo groupadd -g 999 docker </span></span><br><span class="line">sudo gpasswd -a <span class="variable">$USER</span> docker <span class="comment"># 将当前用户加入到 docker 用户组中</span></span><br><span class="line">newgrp docker  <span class="comment"># 更新用户组</span></span><br><span class="line">sudo systemctl restart docker <span class="comment"># 重启 docker-daemon</span></span><br><span class="line">docker version <span class="comment"># 运行 docker</span></span><br></pre></td></tr></table></figure><h2 id="docker-101-tutorial"><a href="https://www.docker.com/101-tutorial" target="_blank" rel="noopener">Docker 101 Tutorial</a></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 docker/getting-started</span><br></pre></td></tr></table></figure><p>You'll notice a few flags being used. Here's some more info on them:</p><ul><li><code>-d</code> - run the container in detached mode (in the background)</li><li><code>-p 80:80</code> - map port 80 of the host to port 80 in the container</li><li><code>docker/getting-started</code> - the image to use</li></ul><p>查看 <code>container</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>remove container</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f &lt;the-container-id&gt;</span><br></pre></td></tr></table></figure><h2 id="dev-开发">dev 开发</h2><p><code>Dockerfile</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">12</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yarn install --production</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"node"</span>, <span class="string">"/app/src/index.js"</span>]</span></span><br></pre></td></tr></table></figure><p>创建 <code>image</code> -t tag</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t getting-started .</span><br></pre></td></tr></table></figure><p>运行刚才创建的 <code>getting-started</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dp 3000:3000 getting-started</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-                &lt;p className="text-center"&gt;No items yet! Add one above!&lt;/p&gt;</span></span><br><span class="line"><span class="addition">+                &lt;p className="text-center"&gt;You have no todo items yet! Add one above!&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://2020.iosdevlog.com/2020/03/27/docker/diff.png" /></p><h2 id="docker-hub"><a href="https://hub.docker.com/" target="_blank" rel="noopener">Docker Hub</a></h2><p><img src="https://2020.iosdevlog.com/2020/03/27/docker/docker_hub.png" /></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker login -u iosdevlog</span><br><span class="line">docker tag getting-started iosdevlog/getting-started</span><br><span class="line">docker push iosdevlog/getting-started</span><br></pre></td></tr></table></figure><h2 id="play-with-docker"><a href="http://play-with-docker.com/" target="_blank" rel="noopener">Play with Docker</a></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dp 3000:3000 iosdevlog/getting-started</span><br></pre></td></tr></table></figure><p><img src="https://2020.iosdevlog.com/2020/03/27/docker/Play_with_Docker.png" /></p><p>打开 3000 按钮</p><h3 id="持久化-persisting-our-todo-data">持久化 Persisting our Todo Data¶</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker volume create todo-db</span><br><span class="line">docker run -dp 3000:3000 -v todo-db:&#x2F;etc&#x2F;todos iosdevlog&#x2F;getting-started</span><br></pre></td></tr></table></figure><p>数据保存位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect todo-db</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"CreatedAt"</span>: <span class="string">"2020-03-27T12:28:25Z"</span>,</span><br><span class="line">        <span class="string">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="string">"Labels"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Mountpoint"</span>: <span class="string">"/var/lib/docker/volumes/todo-db/_data"</span>,</span><br><span class="line">        <span class="string">"Name"</span>: <span class="string">"todo-db"</span>,</span><br><span class="line">        <span class="string">"Options"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"Scope"</span>: <span class="string">"local"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://2020.iosdevlog.com/2020/03/27/docker/data.png" /></p><h3 id="绑定挂载-using-bind-mounts">绑定挂载 Using Bind Mounts</h3><ul><li><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>Named Volumes</th><th>Bind Mounts</th><th></th></tr></thead><tbody><tr class="odd"><td>Host Location</td><td>Docker chooses</td><td>You control</td></tr><tr class="even"><td>Mount Example (using -v)</td><td>my-volume:/usr/local/data</td><td>/path/to/data:/usr/local/data</td></tr><tr class="odd"><td>Populates new volume with container contents</td><td>Yes</td><td>No</td></tr><tr class="even"><td>Supports Volume Drivers</td><td>Yes</td><td>No</td></tr></tbody></table></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -dp 3000:3000 \</span><br><span class="line">    -w /app -v <span class="variable">$PWD</span>:/app \</span><br><span class="line">    node:12-alpine \</span><br><span class="line">    sh -c <span class="string">"yarn install &amp;&amp; yarn run dev"</span></span><br></pre></td></tr></table></figure><p>查看 logs</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f &lt;container-id&gt;</span><br><span class="line">$ nodemon src/index.js</span><br><span class="line">[nodemon] 1.19.2</span><br><span class="line">[nodemon] to restart at any time, enter `rs`</span><br><span class="line">[nodemon] watching dir(s): *.*</span><br><span class="line">[nodemon] starting `node src/index.js`</span><br><span class="line">Using sqlite database at /etc/todos/todo.db</span><br><span class="line">Listening on port 3000</span><br></pre></td></tr></table></figure><p><code>src/static/js/app.js</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-                         &#123;submitting ? 'Adding...' : 'Add Item'&#125;</span></span><br><span class="line"><span class="addition">+                         &#123;submitting ? 'Adding...' : 'Add'&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://2020.iosdevlog.com/2020/03/27/docker/add.png" /></p><p>Using bind mounts is very common for local development setups.</p><p>在本地开发设置中，使用绑定挂载很常见。</p><p>开发完成后就可以创建自己的 <code>image</code>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t getting-started .</span><br></pre></td></tr></table></figure><h2 id="多个容器-multi-container-apps">多个容器 Multi-Container Apps</h2><p><img src="https://2020.iosdevlog.com/2020/03/27/docker/multi-app-architecture.png" /></p><h3 id="create-the-network.">Create the network.</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create todo-app</span><br></pre></td></tr></table></figure><p>Start a MySQL container and attach it the network.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --network todo-app --network-alias mysql \</span><br><span class="line">    -v todo-mysql-data:/var/lib/mysql \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=secret \</span><br><span class="line">    -e MYSQL_DATABASE=todos \</span><br><span class="line">    mysql:5.7</span><br></pre></td></tr></table></figure><p>connect to the database</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;mysql-container-id&gt; mysql -p</span><br><span class="line">Enter password: secret</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| todos              |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.05 sec)</span><br></pre></td></tr></table></figure><h3 id="connecting-to-mysql">Connecting to MySQL</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --network todo-app nicolaka/netshoot</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nicolaka/netshoot:latest</span><br><span class="line">                    dP            dP                           dP   </span><br><span class="line">                    88            88                           88   </span><br><span class="line">88d888b. .d8888b. d8888P .d8888b. 88d888b. .d8888b. .d8888b. d8888P </span><br><span class="line">88<span class="string">'  `88 88ooood8   88   Y8ooooo. 88'</span>  `88 88<span class="string">'  `88 88'</span>  `88   88   </span><br><span class="line">88    88 88.  ...   88         88 88    88 88.  .88 88.  .88   88   </span><br><span class="line">dP    dP `88888P<span class="string">'   dP   `88888P'</span> dP    dP `88888P<span class="string">' `88888P'</span>   dP   </span><br><span class="line">                                                                    </span><br><span class="line">Welcome to Netshoot! (github.com/nicolaka/netshoot)</span><br></pre></td></tr></table></figure><p><code>dig</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig mysql</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">; &lt;&lt;&gt;&gt; DiG <span class="number">9.14</span><span class="number">.8</span> &lt;&lt;&gt;&gt; mysql</span><br><span class="line">;; <span class="keyword">global</span> options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: <span class="number">61687</span></span><br><span class="line">;; flags: qr rd ra; QUERY: <span class="number">1</span>, ANSWER: <span class="number">1</span>, AUTHORITY: <span class="number">0</span>, ADDITIONAL: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;mysql.<span class="keyword">IN</span>A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">mysql.<span class="number">600</span><span class="keyword">IN</span>A<span class="number">172.18</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line">;; Query time: <span class="number">7</span> msec</span><br><span class="line">;; SERVER: <span class="number">127.0</span><span class="number">.0</span><span class="number">.11</span><span class="meta">#53(127.0.0.11)</span></span><br><span class="line">;; <span class="keyword">WHEN</span>: Fri Mar <span class="number">27</span> <span class="number">16</span>:<span class="number">00</span>:<span class="number">31</span> UTC <span class="number">2020</span></span><br><span class="line">;; MSG SIZE  rcvd: <span class="number">44</span></span><br></pre></td></tr></table></figure><ul><li>MYSQL_HOST - the hostname for the running MySQL server</li><li>MYSQL_USER - the username to use for the connection</li><li>MYSQL_PASSWORD - the password to use for the connection</li><li>MYSQL_DB - the database to use once connected</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -dp 3000:3000 \</span><br><span class="line">  -w /app -v <span class="variable">$PWD</span>:/app \</span><br><span class="line">  --network todo-app \</span><br><span class="line">  -e MYSQL_HOST=mysql \</span><br><span class="line">  -e MYSQL_USER=root \</span><br><span class="line">  -e MYSQL_PASSWORD=secret \</span><br><span class="line">  -e MYSQL_DB=todos \</span><br><span class="line">  node:12-alpine \</span><br><span class="line">  sh -c <span class="string">"yarn install &amp;&amp; yarn run dev"</span></span><br></pre></td></tr></table></figure><p><code>docker logs &lt;container-id&gt;</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yarn install v1.22.0</span><br><span class="line">[1/4] Resolving packages...</span><br><span class="line">success Already up-to-date.</span><br><span class="line">Done <span class="keyword">in</span> 0.54s.</span><br><span class="line">yarn run v1.22.0</span><br><span class="line">$ nodemon src/index.js</span><br><span class="line">[nodemon] 1.19.2</span><br><span class="line">[nodemon] to restart at any time, enter `rs`</span><br><span class="line">[nodemon] watching dir(s): *.*</span><br><span class="line">[nodemon] starting `node src/index.js`</span><br><span class="line">Waiting <span class="keyword">for</span> mysql:3306.</span><br><span class="line">Connected!</span><br><span class="line">Connected to mysql db at host mysql</span><br><span class="line">Listening on port 3000</span><br></pre></td></tr></table></figure><p><code>docker exec -ti &lt;mysql-container-id&gt; mysql -p todos</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  select * from todo_items;</span><br><span class="line">+--------------------------------------+---------------------------------------+-----------+</span><br><span class="line">| id                                   | name                                  | completed |</span><br><span class="line">+--------------------------------------+---------------------------------------+-----------+</span><br><span class="line">| 9b3dc86c-2ec9-4413-8a71-28b3c3515358 | DevOps                                |         0 |</span><br><span class="line">| 9428c285-e5e1-4f50-bf11-ee854cc8554f | Hello, I<span class="string">'m AIDevLog. Welcome to 2020! |         0 |</span></span><br><span class="line"><span class="string">+--------------------------------------+---------------------------------------+-----------+</span></span><br><span class="line"><span class="string">2 rows in set (0.00 sec)</span></span><br></pre></td></tr></table></figure><p><img src="https://2020.iosdevlog.com/2020/03/27/docker/MySQL.png" /></p><h2 id="docker-compose">docker-compose</h2><p><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener" class="uri">https://docs.docker.com/compose/install/</a></p><p>Compose 使用的三个步骤：</p><ol type="1"><li>使用 Dockerfile 定义应用程序的环境。</li><li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li><li>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.25.4/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>output</p><blockquote><p>docker-compose version 1.25.4, build 8d51620a</p></blockquote><p>Creating our Compose File</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># pwd: app</span><br><span class="line">cat docker-compose.yml</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.7"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">node:12-alpine</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">"yarn install &amp;&amp; yarn run dev"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3000</span><span class="string">:3000</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/app</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./:/app</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_HOST:</span> <span class="string">mysql</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">secret</span></span><br><span class="line">      <span class="attr">MYSQL_DB:</span> <span class="string">todos</span></span><br></pre></td></tr></table></figure><p>Running our Application Stack</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f &lt;container-id&gt;</span><br></pre></td></tr></table></figure><p>docker-compose up</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>output</p><blockquote><p>Creating network "app_default" with the default driver<br /><br />Creating volume "app_todo-mysql-data" with default driver<br /><br />Creating app_mysql_1 ... done<br /><br />Creating app_app_1 ... done</p></blockquote><p><code>log</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure><p>output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Attaching to app_mysql_1, app_app_1</span><br><span class="line">app_1    | yarn install v1.22.0</span><br><span class="line">app_1    | [1&#x2F;4] Resolving packages...</span><br><span class="line">...</span><br><span class="line">app_1    | Waiting for mysql:3306...............</span><br><span class="line">app_1    | Connected!</span><br><span class="line">app_1    | Connected to mysql db at host mysql</span><br><span class="line">app_1    | Listening on port 3000</span><br><span class="line">mysql_1  | 2020-03-27 16:37:47+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 5.7.29-1debian10 started.</span><br><span class="line">...</span><br><span class="line">mysql_1  | 2020-03-27T16:38:06.309134Z 0 [Note] Event Scheduler: Loaded 0 events</span><br><span class="line">mysql_1  | 2020-03-27T16:38:06.309309Z 0 [Note] mysqld: ready for connections.</span><br><span class="line">mysql_1  | Version: &#39;5.7.29&#39;  socket: &#39;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock&#39;  port: 3306  MySQL Community Server (GPL)</span><br><span class="line">mysql_1  | 2020-03-27T16:38:06.365195Z 2 [Note] Got an error reading communication packets</span><br></pre></td></tr></table></figure><p>Tearing it All Down</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><h2 id="image-building-best-practices">Image Building Best Practices</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ docker image <span class="built_in">history</span> getting-started</span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">7e58c32dc1b5        5 hours ago         /bin/sh -c <span class="comment">#(nop)  CMD ["node" "/app/src/ind…   0B                  </span></span><br><span class="line">ebe4a0dcca7e        5 hours ago         /bin/sh -c yarn install --production            83.2MB              </span><br><span class="line">3fd0eef12d70        5 hours ago         /bin/sh -c <span class="comment">#(nop) COPY dir:2f31be1c05e031e42…   6.65MB              </span></span><br><span class="line">c164b9c205a1        5 hours ago         /bin/sh -c <span class="comment">#(nop) WORKDIR /app                  0B                  </span></span><br><span class="line">f77abbe89ac1        3 days ago          /bin/sh -c <span class="comment">#(nop)  CMD ["node"]                 0B                  </span></span><br><span class="line">&lt;missing&gt;           3 days ago          /bin/sh -c <span class="comment">#(nop)  ENTRYPOINT ["docker-entry…   0B                  </span></span><br><span class="line">&lt;missing&gt;           3 days ago          /bin/sh -c <span class="comment">#(nop) COPY file:238737301d473041…   116B                </span></span><br><span class="line">&lt;missing&gt;           3 days ago          /bin/sh -c apk add --no-cache --virtual .bui…   7.62MB              </span><br><span class="line">&lt;missing&gt;           3 days ago          /bin/sh -c <span class="comment">#(nop)  ENV YARN_VERSION=1.22.0      0B                  </span></span><br><span class="line">&lt;missing&gt;           3 days ago          /bin/sh -c addgroup -g 1000 node     &amp;&amp; addu…   74.9MB              </span><br><span class="line">&lt;missing&gt;           3 days ago          /bin/sh -c <span class="comment">#(nop)  ENV NODE_VERSION=12.16.1     0B                  </span></span><br><span class="line">&lt;missing&gt;           3 days ago          /bin/sh -c <span class="comment">#(nop)  CMD ["/bin/sh"]              0B                  </span></span><br><span class="line">&lt;missing&gt;           3 days ago          /bin/sh -c <span class="comment">#(nop) ADD file:0c4555f363c2672e3…   5.6MB</span></span><br></pre></td></tr></table></figure><h3 id="layer-caching">Layer Caching¶</h3><p>Update the Dockerfile to copy in the <code>package.json</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">12</span>-alpine</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json yarn.lock ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yarn install --production</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"node"</span>, <span class="string">"/app/src/index.js"</span>]</span></span><br></pre></td></tr></table></figure><p>Build a new image using docker build</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t getting-started .</span><br></pre></td></tr></table></figure><p>更改 <code>src/static/index.html</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/src/static/index.html b/src/static/index.html</span><br><span class="line">index a606bf1..19cfb57 100644</span><br><span class="line"><span class="comment">--- a/src/static/index.html</span></span><br><span class="line"><span class="comment">+++ b/src/static/index.html</span></span><br><span class="line"><span class="meta">@@ -8,7 +8,7 @@</span></span><br><span class="line">     &lt;link rel="stylesheet" href="css/font-awesome/all.min.css" crossorigin="anonymous" /&gt;</span><br><span class="line">     &lt;link href="https://fonts.googleapis.com/css?family=Lato&amp;display=swap" rel="stylesheet" /&gt;</span><br><span class="line">     &lt;link rel="stylesheet" href="css/styles.css" /&gt;</span><br><span class="line"><span class="deletion">-    &lt;title&gt;Todo App&lt;/title&gt;</span></span><br><span class="line"><span class="addition">+    &lt;title&gt;AIDevLog Todo App&lt;/title&gt;</span></span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">     &lt;div id="root"&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><code>docker build</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t getting-started .</span><br><span class="line">Sending build context to Docker daemon  65.73MB</span><br><span class="line">Step 1/6 : FROM node:12-alpine</span><br><span class="line"> ---&gt; f77abbe89ac1</span><br><span class="line">Step 2/6 : WORKDIR /app</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; c164b9c205a1</span><br><span class="line">Step 3/6 : COPY package.json yarn.lock ./</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 77446d8145bc</span><br><span class="line">Step 4/6 : RUN yarn install --production</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; f0323073e6ce</span><br><span class="line">Step 5/6 : COPY . .</span><br><span class="line"> ---&gt; 0e1288f88991</span><br><span class="line">Step 6/6 : CMD [<span class="string">"node"</span>, <span class="string">"/app/src/index.js"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> f3a0bd941311</span><br><span class="line">Removing intermediate container f3a0bd941311</span><br><span class="line"> ---&gt; 2abff2421550</span><br><span class="line">Successfully built 2abff2421550</span><br><span class="line">Successfully tagged getting-started:latest</span><br></pre></td></tr></table></figure><h2 id="docker-cheatsheets.md"><a href="https://gist.github.com/JustinTW/10236453" target="_blank" rel="noopener">Docker-Cheatsheets.md</a></h2><h3 id="clean-all">Clean all</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker stop `docker ps -a -q` </span><br><span class="line">docker rm `docker ps -a -q` </span><br><span class="line">docker rmi -f `sudo docker images -q`</span><br><span class="line">docker volume rm $(docker volume ls -f dangling=<span class="literal">true</span> -q)</span><br></pre></td></tr></table></figure><h3 id="clean-image">Clean <none> image</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images --no-trunc | grep none | awk <span class="string">'&#123;print $3&#125;'</span> | xargs docker rmi -f</span><br></pre></td></tr></table></figure><h3 id="change-docker-image-location">Change docker image location</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">btrfs subvolume create /mnt/disk/@docker</span><br><span class="line">rsync -aqxP /var/lib/docker/* /mnt/disk/@docker</span><br></pre></td></tr></table></figure><ul><li>method 1: <code>變更 docker 儲存路徑</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>:[<span class="string">"https://cache-docker.hopebaytech.com"</span>],</span><br><span class="line">  <span class="string">"insecure-registries"</span>:[<span class="string">"docker:5000"</span>],</span><br><span class="line">  <span class="string">"dns"</span>:[<span class="string">"172.16.1.254"</span>, <span class="string">"8.8.8.8"</span>],</span><br><span class="line">  <span class="string">"graph"</span>: <span class="string">"/mnt/disk/docker"</span>,</span><br><span class="line">  <span class="string">"storage-driver"</span>: <span class="string">"btrfs"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新啟動服務</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop docker</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="啟動設定檔位置">啟動設定檔位置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line">&#x2F;etc&#x2F;default&#x2F;docker</span><br><span class="line">&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d&#x2F;docker.conf</span><br></pre></td></tr></table></figure><h3 id="attach-a-running-container">Attach a running container</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list containers</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># attach a running containers</span></span><br><span class="line">docker attach [CONTAINER ID]</span><br><span class="line"></span><br><span class="line"><span class="comment"># attach a running containers into bash</span></span><br><span class="line">docker <span class="built_in">exec</span> -i -t arkease-pro-web bash</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/27/docker/docker-cheat-sheet.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image/镜像: 系统镜像 CentOS.iso&lt;/li&gt;
&lt;li&gt;Container/容器: 虚拟机 VM&lt;/li&gt;
&lt;li&gt;Docker Hub: 镜像中心 GitHub&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://2020.iosdevlog.com/categories/docker/"/>
    
    
      <category term="devops" scheme="https://2020.iosdevlog.com/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>DevOps 实战笔记</title>
    <link href="https://2020.iosdevlog.com/2020/03/27/DevOps/"/>
    <id>https://2020.iosdevlog.com/2020/03/27/DevOps/</id>
    <published>2020-03-27T01:49:24.000Z</published>
    <updated>2020-03-28T16:12:10.044Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/0.png" /></p><blockquote><p>DevOps（Development 和 Operations 的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。</p></blockquote><p>——维基百科[^1]</p><p>DevOps经常被描述为“开发团队与运营团队之间更具协作性、更高效的关系”。由于团队间协作关系的改善，整个组织的效率因此得到提升，伴随频繁变化而来的生产环境的风险也能得到降低。</p><a id="more"></a><p>团队间沟通和协作的重要性一点也不亚于写代码、写文档、做测试之类的常规工作。</p><p>如何快速地持续交付高质量的软件，满足用户的多样化需求，并借此提升企业的利润和市场占有率，已经成为企业必须要面对的现实问题。</p><p>软件开发过程的改进，除了依赖于技术进步，还依赖于流程、理念、文化等全方位的改进，而这正是 DevOps 带给软件开发方式的一场革命。</p><p>DevOps 已经成为了所有 IT 从业人员应知应会的必备技能。</p><h2 id="devops-实践指南2">《DevOps 实践指南》[^2]</h2><ul><li>如何梳理出一套清晰的 DevOps 理念和完整的知识体系？</li><li>如何获得一线大厂的实践经验，让 DevOps 真正落地？</li><li>如何获得一条渐进式的 DevOps 学习曲线，让自己在正确的方向上不断增值？</li></ul><h2 id="基础知识篇">基础知识篇</h2><p>DevOps 的定义、价值、实施与衡量，在最开始帮你建立起正确的 DevOps 体系认知。</p><p>软件工程诞生以来所历经的三个重要发展阶</p><ol type="1"><li>瀑布式开发模式</li><li>敏捷式开发模式</li><li>DevOps 模式</li></ol><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/1.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/2.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/3.png" /></p><p>整个软件交付过程中，不仅只有开发和运维，业务也是重要的一环。</p><blockquote><p>DevOps 是通过平台（Platform）、流程（Process）和人（People）的有机整合，以 C（协作）A（自动化）L（精益）M（度量）S（共享）文化为指引，旨在建立一种可以快速交付价值并且具有持续改进能力的现代化 IT 组织。</p></blockquote><p>软件慢慢从企业内部的支撑系统和成本中心，变成了企业服务的直接载体和利润中心。</p><p>VUCA 时代</p><ol type="1"><li>易变性（Volatility）</li><li>不确定性（Uncertainty）</li><li>复杂性（Complexity）</li><li>模糊性（Ambiguity）</li></ol><p>软件交付的效率和质量成了当今企业的核心价值和核心竞争力。</p><p>“工业革命消灭了绝大多数的手工业群体，却催生了程序员这个现存最大的手工业群体”。</p><p>DevOps 的 4 个结果指标</p><ol type="1"><li><strong>部署频率</strong>：指应用和服务向生产环境部署代码的频率。</li><li><strong>变更前置时间</strong>：指代码从提交到成功运行在生产环境的时长。</li><li><strong>服务恢复时间</strong>：指线上应用和服务出现故障到恢复运行的时长。</li><li><strong>变更失败率</strong>：指应用和服务在生产环境部署失败或者部署后导致服务降级的比例。</li></ol><p>软件交付</p><ol type="1"><li>交付效率</li><li>交付质量</li></ol><p>高效能的组织不仅做到了高效率，还实现了高质量。</p><p><code>工具和文化</code></p><ul><li>DevOps 工具</li></ul><p>一切软件交付过程中的手动环节，都是未来可以尝试进行优化的方向。</p><ul><li>DevOps 文化</li></ul><p>在不同的文化制度下，相同的人发挥出来的生产力也会有天壤之别。</p><p>DevOps 的 3 个支柱</p><ol type="1"><li>人（People）</li><li>流程（Process）</li><li>平台（Platform）</li></ol><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/4.png" /></p><p>技术采纳生命周期定律</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/5.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/6.png" /></p><p>步骤与原则</p><p><code>道法术器</code> DevOps：<code>法</code></p><ol type="1"><li>识别差距</li><li>锚定目标</li><li>关注能力</li><li>持续改进</li></ol><p>DevOps 实施的过程</p><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/7.png" alt="" /><figcaption>部署引力图</figcaption></figure><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/8.png" /></p><h2 id="落地实践篇">落地实践篇</h2><h3 id="转型路径">转型路径</h3><p>最核心的部分。我将带你通盘梳理 DevOps 的转型路径。</p><p><code>VSM</code> 是 Value Stream Mapping 的缩写，也就是我们常说的价值流图。</p><p>VSM 是企业 DevOps 转型的第一步。</p><p>《DevOps 实践指南》三步工作法</p><ul><li><strong>第一步：流动。</strong> 通过工作可视化，限制在制品数量，并注入一系列的工程实践，从而加速从开发到运营的流动过程，实现低风险的发布。</li><li><strong>第二步：反馈。</strong> 通过注入流动各个过程的反馈能力，使缺陷在第一时间被发现，用户和运营数据第一时间展示，从而提升组织的响应能力。</li><li><strong>第三步：持续学习和试验。</strong> 没有任何文化和流程是天生完美的，通过团队激励学习分享，将持续改进注入日常工作，使组织不断进步。</li></ul><p>通过流程和平台的结合，来驱动流程的自动化流转，这才是 DevOps 的正确姿势。</p><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/9.png" alt="" /><figcaption>价值流交付图</figcaption></figure><p>价值</p><ol type="1"><li>看见全貌</li><li>识别问题</li><li>促进沟通</li><li>驱动度量</li><li>价值展现</li></ol><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/10.jpeg" alt="" /><figcaption>VSM</figcaption></figure><h4 id="实施-devops-的常见路径">实施 DevOps 的常见路径</h4><ul><li>自底向上</li><li>自顶向下</li></ul><p>通用路径</p><ol type="1"><li>寻找合适的试点项目<ol type="1"><li>贴近核心业务</li><li>倾向敏捷业务</li><li>改进意愿优先</li></ol></li><li>寻找团队痛点</li><li>快速建立初期成功</li><li>快速展示和持续改进</li></ol><p>DevOps 转型的 J 型曲线</p><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/11.png" alt="" /><figcaption>J</figcaption></figure><p>转型小组</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/12.jpg" /></p><h3 id="敏捷实践">敏捷实践</h3><h4 id="如果业务不够敏捷it-再怎么努力也没用">如果业务不够敏捷，IT 再怎么努力也没用</h4><p>业务敏捷和交付能力二者缺一不可</p><p>关于需求分析： 影响地图</p><p>"Why-Who-How-What” 分析方法</p><ul><li>Why 代表目标，它可以是一个核心的业务目标，也可以是一个实际的用户需求。</li><li>Who 代表影响对象，也就是通过影响谁来实现这个目标。</li><li>How 代表影响，也就是怎样影响用户以实现我们的目标。</li><li>What 代表需要交付什么样的功能，可以带来期望的影响。</li></ul><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/13.png" alt="" /><figcaption>影响地图</figcaption></figure><p>卡诺模型（Kano Model）</p><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/14.png" alt="" /><figcaption>卡诺模型（Kano Model）</figcaption></figure><ol type="1"><li><strong>兴奋型</strong>：指超乎用户想象的需求，是可遇不可求的功能。比如用户想要一个更好的功能手机，乔布斯带来了 iPhone，这会给用户带来极大的满足感。</li><li><strong>期望型</strong>：用户的满意度会随着这类需求数量的增多而线性增长，做得越多，效果越好，但难以有质的突破。比如，一个电商平台最开始是卖书，后面逐步扩展到卖电脑、家居用品等多个类别。用户更多的线性需求被满足，满意度自然也会提升。</li><li><strong>必备型</strong>：这些是产品必须要有的功能，如果没有的话，会带来非常大的影响。不过有这些功能的话，也没人会夸你做得有多好，比如安全机制和风控机制等。</li><li><strong>无差别型</strong>：做了跟没做一样，这就是典型的无用功。比如你花了好大力气做了一个需求，但是几乎没有用户使用，这个需求就属于无差别型。</li><li><strong>反向型</strong>：无中生有类需求，实际上根本不具备使用条件，或者用户压根不这么想。这类需求做出来以后，通常会给用户带来很大的困扰，成为被吐槽的对象。</li></ol><p>核心要做到 3 点</p><ol type="1"><li>优先规划期望型和必备型需求，将其纳入日常的交付迭代中，保持一定的交付节奏；</li><li>识别无差别型和反向型需求，这些对于用户来说并没有产生价值。如果团队对需求的分类有争议，可以进一步开展用户调研和分析。</li><li>追求兴奋型需求，因为它会带来产品的竞争壁垒和差异化。</li></ol><p>用户故事拆分粒度，遵循 INVEST 原则</p><ul><li><strong>Independent（独立的）</strong>：减少用户故事之间的依赖，可以让用户故事更加灵活地验证和交付，而避免大批量交付对于业务敏捷性而言至关重要。</li><li><strong>Negotiable（可协商的）</strong>：用户故事不应该是滴水不漏、行政命令式的，而是要抛出一个场景描述，并在需求沟通阶段不断细化完成。</li><li><strong>Valuable（有价值的）</strong>：用户故事是以用户价值为核心的，所以每个故事都是在对用户交付价值，所以要站在用户的视角思考问题，避免像最近特别火的那句话一样：“我不要你觉得，我要我觉得。”</li><li><strong>Estimatable（可评估的）</strong>：用户故事应该可以粗略评估工作量，无论是故事点数还是时间，都可以。如果是一个预研性质的故事，则需要进一步深挖可行性，避免不知道为什么做而做。</li><li><strong>Small（小的）</strong>：用户故事应该是最小的交付颗粒度，所以按照敏捷开发方式，无论迭代还是看板，都需要在一个交付周期内完成。</li><li><strong>Testable（可测试的）</strong>：也就是验收条件，如果没有办法证明需求已经完成，也就没有办法进行验收和交付。</li></ul><p>MVP 原则</p><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/15.png" alt="" /><figcaption>MVP 原则</figcaption></figure><p>BizDevOps</p><p>引入业务的 DevOps，就成了 BizDevOps，这也是 DevOps 发展的一种潮流。</p><p>核心理念：</p><ul><li>对齐业务和开发目标、指标；</li><li>把握安全、合规指标；</li><li>及时对齐需求，减少无用开发；</li><li>体现 DevOps 的价值；</li><li>让开发团队开始接触业务，不单单是执行，调动积极性。</li></ul><h4 id="精益看板">精益看板</h4><p>《改变世界的机器》</p><p>加快价值流动是精益看板的核心</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/16.png" /></p><p>精益看板的实践方法</p><ol type="1"><li><p>可视化流程</p></li><li><p>定义清晰的规则</p><ol type="1"><li>可视化规则<ol type="1"><li>卡片的颜色<ol type="1"><li>需求（绿色）</li><li>缺陷（红色）</li><li>改进事项（蓝色）</li></ol></li><li>卡片的内容</li><li>卡片的依赖和阻塞状态</li></ol></li><li>显式化规则</li></ol></li><li><p>限制在制品数量</p><ol type="1"><li>需求流入节点</li><li>需求流出节点</li></ol></li><li><p>管理工作流程</p><ol type="1"><li>每日站会</li><li>队列填充会议</li><li>发布规划会议</li></ol></li><li><p>建立反馈和持续改进</p></li></ol><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/17.png" alt="" /><figcaption>看板</figcaption></figure><p>看板创始人 David J Anderson 总结了看板方法的成熟度模型，用于指导中大型团队实践看板方法</p><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/18.png" alt="" /><figcaption>kmm</figcaption></figure><h3 id="工程实践">工程实践</h3><h4 id="配置管理工程实践基础">配置管理：工程实践基础</h4><ol type="1"><li>版本变更标准化 Git<ol type="1"><li>提交概要信息</li><li>提交详细信息</li><li>提交关联需求</li></ol></li><li>将一切纳入版本控制<ol type="1"><li>制品管理</li><li>生成物不需要版本控制</li></ol></li><li>全流程可追溯</li><li>单一可信数据源</li></ol><h4 id="分支策略让研发高效协作的关键要素">分支策略：让研发高效协作的关键要素</h4><p><code>git flow</code></p><ol type="1"><li>主干开发，分支发布</li><li>分支开发，主干发布</li><li>主干开发，主干发布</li></ol><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/19.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/20.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/21.png" /></p><p><code>git checkout feature1 &amp;&amp; git fetch origin &amp;&amp; git rebase -i origin/master</code></p><p>最常见的操作包括：</p><ol type="1"><li>p：选择提交；</li><li>r：更新提交的注释信息；</li><li>e：编辑提交，可以将一个提交拆分成多个；</li><li>s：压合提交，将多个提交合并成一个；</li><li>f：类似压合提交，但是放弃这个提交的注释信息，直接使用合并提交的注释信息；</li></ol><p>当然，在 git rebase 的交互界面中，你也可以调整提交的顺序，比如将特性功能和关联的 Bugfix 整合在一起。</p><h4 id="持续集成-ci">持续集成 CI</h4><p>CI 是 Continuous Integration 的缩写，也就是我们熟悉的持续集成</p><blockquote><p>CI 是一种软件开发实践，团队成员频繁地将他们的工作成果集成到一起（通常每人每天至少提交一次，这样每天就会有多次集成），并且在每次提交后，自动触发运行一次包含自动化验证集的构建任务，以便尽早地发现集成问题。</p></blockquote><p>——马丁·福勒（Martin Fowler）</p><p>越是痛苦的事情，就要越频繁地做。</p><p>实施 CI 三个阶段</p><ol type="1"><li>第一阶段：每次提交触发完整的流水线<ol type="1"><li>统一的分支策略</li><li>清晰的集成规则</li><li>标准化的资源池</li><li>足够快的反馈周期</li></ol></li><li>第二阶段：每次流水线触发自动化测试<ol type="1"><li>匹配合适的测试活动</li><li>树立测试结果的公信度</li><li>提升测试活动的有效性</li></ol></li><li>第三阶段：出了问题可以在第一时间修复</li></ol><h4 id="自动化测试devops的阿克琉斯之踵">自动化测试：DevOps的阿克琉斯之踵</h4><p>自动化测试建设也面临着一些问题</p><ol type="1"><li>投入产出比</li><li>上手门槛</li><li>维护成本高</li><li>测试设备投入高</li></ol><p>自动化测试的设计</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/22.png" /></p><p>DevOps Handbook</p><p>Web 应用</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/23.png" /></p><p>自动化测试的开发</p><ul><li>cURL</li><li>Postman</li><li>JMeter</li></ul><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/24.png" /></p><p>如果自动化测试覆盖率足够高，那么软件质量一定不会差到哪儿去。</p><p>自动化测试结果分析</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/25.png" /></p><h4 id="内建质量丰田和亚马逊给我们的启示">内建质量：丰田和亚马逊给我们的启示</h4><ol type="1"><li>问题发现得越早，修复成本就越低；</li><li>质量是每个人的责任，而不是质量团队的责任。</li></ol><p>在开发阶段，代码评审和持续集成就是一个非常好的内建质量的实践。</p><p>内建质量的实施步骤</p><ol type="1"><li>第一步：选择适合的检查类型</li><li>第二步：定义指标并达成一致<ol type="1"><li>参考值的定义是一门艺术</li><li>静态指标就是固定值</li></ol></li><li>第三步：建立自动化执行和检查能力</li><li>第四步：定义问题处理方式</li><li>第五步：持续优化和改进</li></ol><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/26.png" /></p><p>核心目标不是为了通过质量门禁，而是为了质量提升，这才是最重要的。</p><p>内建质量的常见问题</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/27.jpg" /></p><h4 id="技术债务那些不可忽视的潜在问题">技术债务：那些不可忽视的潜在问题</h4><p>什么是技术债务？</p><blockquote><p>老板拍下来一个紧急需求，要求你在 3 天内开发完成上线。</p></blockquote><ul><li>方案 1：采用分层架构，引入消息队列。这样做的好处是结构清晰，功能解耦，但是需要 1 周的时间；</li><li>方案 2：直接在原有代码的基础上修修补补，硬塞进去一块逻辑和页面，这样做需要 2 天时间，还有 1 天时间来测试。</li></ul><p>代码维护的时间越长，引入的技术债务就会越多，从而使团队背上沉重的负担。</p><p>技术债务长什么样？</p><ul><li>一份代码里面定义了一堆全局变量，各个角落都在引用；</li><li>一个脚本仓库里面，一大堆名字看起来差不多的脚本，内容也都差不多；</li><li>一个函数里面修修补补写了上千行；数据表查询各种神奇的关联；</li><li>参数传递纯靠肉眼计算顺序；</li><li>因为修改一段代码引发了一系列莫名其妙的问题；</li><li>……</li></ul><p>七宗罪</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/28.jpg" /></p><p>为什么要重视技术债务？</p><ol type="1"><li>额外的研发成本</li><li>不稳定的产品质量</li><li>难以维护的产品</li></ol><p>如何量化技术债务？</p><p>目前业界比较常用的开源软件，就是 SonarQube。</p><p>解决方法和原则</p><p>解决技术债务步骤</p><ol type="1"><li>共识</li><li>可见</li><li>止损</li><li>改善</li></ol><p>4 条原则</p><ol type="1"><li>让技术债务呈良性下降趋势。</li><li>优先解决高频修改的问题。</li><li>在新项目中启动试点。</li><li>技术债务无法被消灭，也不要等到太晚。</li></ol><p>优先处理</p><ul><li>大量重复代码；</li><li>类之间的耦合严重；</li><li>方法过于复杂；</li><li>条件判断嵌套太多；</li><li>缺少必要的异常处理；</li><li>多表关联和缺少索引；</li><li>代码风险和缺陷；</li><li>安全漏洞。</li></ul><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/29.jpeg" /></p><h3 id="部署实践">部署实践</h3><h4 id="环境管理一切皆代码">环境管理：一切皆代码</h4><p>环境就成了软件行业的“头号背锅侠”。</p><p>环境管理的挑战</p><ol type="1"><li>环境种类繁多</li><li>环境复杂性上升</li><li>环境一致性难以保证</li><li>环境交付速度慢</li><li>环境变更难以追溯</li></ol><p>基础设施即代码就是用一种描述性的语言，通过文本管理环境配置，并且自动化完成环境配置的方式。</p><p>典型的就是以 <code>CAPS</code> 为代表的自动化环境配置管理工具，也就是 <code>Chef、Ansible、Puppet 和 Saltstacks</code> 四个开源工具的首字母缩写。</p><p>开发运维打通的 GitOps 实践</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/30.png" /></p><p>开发环境的治理实践</p><p>采用基础设施即代码的方法，生成一个包含全部工具依赖的 <code>Docker</code> 镜像，并分发给开发团队。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span>  harbor.devops.com:<span class="number">5000</span>/test:ansible </span><br><span class="line"><span class="keyword">MAINTAINER</span> XX &lt;xx@devops.com&gt;</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./docker  /docker</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /docker</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">export</span> TMPDIR=/var/tmp &amp;&amp; ansible-playbook -v -i playbooks/inventories/docker playbooks/docker_container.yml</span></span><br></pre></td></tr></table></figure><h4 id="部署管理低风险的部署发布策略">部署管理：低风险的部署发布策略</h4><p>部署和发布这两个概念，经常会被混用，但严格来说，部署和发布代表两种不同的实践。</p><p><code>部署</code> 是一组技术实践，表示通过技术手段，将本次开发测试完成的功能实体（比如代码、二进制包、配置文件、数据库等）应用到指定环境的过程，包括开发环境、预发布环境、生产环境等。部署的结果是对服务器进行变更，但是这个变更结果不一定对外可见。</p><p><code>发布，也就是 Release</code>，更偏向一种业务实践，也就是将部署完成的功能正式生效，对用户可见和提供服务的过程。</p><p>要在保障一定的质量水平的前提下，尽量加快发布节奏，并通过低风险发布手段，以及线上测试和监控能力，尽早地发现问题，并以一种最简单的手段来快速恢复。</p><ul><li>一定的质量水平</li><li>低风险发布手段</li><li>线上测试和监控</li><li>快速恢复</li></ul><p>低风险的发布手段</p><ol type="1"><li>蓝绿部署</li><li>灰度发布</li><li>暗部署</li></ol><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/31.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/32.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/33.png" /></p><p><a href="https://www.gocd.org/2017/07/25/blue-green-deployments.html" target="_blank" rel="noopener" class="uri">https://www.gocd.org/2017/07/25/blue-green-deployments.html</a></p><p>线上测试和监控</p><p>开源的 GoReplay 工具</p><ol type="1"><li>采用灰度发布、用户众测等方式，逐步观察用户行为并收集用户数据，以验证新版本的可用性是否符合预期。</li><li>用户反馈</li><li>使用线上流量测试</li></ol><p>快速恢复</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/34.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/35.png" /></p><h4 id="混沌工程软件领域的反脆弱">混沌工程：软件领域的反脆弱</h4><blockquote><p>Chaos Engineering is the discipline of experimenting on a distributed system in order to build confidence in the system’s capability to withstand turbulent conditions in production.</p><p>混沌工程是一门在分布式系统上进行实验的学科，目的是建立人们对于复杂系统在生产环境中抵御突发事件的信心。</p></blockquote><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/36.jpeg" /></p><p>故障演练就是针对以往发生过的问题进行有针对性地模拟演练。</p><p>混沌工程不是为了制造问题，而是为了揭示问题。</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/37.png" /></p><p>混沌工程的原则</p><ul><li>建立稳定状态的假设</li><li>真实世界的事件</li><li>在生产中试验</li><li>持续的自动化实验</li><li>最小影响范围</li></ul><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/38.jpg" alt="" /><figcaption>参考指标</figcaption></figure><h3 id="度量改进">度量改进</h3><h4 id="正向度量如何建立完整的devops度量体系">正向度量：如何建立完整的DevOps度量体系？</h4><p>DevOps 希望做到的就是持续、快速和高质量的价值交付。</p><p>指标典型特征</p><ol type="1"><li>明确受众</li><li>直指问题</li><li>量化趋势</li><li>充满张力</li></ol><p>定义指标原则</p><ol type="1"><li><strong>全局指标优于局部指标</strong>：过度的局部优化可能对整体产出并无意义，从而偏离了度量的核心，也就是提升交付速度和交付质量。</li><li><strong>综合指标优于单一指标</strong>：从单一维度入手会陷入只见树木不见森林的困境，综合指标更加客观。所以，要解决一个问题，就需要一组指标来客观指引。</li><li><strong>结果指标优于过程指标</strong>：首先要有结果指标，以结果为导向，以过程为途径，一切过程指标都应该归结到结果指标。</li><li><strong>团队指标优于个人指标</strong>：优先考核团队指标而非个人指标，团队共享指标有助于形成内部合力，减少内部的割裂。</li><li><strong>灵活指标优于固化指标</strong>：指标的设立是为了有针对性地实施改进，需要考虑业务自身的差异性和改进方向，而非简单粗暴的“一刀切”，并且随着团队能力的上升，指标也需要适当的调整，从而不断挑战团队的能力。</li></ol><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/39.jpeg" /></p><p>如何开启度量工作？</p><ol type="1"><li>第 1 步：细化指标</li><li>第 2 步：收集度量数据</li><li>第 3 步：建立可视化平台</li><li>第 4 步：识别瓶颈并持续改进</li></ol><p>指标宜少不宜多，宜精不宜烂</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/40.jpg" /></p><h4 id="持续改进pdca体系和持续改进的意义">持续改进：PDCA体系和持续改进的意义</h4><p>核心就是团队已经具备了持续改进的能力，而不只是简简单单地引入了几个工具，建立了几个度量指标而已。</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/41.png" /></p><p>鼓励正向回溯和总结</p><p>故障回溯并不一定以确定责任为第一要务，更重要的是，要识别系统流程中的潜在问题和漏洞，并通过后续机制来进行保障，比如增加测试用例、增加产品走查事项等等。</p><p>其实，大到线上故障，小到日常错误，都值得回溯和总结。</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/42.png" /></p><p>预留固定时间进行改进</p><p>在团队的 Backlog 中新增一类任务，专门用于记录和跟踪这类持续改进的内容。</p><h2 id="平台工具篇">平台工具篇</h2><p>涵盖平台建设的 3 个阶段、产品研发和设计、不可忽视的开源工具等，帮你找到快速搭建平台的钥匙。</p><h3 id="开源还是自研企业devops平台建设的三个阶段">开源还是自研：企业DevOps平台建设的三个阶段</h3><p>企业 DevOps 平台建设的三个阶段</p><p>阶段一：从无到有</p><p>核心原则就是选择主流工具</p><ul><li>需求管理工具 Jira；</li><li>知识管理工具 Confluence；</li><li>版本控制系统 GitLab；</li><li>持续集成工具 Jenkins；</li><li>代码质量工具 SonarQube；</li><li>构建工具 Maven/Gradle；</li><li>制品管理 Artifactory/Harbor；</li><li>配置管理工具 Ansible；</li><li>配置中心 Apollo；</li><li>测试工具 RF/Selenium/Appium/Jmeter/TestNG；安</li><li>全合规工具 BlackDuck/Fortify；</li><li>……</li></ul><p>阶段二：从小到大</p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/43.png" /></p><p>阶段三：从繁到简</p><p>你要提供的不再是一个工具，而是一整套的解决方案；不是解决一个问题，而是解决交付过程中方方面面的问题。</p><p>DevOps 核心理念</p><ol type="1"><li>标准化：一切皆有规则，一切皆有标准；</li><li>自动化：干掉一切不必要的手工操作环节，能一键完成的，绝不操作两次；</li><li>服务化：面向用户设计，而不是面向专家设计，让每个人都能在没有外界依赖的前提下，完成自己的工作；</li><li>数据化：对数据进行收集、汇总、分析和展示，让客观数据呈现出来，让数据指导持续改进。</li></ol><h3 id="产品设计之道devops产品设计的五个层次">产品设计之道：DevOps产品设计的五个层次</h3><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/44.png" /></p><h3 id="持续交付平台现代流水线必备的十大特征">持续交付平台：现代流水线必备的十大特征</h3><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/45.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/46.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/47.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/48.png" /></p><h3 id="让数据说话如何建设企业级数据度量平台">让数据说话：如何建设企业级数据度量平台？</h3><p>事前：指标共识</p><p><strong>数据本身不会说话，是人们赋予了数据意义</strong>，而“这个意义“就是度量指标。</p><p>事中：平台建设</p><p>挑战一：大量数据源平台对接</p><p>插件化：数据采集器</p><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/49.png" alt="" /><figcaption>数据采集器</figcaption></figure><p>挑战二：海量数据存储分析</p><ol type="1"><li>数据量大</li><li>数据结构不统一</li><li>数据访问频</li></ol><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/50.png" alt="" /><figcaption>数据度量的架构图</figcaption></figure><p>事后：规则落地</p><h3 id="平台产品研发">平台产品研发</h3><p>开发策略</p><p><strong>研发环境容器化</strong></p><p>开发协作流程</p><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/51.png" alt="" /><figcaption>图片版</figcaption></figure><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/52.png" alt="" /><figcaption>文字版</figcaption></figure><p>产品运营策略</p><p>团队不仅要做得好，还要善于运营和宣传，而这又是技术团队的一大软肋。</p><p>很多事情其实没有没有多难，关键就看有没有想，有没有坚持做。</p><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/53.png" alt="" /><figcaption>文字版</figcaption></figure><p>团队文化建设</p><ol type="1"><li>让专业的人做专业的事情</li><li>抓大放小，适当地忽略细节</li></ol><h3 id="开源工具">开源工具</h3><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/54.png" alt="" /><figcaption>系统的架构图</figcaption></figure><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/55.png" alt="" /><figcaption>系统关系示意图</figcaption></figure><h3 id="迈向云端云原生应用时代的平台思考">迈向云端：云原生应用时代的平台思考</h3><blockquote><p>Cloud native computing uses an open source software stack to deploy applications as microservices, packaging each part into its own container, and dynamically orchestrating those containers to optimize resource utilization.</p><p>云原生使用一种开源软件技术栈来部署微服务应用，将每个组件打包到它自己的容器中，并且通过动态编排来优化资源的利用率。</p></blockquote><p>开源软件、微服务应用、容器化部署和动态编排</p><ol type="1"><li>自动化生成依赖的配置文件<ol type="1"><li>Dockerfile：用于生成 Docker 镜像</li><li>Jenkinsfile：应用关联的流水线配置</li><li>Helm Chart：把应用打包并部署运行在 Kubernetes 上的资源文件</li><li>Skaffold：用于在 Kubernetes 中生成 Docker image 的工具</li></ol></li><li>自动化流水线过程<ol type="1"><li>流水线即代码</li><li>流水线的抽象和复用</li><li>流水线的条件判断</li></ol></li><li>自动化多环境部署</li><li>使用云原生流水线</li></ol><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/56.jpeg" alt="" /><figcaption>Serverless Jenkins 和 Tekton 的关系示意图</figcaption></figure><h2 id="转型案例篇">转型案例篇</h2><p>提到的理论、落地实践和工具融入其中，融会贯通。</p><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/57.png" alt="" /><figcaption>微软的 Azure DevOps 平台</figcaption></figure><figure><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/58.jpeg" alt="" /><figcaption>爆炸半径</figcaption></figure><h2 id="成为devops工程师的必备技能">成为DevOps工程师的必备技能</h2><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/59.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/60.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/61.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/62.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/63.jpeg" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/64.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/28/DevOps/65.jpg" /></p><p>[^1]：<a href="https://zh.wikipedia.org/zh-hans/DevOps" target="_blank" rel="noopener" class="uri">https://zh.wikipedia.org/zh-hans/DevOps</a></p><p>[^2]：<a href="https://time.geekbang.org/column/intro/235" target="_blank" rel="noopener" class="uri">https://time.geekbang.org/column/intro/235</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/28/DevOps/0.png&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DevOps（Development 和 Operations 的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;——维基百科[^1]&lt;/p&gt;
&lt;p&gt;DevOps经常被描述为“开发团队与运营团队之间更具协作性、更高效的关系”。由于团队间协作关系的改善，整个组织的效率因此得到提升，伴随频繁变化而来的生产环境的风险也能得到降低。&lt;/p&gt;
    
    </summary>
    
    
      <category term="geek" scheme="https://2020.iosdevlog.com/categories/geek/"/>
    
    
      <category term="devops" scheme="https://2020.iosdevlog.com/tags/devops/"/>
    
      <category term="action" scheme="https://2020.iosdevlog.com/tags/action/"/>
    
  </entry>
  
  <entry>
    <title>AI Cheatsheets</title>
    <link href="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/"/>
    <id>https://2020.iosdevlog.com/2020/03/26/aicheatsheets/</id>
    <published>2020-03-26T15:45:13.000Z</published>
    <updated>2020-03-26T16:41:00.772Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/Scipy.png" /></p><p>我什么时候能总结得这么好呢？</p><a id="more"></a><p><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/Numpy.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/Pandas-1.jpg" /><br /><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/Pandas-2.jpg" /><br /><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/Pandas-3.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/matplotlib-cheatsheet.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/Matplotlib.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/Scikit_learn.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/Neural_network_cells.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/Neural_network_graphs.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/Neural_networks_zoo.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/tensorflow_v_2.0-1.jpg" /><br /><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/tensorflow_v_2.0-2.jpg" /><br /><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/tensorflow_v_2.0-3.jpg" /><br /><img src="https://2020.iosdevlog.com/2020/03/26/aicheatsheets/Keras.jpg" /></p><p><a href="https://aicheatsheets.com" target="_blank" rel="noopener" class="uri">https://aicheatsheets.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/26/aicheatsheets/Scipy.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;我什么时候能总结得这么好呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="https://2020.iosdevlog.com/categories/AI/"/>
    
    
      <category term="cheatsheets" scheme="https://2020.iosdevlog.com/tags/cheatsheets/"/>
    
      <category term="numpy" scheme="https://2020.iosdevlog.com/tags/numpy/"/>
    
      <category term="scipy" scheme="https://2020.iosdevlog.com/tags/scipy/"/>
    
      <category term="matplotlib" scheme="https://2020.iosdevlog.com/tags/matplotlib/"/>
    
      <category term="pandas" scheme="https://2020.iosdevlog.com/tags/pandas/"/>
    
      <category term="tf" scheme="https://2020.iosdevlog.com/tags/tf/"/>
    
      <category term="keras" scheme="https://2020.iosdevlog.com/tags/keras/"/>
    
  </entry>
  
  <entry>
    <title>表格化数据挖掘</title>
    <link href="https://2020.iosdevlog.com/2020/03/25/table/"/>
    <id>https://2020.iosdevlog.com/2020/03/25/table/</id>
    <published>2020-03-25T10:06:00.000Z</published>
    <updated>2020-03-25T13:52:39.686Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/25/table/0.png" /></p><a id="more"></a><h2 id="经典的结构化数据挖掘方法">经典的结构化数据挖掘方法</h2><h3 id="什么是结构化数据">什么是结构化数据</h3><ul><li><p>结构化数据指的主要是表格数据(Tabular Data)</p></li><li><p>最简单的想象:可以记载在 Excel 表格中的均是表格数据</p><ul><li><p>每列数据一般称之为一个变量(字段)</p></li><li><p>变量可以分为离散型变量和连续型变量</p></li></ul></li><li><p>绝大多数的数据都是表格数据(或可以转化为表格数据)</p></li></ul><h3 id="结构化数据的传统建模流程">结构化数据的传统建模流程</h3><ul><li><p>传统来说(在某种意义上仍是如此)，结构化数据常常要求大量的业务理解</p></li><li><p>探索性数据分析往往占很大成分</p></li><li><p>90% 时间花在清洗数据和探索性分析上</p></li></ul><h3 id="传统建模流程的问题">传统建模流程的问题</h3><ul><li><p>最核心的悖论:业务理解从哪里来?</p></li><li><p>一些实际的问题</p><ul><li><p>高维稀疏变量</p></li><li><p>较差的变量质量</p></li><li><p>类似的业务理解能力</p></li><li><p>业务的多变性</p></li></ul></li></ul><h2 id="表格化数据挖掘基本流程">表格化数据挖掘基本流程</h2><h3 id="数据挖掘竞赛和新的建模流程">数据挖掘竞赛和新的建模流程</h3><ul><li><p>竞赛基本流程</p></li><li><p>挑战</p><ul><li><p>无业务理解</p></li><li><p>少数提交机会</p></li><li><p>测试集和训练集可能不一样-&gt; 建模结果必须稳定</p></li><li><p>时间短暂，必须充分利用时间</p></li></ul></li><li><p>数据挖掘竞赛和实际业务中的建模有类似挑战，但有一点重要不同</p><ul><li>实际业务建模必须要逐步引入更多变量，而竞赛中变量已经给定</li></ul></li></ul><h3 id="新的流程">新的流程</h3><ul><li><p>数据清理和EDA</p></li><li><p>半自动的变量构建+手动构建</p></li><li><p>一类模型主要提高准确率，另一些模型做集成备选</p><ul><li><p>传统来说主要用于提高准确率的是靠集成树的方法</p></li><li><p>近年来神经网络为基础的建模越来越多</p></li></ul></li><li><p>集成学习</p><ul><li><p>被集成的模型必须有一定准确性</p></li><li><p>被集成的模型必须有一定的多样性</p></li></ul></li></ul><p><img src="https://2020.iosdevlog.com/2020/03/25/table/1.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/25/table/2.png" /></p><h3 id="关于新的流程的一些说明">关于新的流程的一些说明</h3><ul><li><p>前三个环节经常需要反复进行</p></li><li><p>基本原则:尽可能利用算力和时间</p></li><li><p>不同人对于 EDA 重要性说法不同，个人建议初学者以实验为主</p></li><li><p>非常重要的原则:结合全局和局部信息</p></li></ul><h2 id="半自动特征构建">半自动特征构建</h2><h3 id="target-mean-encoding">Target Mean Encoding</h3><ul><li><p>Target Mean Encoding 简介</p><ul><li><p>对于离散变量最有效编码方法之一</p></li><li><p>对于维度较高的离散性变量效果很好</p></li><li><p>重点在于防止过拟合</p></li></ul></li><li><p>其他的 Groupby 函数应用</p><ul><li><p>实现 Target Mean Encoding 可以使用 df.groupby([A,B])[C].agg(func)</p></li><li><p>Groupby 函数可以应用于任何其他变量，在某种程度上捕捉了多变量之间的交叉效应</p></li><li><p>Func 可以是多种函数，如 mean，std，kurtosis，min，max 等等</p></li><li><p>可以对残差进行以上操作</p></li></ul></li></ul><h3 id="categorical-encoders">Categorical Encoders</h3><ul><li><p>One-hot Encoder</p></li><li><p>Ordinal Encoder</p></li><li><p>其他 Encoder</p><ul><li><p>Count Encoder</p></li><li><p>HashMap</p></li></ul></li></ul><h3 id="连续变量的离散化方法">连续变量的离散化方法</h3><ul><li><p>为什么要对连续变量进行离散化</p><ul><li><p>捕捉非线性效应</p></li><li><p>捕捉交叉效应</p></li></ul></li><li><p>常见的离散化方法</p><ul><li><p>Uniform</p></li><li><p>基于 Quantile</p></li><li><p>基于聚类</p></li><li><p>基于树</p></li></ul></li><li><p>树模型</p></li></ul><h3 id="entity-embedding">Entity Embedding</h3><ul><li><p>Entity Embedding 基础</p></li><li><p>如何加入 Vincinal Information</p></li></ul><h3 id="连续变量的转换">连续变量的转换</h3><ul><li><p>常见的数据转换方法</p></li><li><p>基于 ECDF 的方法</p></li><li><p>Box-Cox 变换和 Yeo-Johnson Transform</p></li></ul><h3 id="缺失值和异常值的处理">缺失值和异常值的处理</h3><ul><li><p>概述</p><ul><li><p>异常值和缺失值的定义常常是难以确定的</p></li><li><p>异常值的检验最可靠的方法</p><ul><li><p>EDA 加上业务逻辑</p></li><li><p>可以根据分位数或其他方法(其他方法未必靠谱)</p></li><li><p>如果异常值是由于输入失误造成的，则可以将之作为缺失值处理</p></li></ul></li><li><p>缺失值的填充往往可以根据业务决定</p><ul><li><p>其他可以采用平均值、中位数或众数进行填充</p></li><li><p>也可以单独构建模型进行预测</p></li></ul></li></ul></li><li><p>常见处理方法</p><ul><li><p>缺失值的填充往往可以根据业务决定</p></li><li><p>缺失和异常本身可能是有信息量的，可以构造哑变量进行处理</p><ul><li>成租的缺失值和异常值本身可能是有信息的</li></ul></li><li><p>对于部分异常值，还需要进行截断处理</p></li><li><p>对于重要的缺失变量，很有可能需要进行预测</p></li><li><p>R 中的一些包，如 MICE，可以帮助进行缺失值和异常值的处理</p></li></ul></li></ul><h2 id="自动特征构建方法">自动特征构建方法</h2><h3 id="自动特征挖掘">自动特征挖掘</h3><ul><li><p>应用</p></li><li><p>难点:组合优化问题</p></li></ul><h3 id="遗传算法简介">遗传算法简介</h3><h3 id="symbolic-learning-简介">Symbolic Learning 简介</h3><ul><li><p>采用遗传算法找寻如何构造衍生变量</p></li><li><p>在 gplearn 库当中已经实现</p></li></ul><h3 id="autocross-简介">AutoCross 简介</h3><ul><li><p>第四范式开发(未开源)</p></li><li><p>主要目的:寻找交叉效应</p></li><li><p>创新</p><ul><li><p>Beam Search</p></li><li><p>简化的逻辑回归求解方式</p></li></ul></li><li><p>可以进行提升</p><ul><li><p>Meta Feature</p></li><li><p>更好的优化方法</p></li></ul></li></ul><h2 id="降维方法">降维方法</h2><h3 id="pcanmf-和-tsne">PCA，NMF 和 tSNE</h3><ul><li><p>为什么要降维</p><ul><li><p>找到宏观信息</p></li><li><p>找到交叉效应</p></li><li><p>不建议先降维再拟合模型</p></li></ul></li><li><p>PCA和NMF简介</p></li><li><p>tSNE 简介</p></li><li><p>实现</p><ul><li><p>在 sklearn 当中均有实现</p><ul><li><p>PCA</p></li><li><p>NMF</p></li><li><p>tSNE</p></li></ul></li></ul></li><li><p>应用</p><ul><li><p>隐藏维度的选择取决于数据</p></li><li><p>数据需要进行预处理</p></li><li><p>标准化</p></li><li><p>选取重要变量</p></li><li><p>去掉过于稀疏的个别变量</p></li><li><p>可构建2折和3折交叉效应</p></li><li><p>降维方法的参数并不十分重要，一般来说如果有时间，选取所有参数并拟合模型进行测试</p></li></ul></li></ul><h3 id="denoising-autoencoder">Denoising AutoEncoder</h3><ul><li><p>Denoising AutoEncoder 简介</p></li><li><p>实践中的注意事项</p><ul><li><p>DAE 一般对多模态有很好效果</p></li><li><p>一般的噪声范畴:5%-20%</p></li><li><p>其他降维方法的 trick 也适用于 DAE</p></li><li><p>注意将中间层均拿出来进行预测</p></li></ul></li></ul><p><img src="https://2020.iosdevlog.com/2020/03/25/table/3.png" /></p><h3 id="variational-autoencoder">Variational AutoEncoder</h3><ul><li><p>Variational AutoEncoder 的数学形式</p></li><li><p>实践中的注意事项</p><ul><li><p>VAE 的实现可见</p></li><li><p>VAE 是很火的研究领域</p></li><li><p>训练常常难以收敛</p></li><li><p>在实际应用中较罕见</p></li></ul></li></ul><h2 id="变量选择方法">变量选择方法</h2><h3 id="概述">概述</h3><ul><li><p>变量重要 = 哲学问题</p></li><li><p>优化角度 = 组合优化问题</p></li><li><p>初步选择可根据数据特点</p><ul><li>最重要的指标为缺失值和变化率</li></ul></li><li><p>其他的一些选择方法</p><ul><li><p>“去一”的选择方法(主要方法)</p></li><li><p>模型相关的方法-&gt;和模型高度相关，不可靠</p></li><li><p>其他优化方法-&gt;不成熟</p></li></ul></li></ul><h3 id="去一选择法">“去一”选择法</h3><ul><li><p>整体流程</p></li><li><p>问题</p></li></ul><h2 id="集成树模型">集成树模型</h2><h3 id="概述-1">概述</h3><ul><li><p>树模型的缺点和优点</p><ul><li><p>优点</p><ul><li><p>非线性效应</p></li><li><p>交叉效应</p></li><li><p>稀疏</p></li></ul></li><li><p>缺点</p><ul><li><p>不稳定</p></li><li><p>表现力差</p></li><li><p>精度差</p></li></ul></li></ul></li><li><p>集成树模型分类</p><ul><li><p>基本思路</p><ul><li>将多个树模型构成进行平均</li></ul></li><li><p>方法</p><ul><li><p>随机森林类</p></li><li><p>随机森林</p></li><li><p>ExtraTrees</p></li><li><p>梯度提升树</p><ul><li><p>GBDT</p></li><li><p>XGBoost</p></li><li><p>LightGBM</p></li><li><p>CatBoost</p></li></ul></li></ul></li></ul></li></ul><h3 id="gbdt-和-xgboost">GBDT 和 XgBoost</h3><ul><li><p>GBDT 的数学</p></li><li><p>XgBoost 的数学</p></li><li><p>XgBoost 的实现</p></li><li><p>XgBoost 的重要参数</p><ul><li><p>最重要的参数</p><ul><li>树的深度</li></ul></li><li><p>其他参数</p><ul><li><p>Eta:一般选取为 0.01-0.2</p></li><li><p>min_child_weight:建议进行 CV finetune</p></li><li><p>Gamma:建议进行 CV finetune</p></li></ul></li></ul></li></ul><p>整理自：<a href="https://github.com/geektime-geekbang/NLP" target="_blank" rel="noopener">《NLP实战高手课》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/25/table/0.png&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="https://2020.iosdevlog.com/categories/AI/"/>
    
    
      <category term="DataMining" scheme="https://2020.iosdevlog.com/tags/DataMining/"/>
    
  </entry>
  
  <entry>
    <title>《10x程序员工作法》思维导图</title>
    <link href="https://2020.iosdevlog.com/2020/03/24/10x/"/>
    <id>https://2020.iosdevlog.com/2020/03/24/10x/</id>
    <published>2020-03-24T13:44:30.000Z</published>
    <updated>2020-03-24T14:42:03.645Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/24/10x/10x.svg" /></p><a id="more"></a><h2 id="以终为始">以终为始</h2><h3 id="重点">重点</h3><ul><li><p>DoD，确定好完成的定义，减少团队内部的理解不一致。</p></li><li><p>用户故事，细化出有价值的需求。</p></li><li><p>持续集成，通过尽早集成，减少改动量，降低集成的难度。</p></li><li><p>精益创业，减少过度开发不确定性产品带来的浪费。</p></li><li><p>迭代 0，在项目开始之前，做好一些基础准备。</p></li></ul><h3 id="思维转变">思维转变</h3><ul><li><p>任何事物都要经过两次创造：</p><ul><li><p>头脑中的创造，也就是智力上的或者第一次创造（Mental/First Creation）</p></li><li><p>付诸实践，也就是实际的构建或第二次创造（Physical/Second Creation）</p></li></ul></li><li><p>在更大的上下文内发现自己的“终”</p></li><li><p>通过推演，找到通往“终”的路径</p></li><li><p>用可度量的“数字”定义自己的“终”</p></li></ul><h3 id="实战指南">实战指南</h3><ul><li><p>遇到事情，倒着想</p></li><li><p>在做任何事之前，先定义完成的标准</p></li><li><p>在做任何需求或任务之前，先定好验收标准</p></li><li><p>尽早提交代码去集成</p></li><li><p>默认所有需求都不做，直到弄清楚为什么要做这件事</p></li><li><p>扩大自己工作的上下文，别把自己局限在一个“程序员”的角色上</p></li><li><p>在动手做一件事之前，先推演一番</p></li><li><p>问一下自己，我的工作是不是可以用数字衡量</p></li><li><p>设计你的迭代 0 清单，给自己的项目做体检</p></li></ul><h2 id="任务分解">任务分解</h2><h3 id="重点-1">重点</h3><ul><li><p>测试金字塔</p><ul><li><p>行业中测试组合的最佳实践</p></li><li><p>多写单元测试是关键</p></li></ul></li><li><p>测试驱动开发</p><ul><li><p>测试驱动开发的节奏</p><ul><li><p>红——绿——重构</p></li><li><p>重构是测试驱动开发区别于测试先行的关键</p></li></ul></li><li><p>测试驱动设计</p></li><li><p>编写可测的代码</p></li></ul></li><li><p>艾森豪威尔矩阵（Eisenhower Matrix）</p><ul><li><p>将事情按照重要和紧急进行划分</p></li><li><p>重要且紧急的事情要立即做</p></li><li><p>重要但不紧急的事情应该是我们重点投入精力的地方</p></li><li><p>紧急但不重要的事情，可以委托别人做</p></li><li><p>不重要不紧急的事情，尽量少做</p></li></ul></li><li><p>最小可行产品</p><ul><li><p>“刚刚好”满足客户需求的产品</p></li><li><p>在实践中，要用最小的代价找到一条可行的路径</p></li></ul></li></ul><h3 id="实战指南-1">实战指南</h3><ul><li><p>动手做一个工作之前，请先对它进行任务分解</p></li><li><p>多写单元测试</p></li><li><p>我们应该编写可测的代码</p></li><li><p>将任务拆小，越小越好</p></li><li><p>按照完整实现一个需求的顺序去安排分解出来的任务</p></li><li><p>要想写好测试，就要写简单的测试</p></li><li><p>想要管理好需求，先把需求拆小</p></li><li><p>尽量做最重要的事</p></li><li><p>做好产品开发，最可行的方式是采用 MVP</p></li></ul><h3 id="评判标准">评判标准</h3><ul><li><p>尽量不写 static 方法</p></li><li><p>主分支开发模型是一种更好的开发分支模型</p></li><li><p>好的用户故事应该符合 INVEST 原则</p></li><li><p>估算是一个加深对需求理解的过程，好的估算是以任务分解为基础的</p></li><li><p>好的测试应该符合 A-TRIP</p></li></ul><h3 id="改善">改善</h3><ul><li><p>分而治之，是人类解决问题的基本手段</p></li><li><p>软件变更成本，它会随着时间和开发阶段逐步增加</p></li><li><p>测试框架把自动化测试作为一种最佳实践引入到开发过程中<br />使得测试动作可以通过标准化的手段固定下来</p></li><li><p>极限编程之所以叫“极限”，它背后的理念就是把好的实践推向极限</p></li><li><p>大师级程序员的工作秘笈是任务分解，分解到可以进行的微操作</p></li><li><p>按照完整实现一个需求的顺序安排开发任务</p></li></ul><h3 id="额外">额外</h3><ul><li><p>对不了解技术的任务，先要去了解技术，然后再做任务分解</p></li><li><p>通过一次技术 Spike ，学习新技术</p></li><li><p>丢弃掉在 Spike 过程中开发的原型代码</p></li><li><p>分清目标与现状，用目标作为方向，指导现状的改变</p></li><li><p>多个功能并行开发可以考虑使用 Feature Toggle</p></li><li><p>在遗留系统上做改造可以考虑使用 Branch by Abstraction</p></li></ul><h2 id="任务分解-1">任务分解</h2><h3 id="重点-2">重点</h3><ul><li><p>看板</p><ul><li><p>一种来自精益生产的可视化实践</p></li><li><p>按阶段将任务放置其中</p></li><li><p>可以帮助我们发现问题</p></li></ul></li><li><p>持续集成</p><ul><li><p>做好持续集成的关键是，快速反馈</p></li><li><p>本地检查通过之后再提交</p></li><li><p>找到有效的反馈方式，比如：CI 监视器</p></li><li><p>持续集成的纪律</p></li><li><p>只有 CI 服务器处于绿色的状态才能提交代码</p></li><li><p>CI 服务器一旦检查出错，要立即修复</p></li></ul></li><li><p>回顾会议</p><ul><li><p>软件团队复盘的一种实践</p></li><li><p>枚举关注点，选出重点，深入讨论，列出行动项，找到负责人</p></li></ul></li><li><p>5 个为什么</p><ul><li><p>又一个来自丰田的实践</p></li><li><p>沿着一条主线追问多个问题</p></li></ul></li></ul><h3 id="实战指南-2">实战指南</h3><ul><li><p>通过沟通反馈，不断升级自己的编解码能力</p></li><li><p>用业务的语言写代码</p></li><li><p>多面对面沟通，少开会</p></li><li><p>多尝试用可视化的方式进行沟通</p></li><li><p>做好持续集成的关键在于，快速反馈</p></li><li><p>定期复盘，找准问题根因，不断改善</p></li><li><p>多走近用户</p></li><li><p>事情往前做，有问题尽早暴露</p></li><li><p>多输出，让知识更有结构</p></li></ul><h3 id="思路">思路</h3><ul><li><p>用信息论理解沟通反馈</p></li><li><p>写代码的进阶路径编写可以运行的代码</p><ul><li><p>编写符合代码规范的代码</p></li><li><p>编写人可以理解的代码</p></li><li><p>用业务语言写代码</p></li></ul></li><li><p>会议是一种重量级的沟通方式</p><ul><li><p>减少参会人数</p></li><li><p>找人面对面沟通</p></li></ul></li><li><p>聆听用户声音</p><ul><li><p>能做自己用户，做自己的用户</p></li><li><p>能接近用户，接近用户</p></li><li><p>没有用户，创造用户</p></li></ul></li><li><p>Fail Fast</p><ul><li><p>一种编写代码的原则</p></li><li><p>出现问题尽早报错</p></li></ul></li><li><p>金字塔原理</p><ul><li>从中心论点，到分论点，再到论据</li></ul></li></ul><h3 id="额外-1">额外</h3><ul><li><p>持续集成是一条主线，可以将诸多实践贯穿起来</p><ul><li><p>从持续集成到稳定的开发分支，到频繁提交，足够小的任务，到任务分解</p></li><li><p>从持续集成到可检查</p></li><li><p>到测试防护网</p></li><li><p>到测试覆盖率</p></li><li><p>到单元测试</p></li><li><p>到可测试代码</p></li><li><p>到软件设计</p></li></ul></li><li><p>安全性检查，是回顾会议的前提条件</p></li><li><p>在信息获取上，国内外程序员差别不大，开拓视野，改善工作习惯，是国内程序员亟需提高的</p></li></ul><h2 id="自动化">自动化</h2><h3 id="重点-3">重点</h3><ul><li><p>持续交付</p><ul><li><p>将生产部署纳入了开发的考量</p></li><li><p>持续交付的基础设施通常包含持续集成环境、测试环境、预生产环境和生产环境</p></li><li><p>构建流水线保证到了下游的交付物一定是通过上游验证的</p></li><li><p>随着 Docker 的诞生，交付由发布包变成了 Docker 镜像</p></li></ul></li><li><p>DevOps</p><ul><li><p>将开发和运维结合到一起</p></li><li><p>环境配置工具上的进步，让基础设施即代码成了行业共识</p></li></ul></li><li><p>验收测试</p><ul><li><p>站在业务的角度编写</p></li><li><p>BDD 是一种编写验收测试的方式</p></li><li><p>Given…When…Then… 的描述给了一个描述业务的统一方式</p></li><li><p>写好验收测试，需要构建测试模型</p></li></ul></li><li><p>SOLID 原则</p><ul><li><p>设计模式背后的道理</p></li><li><p>单一职责原则（Single responsibility principle，SRP）</p></li><li><p>开放封闭原则（Open–closed principle，OCP）</p></li><li><p>Liskov 替换原则（Liskov substitution principle，LSP）</p></li><li><p>接口隔离原则（Interface segregation principle，ISP）</p></li><li><p>依赖倒置原则（Dependency inversion principle，DIP）</p></li><li><p>用好单一职责原则，前提条件是看待问题颗粒度要小</p></li></ul></li><li><p>DDD</p><ul><li><p>它将思考的起点拉到了业务上</p></li><li><p>DDD 分为战略设计和战术设计</p></li></ul></li><li><p>微服务</p><ul><li><p>做好微服务的前提是划分好限界上下文</p></li><li><p>微服务的第一步，不要划分微服务</p></li></ul></li></ul><h3 id="实战指南-3">实战指南</h3><ul><li><p>请谨慎地将工作自动化</p></li><li><p>将你的工作过程自动化</p></li><li><p>有体系地学习运维知识</p></li><li><p>将部署纳入开发的考量</p></li><li><p>将验收测试自动化</p></li><li><p>把函数写短</p></li><li><p>构建好你的领域模型</p></li><li><p>用简单技术解决问题，直到问题变复杂</p></li><li><p>学习领域驱动设计</p></li></ul><h3 id="改善-1">改善</h3><ul><li><p>程序员的三大美德</p><ul><li><p>懒惰（Laziness）</p></li><li><p>急躁（Impatience）</p></li><li><p>懒惰（hubris）</p></li></ul></li><li><p>小心 NIH 综合症（Not Invented Here Syndrome）</p></li><li><p>写好构建脚本，做好项目自动化</p></li><li><p>参照 Java 知识体系，学习运维知识</p></li><li><p>软件设计最基础的原则是“高内聚、低耦合”</p></li><li><p>分层架构是一种设计上的分解</p></li><li><p>不同业务量的系统本质上不是一个系统</p></li><li><p>采用简单技术解决问题，直到问题变复杂</p></li></ul><h3 id="额外-2">额外</h3><ul><li><p>持续集成的延伸</p><ul><li><p>持续集成完成系统集成</p></li><li><p>持续交付完成可部署上线</p></li><li><p>“持续验证”完成产品想法验证</p></li></ul></li><li><p>AB 测试，用一个软件的多个版本验证想法</p></li><li><p>Selenium 用以完成浏览器的自动化</p></li><li><p>熟练使用快捷键</p></li></ul><p><a href="https://www.douban.com/doulist/113366760/" target="_blank" rel="noopener">推荐书</a></p><p>总结自：<a href="https://time.geekbang.org/column/intro/148" target="_blank" rel="noopener">《10x程序员工作法》</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/24/10x/10x.svg&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="geek" scheme="https://2020.iosdevlog.com/categories/geek/"/>
    
    
      <category term="效率" scheme="https://2020.iosdevlog.com/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="mindmap" scheme="https://2020.iosdevlog.com/tags/mindmap/"/>
    
  </entry>
  
  <entry>
    <title>[译] Python 测试入门</title>
    <link href="https://2020.iosdevlog.com/2020/03/23/test/"/>
    <id>https://2020.iosdevlog.com/2020/03/23/test/</id>
    <published>2020-03-23T02:57:42.000Z</published>
    <updated>2020-03-23T04:14:30.908Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/23/test/Getting-Started-with-Testing-in-Python_Watermarked.png" /></p><a id="more"></a><p>本教程适用于使用Python编写了出色的应用程序但尚未编写任何测试的任何人。</p><p>使用Python进行测试是一个巨大的话题，并且可能会带来很多复杂性，但是并不需要很困难。您可以通过几个简单的步骤开始为您的应用程序创建简单的测试，然后从那里开始进行构建。</p><p>在本教程中，您将学习如何创建基本测试，执行测试以及在用户之前查找错误！您将了解可用于编写和执行测试，检查应用程序性能甚至查找安全问题的工具。</p><h2 id="测试您的代码">测试您的代码</h2><p>有很多方法可以测试您的代码。在本教程中，您将从最基本的步骤中学习技术，并朝着高级方法学习。</p><h3 id="自动化与手动测试">自动化与手动测试</h3><p>好消息是，您可能已经创建了一个未意识到的测试。还记得您第一次运行应用程序并使用它吗？您是否检查了功能并尝试使用它们？这称为<strong>探索性测试</strong>，是手动测试的一种形式。</p><p>探索性测试是无计划的测试形式。在探索性测试中，您只是在探索应用程序。</p><p>要拥有一套完整的手动测试，您要做的就是列出应用程序具有的所有功能，可以接受的不同输入类型以及预期结果。现在，每次更改代码时，都需要遍历该列表中的每个项目并进行检查。</p><p>听起来不那么有趣，不是吗？</p><p>这就是自动测试的用处。自动测试是通过脚本而不是人工执行测试计划（您要测试的应用程序部分，要测试它们的顺序以及预期的响应）的执行。Python已经提供了一组工具和库来帮助您为应用程序创建自动化测试。在本教程中，我们将探索那些工具和库。</p><h3 id="单元测试与集成测试">单元测试与集成测试</h3><p>测试领​​域不乏术语，现在您已经知道自动测试和手动测试之间的区别，现在该更深入了。</p><p>想想如何测试汽车的灯光。您将打开灯（称为<strong>测试步骤</strong>）并离开车外，或请朋友检查灯是否点亮（称为<strong>测试断言</strong>）。测试多个组件称为<strong>集成测试</strong>。</p><p>考虑所有需要正确工作的事物，以使一个简单的任务获得正确的结果。这些组件就像您的应用程序的部分，您编写的所有类，函数和模块一样。</p><p>集成测试的主要挑战是，集成测试无法给出正确的结果。如果无法找出系统的哪一部分发生故障，很难诊断问题。如果灯不亮，则可能是灯泡坏了。电池没电了吗？交流发电机呢？汽车的计算机出故障了吗？</p><p>如果您有一辆豪华的现代汽车，它将在灯泡熄灭时告诉您。它使用<strong>单元测试</strong>的形式进行此操作。</p><p>单元测试是一种较小的测试，它检查单个组件是否以正确的方式运行。单元测试可帮助您隔离应用程序中损坏的内容并更快地对其进行修复。</p><p>您刚刚看过两种测试：</p><ol type="1"><li>集成测试将检查应用程序中的组件是否相互配合。</li><li>单元测试检查应用程序中的一小部分。</li></ol><p>您可以使用Python编写集成测试和单元测试。要为内置功能编写单元测试<code>sum()</code>，您需要<code>sum()</code>对照已知输出检查输出。</p><p>例如，下面是检查<code>sum()</code>数字<code>(1, 2, 3)</code>等于的方法<code>6</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) == <span class="number">6</span>, <span class="string">"Should be 6"</span></span><br></pre></td></tr></table></figure><p>由于值正确，因此不会在REPL上输出任何内容。</p><p>如果来自的结果<code>sum()</code>不正确，则会失败并显示<code>AssertionError</code>和消息<code>"Should be 6"</code>。再次尝试使用错误值的断言语句以查看<code>AssertionError</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">assert</span> sum([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]) == <span class="number">6</span>, <span class="string">"Should be 6"</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AssertionError: Should be <span class="number">6</span></span><br></pre></td></tr></table></figure><p>在REPL中，您看到一个 <code>AssertionError</code> 抛出，因为的结果<code>sum()</code>不匹配<code>6</code>。</p><p>与其在REPL上进行测试，不如将其放入一个名为的新Python文件中<code>test_sum.py</code>并再次执行：<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sum</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) == <span class="number">6</span>, <span class="string">"Should be 6"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    test_sum()</span><br><span class="line">    print(<span class="string">"Everything passed"</span>)</span><br></pre></td></tr></table></figure></p><p>现在，您已经编写了一个<strong>测试用例</strong>，一个断言和一个入口点（命令行）。您现在可以在命令行中执行此操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python test_sum.py</span><br><span class="line">Everything passed</span><br></pre></td></tr></table></figure><p>您可以看到成功的结果<code>Everything passed</code>。</p><p>在Python中，将<code>sum()</code>任何iterable作为其第一个参数。您使用列表进行了测试。现在也用元组测试。<code>test_sum_2.py</code>使用以下代码创建一个名为的新文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sum</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) == <span class="number">6</span>, <span class="string">"Should be 6"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sum_tuple</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> sum((<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)) == <span class="number">6</span>, <span class="string">"Should be 6"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    test_sum()</span><br><span class="line">    test_sum_tuple()</span><br><span class="line">    print(<span class="string">"Everything passed"</span>)</span><br></pre></td></tr></table></figure><p>当执行时<code>test_sum_2.py</code>，脚本将给出错误，因为<code>sum()</code>of <code>(1, 2, 2)</code>是<code>5</code>，不是<code>6</code>。脚本的结果为您提供错误消息，代码行和回溯：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ python test_sum_2.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"test_sum_2.py"</span>, line 9, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> test_sum_tuple()</span><br><span class="line"> File <span class="string">"test_sum_2.py"</span>, line 5, <span class="keyword">in</span> test_sum_tuple</span><br><span class="line"> assert sum((1, 2, 2)) == 6, <span class="string">"Should be 6"</span></span><br><span class="line">AssertionError: Should be 6</span><br></pre></td></tr></table></figure><p>在这里，您可以看到代码中的错误如何在控制台上产生错误，并提供有关错误的位置和预期的结果的一些信息。</p><p>以这种方式编写测试对于一个简单的检查是可以的，但是如果多个测试失败了怎么办？这是测试运行程序的用处。测试运行程序是一个特殊的应用程序，用于运行测试，检查输出并为您提供调试和诊断测试及应用程序的工具。</p><h3 id="选择测试运行工具">选择测试运行工具</h3><p>有许多可用于Python的测试运行器。Python标准库中内置的一个称为<code>unittest</code>。在本教程中，您将使用<code>unittest</code>测试用例和<code>unittest</code>测试运行器。的原理<code>unittest</code>很容易移植到其他框架。三种最受欢迎​​的测试运行工具是：</p><ul><li><code>unittest</code></li><li><code>nose</code> / <code>nose2</code></li><li><code>pytest</code></li></ul><p>为您的需求和经验水平选择最佳的测试运行工具很重要。</p><h4 id="unittest"><code>unittest</code></h4><p><code>unittest</code>从2.1版开始已内置到Python标准库中。您可能会在商业Python应用程序和开源项目中看到它。</p><p><code>unittest</code>包含测试框架和测试运行器。<code>unittest</code>对编写和执行测试有一些重要要求。</p><p><code>unittest</code> 要求：</p><ul><li>您将测试作为方法放入类中</li><li>您在<code>unittest.TestCase</code>类中使用了一系列特殊的断言方法，而不是内置<code>assert</code>语句</li></ul><p>要将先前的示例转换为<code>unittest</code>测试用例，您必须：</p><ol type="1"><li><code>unittest</code>从标准库导入</li><li>创建一个<code>TestSum</code>从<code>TestCase</code>该类继承的类</li><li>通过添加<code>self</code>第一个参数将测试函数转换为方法</li><li>更改断言以<code>self.assertEqual()</code>在<code>TestCase</code>类上使用方法</li><li>将命令行入口点更改为call <code>unittest.main()</code></li></ol><p>按照以下步骤操作<code>test_sum_unittest.py</code>，使用以下代码创建一个新文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSum</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_sum</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEqual(sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]), <span class="number">6</span>, <span class="string">"Should be 6"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_sum_tuple</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEqual(sum((<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)), <span class="number">6</span>, <span class="string">"Should be 6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>如果在命令行上执行此操作，则会看到一个成功（以<code>.</code>表示）和一个失败（以<code>F</code>表示）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ python test_sum_unittest.py</span><br><span class="line">.F</span><br><span class="line">======================================================================</span><br><span class="line">FAIL: test_sum_tuple (__main__.TestSum)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"test_sum_unittest.py"</span>, line 9, <span class="keyword">in</span> test_sum_tuple</span><br><span class="line"> self.assertEqual(sum((1, 2, 2)), 6, <span class="string">"Should be 6"</span>)</span><br><span class="line">AssertionError: Should be 6</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests <span class="keyword">in</span> 0.001s</span><br><span class="line"></span><br><span class="line">FAILED (failures=1)</span><br></pre></td></tr></table></figure><p>您刚刚使用<code>unittest</code>测试运行器执行了两个测试。</p><p><strong>注意：</strong>如果要编写需要同时在Python 2和3中执行的测试用例，请务必小心。在python 2.7及以下版本中，<code>unittest</code>称为<code>unittest2</code>。如果仅从中导入<code>unittest</code>，则将在Python 2和3之间获得具有不同功能的不同版本。</p><p>有关更多信息<code>unittest</code>，您可以浏览单元测试<a href="https://docs.python.org/3/library/unittest.html" target="_blank" rel="noopener">文档</a>。</p><h4 id="nose"><code>nose</code></h4><p>随着时间的流逝，您可能会发现，随着为应用程序编写数百甚至数千个测试，变得越来越难以理解和使用的输出<code>unittest</code>。</p><p><code>nose</code>与使用该<code>unittest</code>框架编写的任何测试兼容，并且可以用作<code>unittest</code>测试运行程序的直接替代品。<code>nose</code>作为开源应用程序的开发落后了，<code>nose2</code>因此创建了一个名为fork的分支。如果您是从头开始的，建议您使用<code>nose2</code>而不是<code>nose</code>。</p><p>要开始使用<code>nose2</code>，请<code>nose2</code>从PyPI 安装并在命令行上执行。<code>nose2</code>将尝试在当前目录中发现所有命名的测试脚本<code>test*.py</code>和继承的测试用例<code>unittest.TestCase</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ pip install nose2</span><br><span class="line">$ python -m nose2</span><br><span class="line">.F</span><br><span class="line">======================================================================</span><br><span class="line">FAIL: test_sum_tuple (__main__.TestSum)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"test_sum_unittest.py"</span>, line 9, <span class="keyword">in</span> test_sum_tuple</span><br><span class="line"> self.assertEqual(sum((1, 2, 2)), 6, <span class="string">"Should be 6"</span>)</span><br><span class="line">AssertionError: Should be 6</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests <span class="keyword">in</span> 0.001s</span><br><span class="line"></span><br><span class="line">FAILED (failures=1)</span><br></pre></td></tr></table></figure><p>您刚刚执行了<code>test_sum_unittest.py</code>从<code>nose2</code>测试运行程序创建的测试。<code>nose2</code>提供了许多命令行标志来过滤您执行的测试。有关更多信息，您可以浏览<a href="https://nose2.readthedocs.io/" target="_blank" rel="noopener">Nose 2文档</a>。</p><h4 id="pytest"><code>pytest</code></h4><p><code>pytest</code>支持<code>unittest</code>测试用例的执行。<code>pytest</code>编写<code>pytest</code>测试用例是其真正的优势。<code>pytest</code>测试用例是Python文件中名称开头的一系列函数<code>test_</code>。</p><p><code>pytest</code> 还有其他一些很棒的功能：</p><ul><li>支持内置<code>assert</code>语句，而不是使用特殊<code>self.assert*()</code>方法</li><li>支持筛选测试用例</li><li>能够从上次失败的测试中重新运行</li><li>包含数百个插件的生态系统，以扩展功能</li></ul><p>编写<code>TestSum</code>测试用例示例<code>pytest</code>将如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sum</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) == <span class="number">6</span>, <span class="string">"Should be 6"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_sum_tuple</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> sum((<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)) == <span class="number">6</span>, <span class="string">"Should be 6"</span></span><br></pre></td></tr></table></figure><p>您已经删除了<code>TestCase</code>，对类的任何使用以及命令行入口点。</p><p>可以在<a href="https://docs.pytest.org/en/latest/" target="_blank" rel="noopener">Pytest文档网站上</a>找到更多信息。</p><h2 id="编写您的第一个测试">编写您的第一个测试</h2><p>让我们将到目前为止所学的知识汇总起来，而不是测试内置<code>sum()</code>功能，而是测试相同需求的简单实现。</p><p>创建一个新的项目文件夹，并在其中创建一个名为的新文件夹<code>my_sum</code>。在内部<code>my_sum</code>，创建一个名为的空文件<code>__init__.py</code>。创建<code>__init__.py</code>文件意味着<code>my_sum</code>可以从父目录将文件夹作为模块导入。</p><p>您的项目文件夹应如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">│</span><br><span class="line">└── my_sum&#x2F;</span><br><span class="line">    └── __init__.py</span><br></pre></td></tr></table></figure><p>打开<code>my_sum/__init__.py</code>并创建一个名为的新函数<code>sum()</code>，该函数接受一个可迭代的（列表，元组或集合）并将这些值加在一起：<br /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(arg)</span>:</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> arg:</span><br><span class="line">        total += val</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure></p><p>此代码示例创建一个名为的变量<code>total</code>，遍历其中的所有值<code>arg</code>，并将它们添加到中<code>total</code>。一旦迭代结束，它将返回结果。</p><h3 id="在哪里编写测试">在哪里编写测试</h3><p>要开始编写测试，您只需创建一个名为的文件<code>test.py</code>，其中将包含您的第一个测试用例。由于该文件将需要能够导入您的应用程序以进行测试，因此您希望将其放置<code>test.py</code>在package文件夹上方，因此目录树将如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">project/</span><br><span class="line">│</span><br><span class="line">├── my_sum/</span><br><span class="line">│   └── __init__.py</span><br><span class="line">|</span><br><span class="line">└── test.py</span><br></pre></td></tr></table></figure><p>您会发现，随着添加越来越多的测试，单个文件将变得混乱并且难以维护，因此您可以创建一个名为的文件夹<code>tests/</code>并将测试拆分为多个文件。按照惯例，请确保每个文件均以<code>test_</code> 开头，因此所有测试运行程序都将假定Python文件包含要执行的测试。一些非常大的项目根据测试的目的或用途将测试划分为更多的子目录。</p><p><strong>注意：</strong>如果您的应用程序是单个脚本怎么办？</p><p>您可以使用内置函数 <code>__import__()</code> 导入脚本的任何属性，例如类，函数和变量。替换 <code>from my_sum import sum</code>，您可以编写以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target = __import__(<span class="string">"my_sum.py"</span>)</span><br><span class="line">sum = target.sum</span><br></pre></td></tr></table></figure><p>使用 <code>__import__()</code> 的好处是您不必将项目文件夹变成一个包，您可以指定文件名。如果您的文件名与任何标准库包冲突，这也很有用。例如，<code>math.py</code>将与<code>math</code>模块碰撞。</p><h3 id="如何构造一个简单的测试">如何构造一个简单的测试</h3><p>在开始编写测试之前，您需要首先做出几个决定：</p><ol type="1"><li>您要测试什么？</li><li>您正在编写单元测试还是集成测试？</li></ol><p>然后，测试的结构应大致遵循以下工作流程：</p><ol type="1"><li>创建您的输入</li><li>执行被测试的代码，捕获输出</li><li>将输出与预期结果进行比较</li></ol><p>对于此应用程序，您正在测试<code>sum()</code>。<code>sum()</code>您可以检查许多行为，例如：</p><ul><li>可以对整数（整数）列表求和吗？</li><li>可以对一个元组或集合求和吗？</li><li>可以汇总一个浮动列表吗？</li><li>为它提供错误的值（例如单个整数或字符串）时会发生什么？</li><li>如果其中一个值为负，会发生什么？</li></ul><p>最简单的测试是整数列表。<code>test.py</code>使用以下Python代码创建文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> my_sum <span class="keyword">import</span> sum</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSum</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_list_int</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Test that it can sum a list of integers</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">        result = sum(data)</span><br><span class="line">        self.assertEqual(result, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>此代码示例：</p><ol type="1"><li><code>sum()</code>从<code>my_sum</code>您创建的包中导入</li><li>定义一个名为的新测试用例类<code>TestSum</code>，该类继承自<code>unittest.TestCase</code></li><li>定义一种测试方法，<code>.test_list_int()</code>以测试整数列表。该方法<code>.test_list_int()</code>将：<ul><li><code>data</code>用数字列表声明一个变量<code>(1, 2, 3)</code></li><li>将的结果分配<code>my_sum.sum(data)</code>给<code>result</code>变量</li><li><code>unittest.TestCase</code> 类里的 <code>.assertEqual()</code> 方法断言结果值等于</li></ul></li><li>定义一个命令行入口点，该入口点运行<code>unittest</code>测试运行器<code>.main()</code></li></ol><p>如果不确定定义什么<code>self</code>或如何<code>.assertEqual()</code>定义，可以使用<a href="https://realpython.com/python3-object-oriented-programming/" target="_blank" rel="noopener">Python 3面向对象编程复习面向对象的编程</a>。</p><h3 id="如何写断言">如何写断言</h3><p>编写测试的最后一步是根据已知响应验证输出。这称为<strong>断言</strong>。关于如何编写断言，有一些通用的最佳实践：</p><ul><li>确保测试可重复，并多次运行测试以确保每次给出的结果相同</li><li>尝试并声明与输入数据有关的结果，例如检查<code>sum()</code>示例中结果是否为实际值的总和</li></ul><p><code>unittest</code>附带了许多方法来声明变量的值，类型和存在性。以下是一些最常用的方法：</p><table><thead><tr class="header"><th>方法</th><th>相当于</th></tr></thead><tbody><tr class="odd"><td><code>.assertEqual(a, b)</code></td><td><code>a == b</code></td></tr><tr class="even"><td><code>.assertTrue(x)</code></td><td><code>bool(x) is True</code></td></tr><tr class="odd"><td><code>.assertFalse(x)</code></td><td><code>bool(x) is False</code></td></tr><tr class="even"><td><code>.assertIs(a, b)</code></td><td><code>a is b</code></td></tr><tr class="odd"><td><code>.assertIsNone(x)</code></td><td><code>x is None</code></td></tr><tr class="even"><td><code>.assertIn(a, b)</code></td><td><code>a in b</code></td></tr><tr class="odd"><td><code>.assertIsInstance(a, b)</code></td><td><code>isinstance(a, b)</code></td></tr></tbody></table><p><code>.assertIs()</code>，<code>.assertIsNone()</code>，<code>.assertIn()</code>，和<code>.assertIsInstance()</code>所有有相反的方法，命名<code>.assertIsNot()</code>，等等。</p><h3 id="副作用">副作用</h3><p>在编写测试时，通常不像查看函数的返回值那么简单。通常，执行一段代码会更改环境中的其他内容，例如类的属性，文件系统上的文件或数据库中的值。这些被称为<strong>副作用</strong>，是测试的重要组成部分。在将其包含在断言列表之前，请确定是否正在测试副作用。</p><p>如果发现要测试的代码单元有很多副作用，则可能违反了“ <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noopener">单一职责原则”</a>。违反单一责任原则意味着代码段执行了太多的工作，最好进行重构。遵循“单一职责原则”是一种设计代码的好方法，该代码很容易为最终的可靠应用编写可重复且简单的单元测试。</p><h2 id="执行您的第一个测试">执行您的第一个测试</h2><p>现在您已经创建了第一个测试，您想要执行它。当然，您知道它将通过，但是在创建更复杂的测试之前，应检查是否可以成功执行测试。</p><h3 id="执行测试运行器">执行测试运行器</h3><p>执行测试代码，检查断言并在控制台中提供测试结果的Python应用程序称为<strong>测试运行器</strong>。</p><p>在的底部<code>test.py</code>，添加了以下代码片段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>这是命令行入口点。这意味着，如果您通过<code>python test.py</code>在命令行上运行单独执行脚本，它将调用<code>unittest.main()</code>。这将通过发现此文件中继承自的所有类来执行测试运行程序<code>unittest.TestCase</code>。</p><p>这是执行<code>unittest</code>测试运行程序的多种方法之一。当您有一个名为的测试文件时<code>test.py</code>，调用<code>python test.py</code>是入门的好方法。</p><p>另一种方法是使用<code>unittest</code>命令行。尝试这个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m unittest <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>这将<code>test</code>通过命令行执行相同的测试模块（称为）。</p><p>您可以提供其他选项来更改输出。其中之一是<code>-v</code>冗长的。接下来尝试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python -m unittest -v <span class="built_in">test</span></span><br><span class="line">test_list_int (test.TestSum) ... ok</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 tests <span class="keyword">in</span> 0.000s</span><br></pre></td></tr></table></figure><p>这在内部执行了一个测试<code>test.py</code>，并将结果打印到控制台。详细模式列出了它首先执行的测试的名称以及每个测试的结果。</p><p>除了提供包含测试的模块的名称之外，您还可以使用以下方法请求自动发现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m unittest discover</span><br></pre></td></tr></table></figure><p>这将在当前目录中搜索任何已命名的文件，<code>test*.py</code>并尝试对其进行测试。</p><p>一旦有了多个测试文件，只要遵循<code>test*.py</code>命名模式，就可以提供目录名称，而不必使用<code>-s</code>标志和目录名称：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m unittest discover -s tests</span><br></pre></td></tr></table></figure><p><code>unittest</code> 将在一个测试计划中运行所有测试，并为您提供结果。</p><p>最后，如果您的源代码不在目录根目录中，而是包含在子目录中，例如在名为的文件夹中<code>src/</code>，则可以告诉<code>unittest</code>执行测试的位置，以便可以使用<code>-t</code>标志正确导入模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m unittest discover -s tests -t src</span><br></pre></td></tr></table></figure><p><code>unittest</code>将更改为<code>src/</code>目录，扫描目录中的所有<code>test*.py</code>文件<code>tests</code>，然后执行它们。</p><h3 id="了解测试输出">了解测试输出</h3><p>那是一个非常简单的示例，一切都通过了，因此现在您将尝试失败的测试并解释输出。</p><p><code>sum()</code> 应该能够接受其他数字类型列表，例如小数。</p><p>在<code>test.py</code>文件顶部，添加导入语句以<code>Fraction</code>从<code>fractions</code>标准库中的模块导入类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fractions <span class="keyword">import</span> Fraction</span><br></pre></td></tr></table></figure><p>现在添加一个带有断言的测试，该断言期望值不正确，在这种情况下，期望1 / 4、1 / 4和2/5之和为1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> my_sum <span class="keyword">import</span> sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSum</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_list_int</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Test that it can sum a list of integers</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">        result = sum(data)</span><br><span class="line">        self.assertEqual(result, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_list_fraction</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Test that it can sum a list of fractions</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        data = [Fraction(<span class="number">1</span>, <span class="number">4</span>), Fraction(<span class="number">1</span>, <span class="number">4</span>), Fraction(<span class="number">2</span>, <span class="number">5</span>)]</span><br><span class="line">        result = sum(data)</span><br><span class="line">        self.assertEqual(result, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>如果使用再次执行测试<code>python -m unittest test</code>，则应该看到以下输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ python -m unittest <span class="built_in">test</span></span><br><span class="line">F.</span><br><span class="line">======================================================================</span><br><span class="line">FAIL: test_list_fraction (test.TestSum)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"test.py"</span>, line 21, <span class="keyword">in</span> test_list_fraction</span><br><span class="line"> self.assertEqual(result, 1)</span><br><span class="line">AssertionError: Fraction(9, 10) != 1</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests <span class="keyword">in</span> 0.001s</span><br><span class="line"></span><br><span class="line">FAILED (failures=1)</span><br></pre></td></tr></table></figure><p>在输出中，您将看到以下信息：</p><ol type="1"><li><p>第一行显示了所有测试的执行结果，其中一个失败（<code>F</code>）和一个通过（<code>.</code>）。</p></li><li><p>该<code>FAIL</code>条目显示有关失败测试的一些详细信息：</p><ul><li>测试方法名称（<code>test_list_fraction</code>）</li><li>测试模块（<code>test</code>）和测试用例（<code>TestSum</code>）</li><li>追溯到失败的行</li><li>带有预期结果（<code>1</code>）和实际结果（<code>Fraction(9, 10)</code>）的断言的详细信息</li></ul></li></ol><p>请记住，可以通过将<code>-v</code>标志添加到<code>python -m unittest</code>命令来向测试输出添加额外的信息。</p><h3 id="从pycharm运行测试">从PyCharm运行测试</h3><p>如果您使用的是PyCharm IDE，则可以运行<code>unittest</code>或<code>pytest</code>按照以下步骤操作：</p><ol type="1"><li>在项目工具窗口中，选择<code>tests</code>目录。</li><li>在上下文菜单上，选择的运行命令<code>unittest</code>。例如，选择 <em>Run ‘Unittests in my Tests…’.</em>。</li></ol><p>这将<code>unittest</code>在测试窗口中执行，并在PyCharm中为您提供结果：</p><p><img src="https://2020.iosdevlog.com/2020/03/23/test/py_run_test_folder.png" /></p><p>有关更多信息，请访问<a href="https://www.jetbrains.com/help/pycharm/performing-tests.html" target="_blank" rel="noopener">PyCharm网站</a>。</p><h3 id="从visual-studio代码运行测试">从Visual Studio代码运行测试</h3><p>如果你正在使用微软的Visual Studio IDE的代码，支持<code>unittest</code>，<code>nose</code>和<code>pytest</code>执行内置于Python的插件。</p><p>如果安装了Python插件，则可以通过使用 <code>Ctrl+ Shift+ P</code> 打开命令面板并键入 “Python测试” 来设置测试的配置。您将看到一系列选项：</p><p><img src="https://2020.iosdevlog.com/2020/03/23/test/vscode-test-capture.png" /></p><p>选择<em>Debug All Unit Tests</em>，然后VSCode会提示您配置测试框架。单击齿轮以选择测试运行器（<code>unittest</code>）和主目录（<code>.</code>）。</p><p>设置完成后，您将在窗口底部看到测试状态，并且可以通过单击以下图标快速访问测试日志并再次运行测试：</p><p><img src="https://2020.iosdevlog.com/2020/03/23/test/vscode-test-results.png" /></p><p>这表明测试正在执行，但是其中一些失败。</p><h2 id="测试django和flask等web框架">测试Django和Flask等Web框架</h2><p>如果您使用Django或Flask等流行的框架之一为Web应用程序编写测试，则编写和运行测试的方式会有一些重要差异。</p><h3 id="为什么它们与其他应用程序不同">为什么它们与其他应用程序不同</h3><p>考虑一下您将在Web应用程序中测试的所有代码。路线，视图和模型都需要大量导入，并且需要有关所使用框架的知识。</p><p>这类似于本教程开始时的汽车测试：您必须启动汽车的计算机，然后才能运行简单的测试，例如检查车灯。</p><p>Django和Flask通过提供基于的测试框架，使您轻松实现了这一目标<code>unittest</code>。您可以按照学习的方式继续编写测试，但执行方式略有不同。</p><h3 id="如何使用django-test-runner">如何使用Django Test Runner</h3><p>Django <code>startapp</code>模板将<code>tests.py</code>在您的应用程序目录中创建一个文件。如果还没有，则可以使用以下内容创建它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestCase</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="comment"># Your test methods</span></span><br></pre></td></tr></table></figure><p>到目前为止，这些示例的主要区别在于您需要继承<code>django.test.TestCase</code>而不是<code>unittest.TestCase</code>。这些类具有相同的API，但是Django <code>TestCase</code>类设置了所有必需的状态以进行测试。</p><p>要执行测试套件<code>unittest</code>，请使用<code>manage.py test</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>如果您需要多个测试文件，请<code>tests.py</code>用文件夹替换，在文件夹中<code>tests</code>插入一个空文件<code>__init__.py</code>，然后创建您的<code>test_*.py</code>文件。Django将发现并执行这些。</p><p>有关更多信息，请访问<a href="https://docs.djangoproject.com/en/2.1/topics/testing/overview/" target="_blank" rel="noopener">Django文档网站</a>。</p><h3 id="如何使用unittest和-flask">如何使用<code>unittest</code>和 <code>Flask</code></h3><p>Flask 要求导入该应用，然后将其设置为测试模式。您可以实例化一个测试客户端，并使用该测试客户端向应用程序中的任何路由发出请求。</p><p>所有测试客户端实例化都是通过<code>setUp</code>测试用例的方法完成的。在以下示例中，<code>my_app</code>是应用程序的名称。如果您不知道该怎么做，请不要担心<code>setUp</code>。您将在“ <a href="https://realpython.com/python-testing/#more-advanced-testing-scenarios" target="_blank" rel="noopener">更高级的测试方案”</a>部分中了解到这一点。</p><p>测试文件中的代码应如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> my_app</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTestCase</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        my_app.app.testing = <span class="literal">True</span></span><br><span class="line">        self.app = my_app.app.test_client()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home</span><span class="params">(self)</span>:</span></span><br><span class="line">        result = self.app.get(<span class="string">'/'</span>)</span><br><span class="line">        <span class="comment"># Make your assertions</span></span><br></pre></td></tr></table></figure><p>然后，您可以使用<code>python -m unittest discover</code>命令执行测试用例。</p><p>有关更多信息，请参见<a href="http://flask.pocoo.org/docs/0.12/testing/" target="_blank" rel="noopener">Flask文档网站</a>。</p><h2 id="更多高级测试方案">更多高级测试方案</h2><p>在开始为应用程序创建测试之前，请记住每个测试的三个基本步骤：</p><ol type="1"><li>创建您的输入</li><li>执行代码，捕获输出</li><li>将输出与预期结果进行比较</li></ol><p>这并不总是像为字符串或数字之类的输入创建静态值那样容易。有时，您的应用程序将需要一个类或上下文的实例。那你怎么办呢？</p><p>您创建为输入的数据称为<strong>夹具</strong>。创建固定装置并重复使用它们是常见的做法。</p><p>如果您正在运行相同的测试，并且每次都传递不同的值并期望得到相同的结果，则称为<strong>参数化</strong>。</p><h3 id="处理预期的故障">处理预期的故障</h3><p>之前，当您列出要测试的方案列表时<code>sum()</code>，出现了一个问题：如果为它提供错误的值（例如单个整数或字符串），会发生什么？</p><p>在这种情况下，您可能会<code>sum()</code>引发错误。当它确实引发错误时，将导致测试失败。</p><p>有一种特殊的方法可以处理预期的错误。您可以<code>.assertRaises()</code>用作上下文管理器，然后在<code>with</code>块内执行测试步骤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> my_sum <span class="keyword">import</span> sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSum</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_list_int</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Test that it can sum a list of integers</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">        result = sum(data)</span><br><span class="line">        self.assertEqual(result, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_list_fraction</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Test that it can sum a list of fractions</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        data = [Fraction(<span class="number">1</span>, <span class="number">4</span>), Fraction(<span class="number">1</span>, <span class="number">4</span>), Fraction(<span class="number">2</span>, <span class="number">5</span>)]</span><br><span class="line">        result = sum(data)</span><br><span class="line">        self.assertEqual(result, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_bad_type</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = <span class="string">"banana"</span></span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(TypeError):</span><br><span class="line">            result = sum(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>现在，只有<code>sum(data)</code>提高时，此测试用例才能通过<code>TypeError</code>。您可以<code>TypeError</code>用任何选择的异常类型替换。</p><h3 id="隔离应用程序中的行为">隔离应用程序中的行为</h3><p>在本教程的前面，您了解了副作用。副作用使单元测试更加困难，因为每次运行测试时，它可能会给出不同的结果，甚至更糟的是，一个测试可能会影响应用程序的状态并导致另一个测试失败！</p><p><img src="https://2020.iosdevlog.com/2020/03/23/test/test.gif" /></p><p>您可以使用一些简单的技术来测试应用程序的某些部分，这些部分有很多副作用：</p><ul><li>重构代码以遵循单一职责原则</li><li>模拟出任何方法或函数调用以消除副作用</li><li>在此应用程序中使用集成测试代替单元测试</li></ul><p>如果您不熟悉模拟，请参阅<a href="https://realpython.com/python-cli-testing/#mocks" target="_blank" rel="noopener">Python CLI Testing</a>以获取一些出色的示例。</p><h3 id="编写集成测试">编写集成测试</h3><p>到目前为止，您一直在主要学习有关单元测试的知识。单元测试是构建可预测且稳定的代码的好方法。但是，归根结底，您的应用程序需要在启动时才能运行！</p><p>集成测试是对应用程序的多个组件的测试，以检查它们是否可以协同工作。集成测试可能需要通过以下方式像应用程序的使用者或用户一样行动：</p><ul><li>调用HTTP REST API</li><li>调用Python API</li><li>调用网络服务</li><li>运行命令行</li></ul><p>可以按照输入，执行和断言模式，以与单元测试相同的方式编写所有这些类型的集成测试。最大的不同是集成测试一次检查了更多的组件，因此比单元测试有更多的副作用。此外，集成测试将需要更多的固定装置，例如数据库，网络套接字或配置文件。</p><p>这就是为什么最好将单元测试和集成测试分开的原因。创建集成所需的固定装置（例如测试数据库）和测试用例本身通常比单元测试花费更多的时间，因此您可能只想在推送到生产环境之前运行集成测试，而不是每次提交都运行一次。</p><p>分离单元测试和集成测试的简单方法是将它们放在不同的文件夹中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">project/</span><br><span class="line">│</span><br><span class="line">├── my_app/</span><br><span class="line">│   └── __init__.py</span><br><span class="line">│</span><br><span class="line">└── tests/</span><br><span class="line">    |</span><br><span class="line">    ├── unit/</span><br><span class="line">    |   ├── __init__.py</span><br><span class="line">    |   └── test_sum.py</span><br><span class="line">    |</span><br><span class="line">    └── integration/</span><br><span class="line">        ├── __init__.py</span><br><span class="line">        └── test_integration.py</span><br></pre></td></tr></table></figure><p>有很多方法可以仅执行一组选定的测试。指定源目录标志<code>-s</code>可以<code>unittest discover</code>与包含测试的路径一起添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python -m unittest discover -s tests/integration</span><br></pre></td></tr></table></figure><p><code>unittest</code>将为您提供<code>tests/integration</code>目录中所有测试的结果。</p><h3 id="测试数据驱动的应用程序">测试数据驱动的应用程序</h3><p>许多集成测试将要求后端数据（如数据库）必须具有某些值。例如，您可能需要进行一项测试，以检查应用程序是否正确显示了数据库中的100个以上客户，或者即使产品名称以日语显示，订单页面也可以正常工作。</p><p>这些类型的集成测试将取决于不同的测试装置，以确保它们可重复且可预测。</p><p>使用的一种好方法是将测试数据存储在集成测试文件夹中的一个文件夹中，该文件夹称为<code>fixtures</code>，指示其中包含测试数据。然后，在测试中，您可以加载数据并运行测试。</p><p>如果数据由JSON文件组成，则下面是该结构的示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">project/</span><br><span class="line">│</span><br><span class="line">├── my_app/</span><br><span class="line">│   └── __init__.py</span><br><span class="line">│</span><br><span class="line">└── tests/</span><br><span class="line">    |</span><br><span class="line">    └── unit/</span><br><span class="line">    |   ├── __init__.py</span><br><span class="line">    |   └── test_sum.py</span><br><span class="line">    |</span><br><span class="line">    └── integration/</span><br><span class="line">        |</span><br><span class="line">        ├── fixtures/</span><br><span class="line">        |   ├── test_basic.json</span><br><span class="line">        |   └── test_complex.json</span><br><span class="line">        |</span><br><span class="line">        ├── __init__.py</span><br><span class="line">        └── test_integration.py</span><br></pre></td></tr></table></figure><p>在您的测试用例中，您可以使用该<code>.setUp()</code>方法从已知路径中的夹具文件中加载测试数据，并针对该测试数据执行许多测试。请记住，您可以在一个Python文件中包含多个测试用例，并且<code>unittest</code>发现将同时执行。每个测试数据集可以有一个测试用例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestBasic</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Load test data</span></span><br><span class="line">        self.app = App(database=<span class="string">'fixtures/test_basic.json'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_customer_count</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEqual(len(self.app.customers), <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_existence_of_customer</span><span class="params">(self)</span>:</span></span><br><span class="line">        customer = self.app.get_customer(id=<span class="number">10</span>)</span><br><span class="line">        self.assertEqual(customer.name, <span class="string">"Org XYZ"</span>)</span><br><span class="line">        self.assertEqual(customer.address, <span class="string">"10 Red Road, Reading"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestComplexData</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># load test data</span></span><br><span class="line">        self.app = App(database=<span class="string">'fixtures/test_complex.json'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_customer_count</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEqual(len(self.app.customers), <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_existence_of_customer</span><span class="params">(self)</span>:</span></span><br><span class="line">        customer = self.app.get_customer(id=<span class="number">9999</span>)</span><br><span class="line">        self.assertEqual(customer.name, <span class="string">u"バナナ"</span>)</span><br><span class="line">        self.assertEqual(customer.address, <span class="string">"10 Red Road, Akihabara, Tokyo"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>如果您的应用程序依赖于远程位置（例如远程API）的数据，则需要确保测试可重复。由于API离线或存在连接问题而导致测试失败，可能会减慢开发速度。在这些类型的情况下，最佳实践是在本地存储远程设备，以便可以调用它们并将其发送到应用程序。</p><p>该<code>requests</code>库有一个名为的免费软件包<code>responses</code>，使您可以创建响应固定装置并将其保存在测试文件夹中。<a href="https://github.com/getsentry/responses" target="_blank" rel="noopener">在其GitHub Page上</a>找到更多<a href="https://github.com/getsentry/responses" target="_blank" rel="noopener">信息</a>。</p><h2 id="在多种环境中测试">在多种环境中测试</h2><p>到目前为止，您已经在使用带有一组特定依赖项的虚拟环境针对Python的单个版本进行了测试。您可能要检查您的应用程序是否可以在多个版本的Python或程序包的多个版本上运行。Tox是在多个环境中自动化测试的应用程序。</p><h3 id="安装毒物">安装毒物</h3><p>Tox可以通过以下方式在PyPI上安装<code>pip</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install tox</span><br></pre></td></tr></table></figure><p>现在您已经安装了Tox，需要对其进行配置。</p><h3 id="为您的依赖配置tox">为您的依赖配置Tox</h3><p>Tox通过项目目录中的配置文件进行配置。Tox配置文件包含以下内容：</p><ul><li>为了执行测试而运行的命令</li><li>执行之前需要的任何其他软件包</li><li>要测试的目标Python版本</li></ul><p>您无需学习Tox配置语法，而可以通过运行quickstart应用程序来抢先一步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tox-quickstart</span><br></pre></td></tr></table></figure><p>Tox配置工具将询问您这些问题，并在中创建类似于以下内容的文件<code>tox.ini</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tox]</span></span><br><span class="line"><span class="attr">envlist</span> = py27, py36</span><br><span class="line"></span><br><span class="line"><span class="section">[testenv]</span></span><br><span class="line"><span class="attr">deps</span> =</span><br><span class="line"></span><br><span class="line"><span class="attr">commands</span> =</span><br><span class="line"> python -m unittest discover</span><br></pre></td></tr></table></figure><p>在运行Tox之前，它要求<code>setup.py</code>您的应用程序文件夹中包含一个文件，其中包含安装软件包的步骤。如果您还没有，则可以在继续之前按照<a href="https://packaging.python.org/tutorials/packaging-projects/#setup-py" target="_blank" rel="noopener">本指南</a>操作如何创建<code>setup.py</code>。</p><p>或者，如果您的项目不适合在PyPI上分发，则可以通过<code>tox.ini</code>在<code>[tox]</code>标题下的文件中添加以下行来跳过此要求：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[tox]</span></span><br><span class="line"><span class="attr">envlist</span> = py27, py36</span><br><span class="line"><span class="attr">skipsdist</span>=<span class="literal">True</span></span><br></pre></td></tr></table></figure><p>如果您不创建<code>setup.py</code>，并且您的应用程序具有PyPI的某些依赖项，则需要在本<code>[testenv]</code>节下的多行中指定这些依赖项。例如，Django需要具备以下条件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[testenv]</span></span><br><span class="line"><span class="attr">deps</span> = django</span><br></pre></td></tr></table></figure><p>一旦完成该阶段，就可以运行测试了。</p><p>现在，您可以执行Tox，它将创建两个虚拟环境：一个用于Python 2.7，一个用于Python 3.6。Tox目录称为<code>.tox/</code>。在<code>.tox/</code>目录内，Tox将<code>python -m unittest discover</code>针对每个虚拟环境执行。</p><p>您可以通过在命令行上调用Tox来运行此过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tox</span><br></pre></td></tr></table></figure><p>Tox将输出针对每种环境的测试结果。Tox第一次运行时，会花一点时间来创建虚拟环境，但是一旦运行起来，第二次执行就会快很多。</p><h3 id="执行毒药">执行毒药</h3><p>Tox的输出非常简单。它为每个版本创建一个环境，安装您的依赖项，然后运行测试命令。</p><p>还有一些其他值得记住的命令行选项。</p><p>仅运行单个环境，例如Python 3.6：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tox -e py36</span><br></pre></td></tr></table></figure><p>重新创建虚拟环境，以防您的依存关系已更改或<a href="https://docs.python.org/3/install/#how-installation-works" target="_blank" rel="noopener">站点包</a>损坏：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tox -r</span><br></pre></td></tr></table></figure><p>使用更少的详细输出运行Tox：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tox -q</span><br></pre></td></tr></table></figure><p>使用更详细的输出运行Tox：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tox -v</span><br></pre></td></tr></table></figure><p>可以在<a href="https://tox.readthedocs.io/en/latest/" target="_blank" rel="noopener">Tox文档网站上</a>找到有关Tox的更多信息。</p><h2 id="自动化执行测试">自动化执行测试</h2><p>到目前为止，您已经通过运行命令手动执行测试。有一些工具可以在您进行更改并将其提交到诸如Git之类的源代码控制存储库时自动执行测试。自动化测试工具通常被称为CI / CD工具，代表“持续集成/持续部署”。他们可以运行您的测试，编译和发布任何应用程序，甚至将它们部署到生产环境中。</p><p><a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a>是许多可用的CI（连续集成）服务之一。</p><p>Travis CI与Python配合良好，现在您已经创建了所有这些测试，您可以在云中自动执行它们！Travis CI对于GitHub和GitLab上的任何开源项目都是免费的，并且对私人项目收费。</p><p>首先，请登录网站并使用Gi​​tHub或GitLab凭据进行身份验证。然后创建一个<code>.travis.yml</code>具有以下内容的文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">python:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"2.7"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"3.7"</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">-r</span> <span class="string">requirements.txt</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python</span> <span class="string">-m</span> <span class="string">unittest</span> <span class="string">discover</span></span><br></pre></td></tr></table></figure><p>此配置指示Travis CI：</p><ol type="1"><li>针对Python 2.7和3.7进行测试（您可以使用任意版本替换这些版本。）</li><li>安装列出的所有软件包<code>requirements.txt</code>（如果没有任何依赖性，则应删除此部分。）</li><li>运行<code>python -m unittest discover</code>以运行测试</li></ol><p>提交并推送此文件后，每次您推送到远程Git存储库时，Travis CI都会运行这些命令。您可以在他们的网站上查看结果。</p><h2 id="下一步是什么">下一步是什么</h2><p>既然您已经了解了如何创建测试，执行测试，将其包含在项目中，甚至自动执行它们，随着测试库的增长，您可能会发现一些方便的高级技术。</p><h3 id="将linters引入您的应用程序">将Linters引入您的应用程序</h3><p>Tox和Travis CI具有测试命令的配置。在本教程中一直使用的测试命令是<code>python -m unittest discover</code>。</p><p>您可以在所有这些工具中提供一个或多个命令，并且该选项使您可以添加更多工具来提高应用程序的质量。</p><p>一种这样的应用程序称为短绒。短毛猫将查看您的代码并对其进行注释。它可以为您提供有关您犯的错误，纠正尾随空格的提示，甚至可以预测您可能引入的错误。</p><p>有关短毛绒的更多信息，请阅读<a href="https://realpython.com/python-code-quality/" target="_blank" rel="noopener">Python代码质量教程</a>。</p><h4 id="被动掉毛-flake8">被动掉毛 <code>flake8</code></h4><p>一个流行的linter可以评论与<a href="https://www.youtube.com/watch?v=Hwckt4J96dI" target="_blank" rel="noopener">PEP 8</a>规范有关的代码样式<code>flake8</code>。</p><p>您可以<code>flake8</code>使用安装<code>pip</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install flake8</span><br></pre></td></tr></table></figure><p>然后，您可以<code>flake8</code>在单个文件，文件夹或模式上运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ flake8 test.py</span><br><span class="line">test.py:6:1: E302 expected 2 blank lines, found 1</span><br><span class="line">test.py:23:1: E305 expected 2 blank lines after class or <span class="keyword">function</span> definition, found 1</span><br><span class="line">test.py:24:20: W292 no newline at end of file</span><br></pre></td></tr></table></figure><p>您将看到<code>flake8</code>已找到的代码的错误和警告的列表。</p><p><code>flake8</code> 可在命令行中或项目中的配置文件中进行配置。如果您想忽略某些规则（<code>E305</code>如上所示），则可以在配置中进行设置。<code>flake8</code>将检查<code>.flake8</code>项目文件夹中的文件或<code>setup.cfg</code>文件。如果您决定使用Tox，则可以将<code>flake8</code>配置部分放在里面<code>tox.ini</code>。</p><p>本示例忽略<code>.git</code>和<code>__pycache__</code>目录以及<code>E305</code>规则。此外，它将最大行长设置为90，而不是80个字符。您可能会发现，默认的线宽限制是79个字符，这对于测试来说是非常有限的，因为它们包含长的方法名称，带有测试值的字符串文字以及可能更长的其他数据。通常将测试的行长设置为最多120个字符：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[flake8]</span></span><br><span class="line"><span class="attr">ignore</span> = E305</span><br><span class="line"><span class="attr">exclude</span> = .git,__pycache__</span><br><span class="line"><span class="attr">max-line-length</span> = <span class="number">90</span></span><br></pre></td></tr></table></figure><p>或者，您可以在命令行上提供以下选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flake8 --ignore E305 --exclude .git,__pycache__ --max-line-length=90</span><br></pre></td></tr></table></figure><p><a href="http://flake8.pycqa.org/en/latest/user/options.html" target="_blank" rel="noopener">文档网站</a>上提供了配置选项的完整列表。</p><p>现在，您可以添加<code>flake8</code>到CI配置。对于Travis CI，其外观如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">matrix:</span><br><span class="line">  include:</span><br><span class="line">    - python: <span class="string">"2.7"</span></span><br><span class="line">      script: <span class="string">"flake8"</span></span><br></pre></td></tr></table></figure><p>Travis将在其中读取配置，<code>.flake8</code>如果发生任何棉绒错误，将使构建失败。确保将<code>flake8</code>依赖项添加到<code>requirements.txt</code>文件中。</p><h4 id="使用代码格式化程序进行进取性整理">使用代码格式化程序进行进取性整理</h4><p><code>flake8</code>是一个被动的lint：它建议更改，但是您必须去更改代码。更具攻击性的方法是代码格式化程序。代码格式化程序将自动更改您的代码，以满足一系列样式和布局惯例。</p><p><code>black</code>是一个非常宽容的格式化程序。它没有任何配置选项，并且具有非常特定的样式。这非常适合作为插入测试管道的插入工具。</p><p><strong>注意：</strong> <code>black</code>需要Python 3.6+。</p><p>您可以<code>black</code>通过pip 安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install black</span><br></pre></td></tr></table></figure><p>然后，要<code>black</code>在命令行上运行，请提供要格式化的文件或目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ black test.py</span><br></pre></td></tr></table></figure><h3 id="保持测试代码干净">保持测试代码干净</h3><p>编写测试时，您可能会发现复制和粘贴代码的结果比常规应用程序要多得多。测试有时会非常重复，但这绝不是让代码草率且难以维护的原因。</p><p>随着时间的流逝，您将在测试代​​码中<a href="https://martinfowler.com/bliki/TechnicalDebt.html" target="_blank" rel="noopener">积累</a>许多<a href="https://martinfowler.com/bliki/TechnicalDebt.html" target="_blank" rel="noopener">技术负担</a>，并且如果您对应用程序进行了重大更改，需要对测试进行更改，那么由于结构化方式，这可能是不必要的繁琐任务。</p><p>尝试按照<strong>DRY</strong>编写测试时的原则：<strong>d</strong> on't <strong>[R</strong> EPEAT <strong>ÿ</strong>我们自己。</p><p>测试装置和功能是产生易于维护的测试代码的好方法。另外，可读性也很重要。考虑像<code>flake8</code>测试代码一样部署一个整理工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flake8 --max-line-length=120 tests/</span><br></pre></td></tr></table></figure><h3 id="测试变更之间的性能下降">测试变更之间的性能下降</h3><p>有许多方法可以在Python中对代码进行基准测试。标准库提供了该<code>timeit</code>模块，该模块可以多次计时功能，并为您提供分配。此示例将执行<code>test()</code>100次，并<code>print()</code>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># ... your code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> timeit</span><br><span class="line">    print(timeit.timeit(<span class="string">"test()"</span>, setup=<span class="string">"from __main__ import test"</span>, number=<span class="number">100</span>))</span><br></pre></td></tr></table></figure><p>如果您决定<code>pytest</code>用作测试运行程序，则另一个选择是<code>pytest-benchmark</code>插件。这提供了一个<code>pytest</code>称为的装置<code>benchmark</code>。您可以传递<code>benchmark()</code>任何可调用对象，它将可调用对象的时间记录到的结果中<code>pytest</code>。</p><p>您可以<code>pytest-benchmark</code>使用<code>pip</code>以下方法从PyPI 安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install pytest-benchmark</span><br></pre></td></tr></table></figure><p>然后，您可以添加一个使用夹具的测试，并通过要执行的可调用对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_my_function</span><span class="params">(benchmark)</span>:</span></span><br><span class="line">    result = benchmark(test)</span><br></pre></td></tr></table></figure><p><code>pytest</code>现在执行将为您提供基准测试结果：</p><p><img src="https://2020.iosdevlog.com/2020/03/23/test/pytest-bench-screen.png" /></p><p>有关更多信息，请访问<a href="https://pytest-benchmark.readthedocs.io/en/latest/" target="_blank" rel="noopener">文档网站</a>。</p><h3 id="测试应用程序中的安全缺陷">测试应用程序中的安全缺陷</h3><p>您将要在应用程序上运行的另一项测试是检查常见的安全错误或漏洞。</p><p>您可以<code>bandit</code>使用<code>pip</code>以下方法从PyPI 安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install bandit</span><br></pre></td></tr></table></figure><p>然后，您可以通过<code>-r</code>标志传递应用程序模块的名称，它会为您提供一个摘要：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ bandit -r my_sum</span><br><span class="line">[main]  INFO    profile include tests: None</span><br><span class="line">[main]  INFO    profile exclude tests: None</span><br><span class="line">[main]  INFO    cli include tests: None</span><br><span class="line">[main]  INFO    cli exclude tests: None</span><br><span class="line">[main]  INFO    running on Python 3.5.2</span><br><span class="line">Run started:2018-10-08 00:35:02.669550</span><br><span class="line"></span><br><span class="line">Test results:</span><br><span class="line"> No issues identified.</span><br><span class="line"></span><br><span class="line">Code scanned:</span><br><span class="line"> Total lines of code: 5</span><br><span class="line"> Total lines skipped (<span class="comment">#nosec): 0</span></span><br><span class="line"></span><br><span class="line">Run metrics:</span><br><span class="line"> Total issues (by severity):</span><br><span class="line"> Undefined: 0.0</span><br><span class="line"> Low: 0.0</span><br><span class="line"> Medium: 0.0</span><br><span class="line"> High: 0.0</span><br><span class="line"> Total issues (by confidence):</span><br><span class="line"> Undefined: 0.0</span><br><span class="line"> Low: 0.0</span><br><span class="line"> Medium: 0.0</span><br><span class="line"> High: 0.0</span><br><span class="line">Files skipped (0):</span><br></pre></td></tr></table></figure><p>与一样<code>flake8</code>，<code>bandit</code>标记的规则是可配置的，并且如果您希望忽略任何标记，则可以使用以下<code>setup.cfg</code>选项将以下部分添加到文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[bandit]</span><br><span class="line">exclude: &#x2F;test</span><br><span class="line">tests: B101,B102,B301</span><br></pre></td></tr></table></figure><p>可以在<a href="https://github.com/PyCQA/bandit" target="_blank" rel="noopener">GitHub网站</a>上获得更多详细信息。</p><h2 id="结论">结论</h2><p>Python通过内置所需的命令和库来验证应用程序是否按设计工作，从而使测试变得可访问。使用Python进行测试的入门不必太复杂：您可以使用<code>unittest</code>和编写小型可维护的方法来验证代码。</p><p>随着您了解有关测试的更多信息以及您的应用程序的增长，您可以考虑切换到其他测试框架之一，例如<code>pytest</code>，并开始利用更多高级功能。</p><p>感谢您的阅读。希望您在使用Python时拥有无错误的未来！</p><p>原文：<a href="https://realpython.com/python-testing/" target="_blank" rel="noopener">Getting Started With Testing in Python</a><br />作者：<a href="https://realpython.com/python-testing/#author" target="_blank" rel="noopener">Anthony Shaw</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/23/test/Getting-Started-with-Testing-in-Python_Watermarked.png&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://2020.iosdevlog.com/categories/python/"/>
    
    
      <category term="test" scheme="https://2020.iosdevlog.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>[译] 如何将开源 Python 软件包发布到 PyPI</title>
    <link href="https://2020.iosdevlog.com/2020/03/22/pip/"/>
    <id>https://2020.iosdevlog.com/2020/03/22/pip/</id>
    <published>2020-03-22T14:33:29.000Z</published>
    <updated>2020-03-22T16:03:47.108Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/22/pip/How-to-publish-an-open-source-Python-package-to-PyPI_Watermark.png" /></p><p>本教程有一个由 Real Python 团队创建的相关视频课程。与书面教程一起观看，以加深您的理解：如何将自己的 Python 包发布到 PyPI 。</p><a id="more"></a><p>Python因附带<a href="https://docs.python.org/tutorial/stdlib.html#batteries-included" target="_blank" rel="noopener">电池</a>而闻名。标准库中提供了复杂的功能。您可以找到用于处理 <a href="https://realpython.com/python-sockets/" target="_blank" rel="noopener">套接字</a>，解析 <a href="https://realpython.com/python-csv/" target="_blank" rel="noopener">CSV</a>，<a href="https://realpython.com/python-json/" target="_blank" rel="noopener">JSON</a> 和 <a href="https://docs.python.org/library/xml.html" target="_blank" rel="noopener">XML</a>文件以及处理 <a href="https://docs.python.org/library/shutil.html" target="_blank" rel="noopener">文件</a>和 <a href="https://realpython.com/python-pathlib/" target="_blank" rel="noopener">文件路径的模块</a>。</p><p>尽管Python附带的软件包很棒，但标准库之外还有许多出色的项目可用。这些通常是在<a href="https://pypi.org/" target="_blank" rel="noopener">Python打包索引</a>（PyPI）（历史上被称为<a href="https://www.youtube.com/watch?v=B3KBuQHHKx0" target="_blank" rel="noopener">Cheese Shop</a>）上托管的。在PyPI，您可以找到从<a href="https://pypi.org/search/?q=helloworld" target="_blank" rel="noopener">Hello World</a>到高级<a href="https://pypi.org/project/Keras/" target="_blank" rel="noopener">深度学习库的所有内容</a>。</p><p>在本教程中，您将介绍如何 <strong>将自己的包上传到PyPI</strong>。尽管发布项目比以前要容易，但仍涉及一些步骤。</p><p><strong>您将学习如何：</strong></p><ul><li>准备要发布的Python包</li><li>考虑版本控制</li><li>将您的包上传到PyPI</li></ul><p>在整个教程中，我们将使用一个简单的示例项目：一个<code>reader</code>可用于阅读<em>Real Python</em>教程的软件包。第一部分介绍此项目。</p><p>可以在 PyPI 上和导入时为包使用不同的名称。但是，如果您使用相同或非常相似的名称，则对您的用户而言将更加容易。</p><h2 id="配置程序包">配置程序包</h2><p>为了将您的包上传到PyPI，您需要提供有关它的一些基本信息。该信息通常以 <code>setup.py</code> 文件的形式提供。有一些举措试图简化这种信息收集。目前，这 <code>setup.py</code> 是提供有关包装信息的唯一完全受支持的方法。</p><h2 id="一个小的python包">一个小的Python包</h2><p>本节将描述一个小的 Python 包，我们将使用它作为示例来发布到 PyPI。如果您已经有要发布的软件包，请随意浏览本节，然后在<a href="https://realpython.com/pypi-publish-python-package/#preparing-your-package-for-publication" target="_blank" rel="noopener">下一节</a>的<a href="https://realpython.com/pypi-publish-python-package/#preparing-your-package-for-publication" target="_blank" rel="noopener">开头</a>再次加入。</p><p>我们将使用该软件包，该软件包 <code>reader</code> 是一个可用于下载和阅读<em>Real Python</em>文章的应用程序。如果要继续学习，可以从<a href="https://github.com/realpython/reader" target="_blank" rel="noopener">我们的GitHub存储库中</a>获取完整的源代码。</p><p><strong>注意</strong>：如下所示和说明的源代码是<em>Real Python</em>供稿阅读器的简化版本，但功能齐全。与在<a href="https://pypi.org/project/realpython-reader/" target="_blank" rel="noopener">PyPI</a>和<a href="https://github.com/realpython/reader" target="_blank" rel="noopener">GitHub上</a>发布的软件包相比，此版本缺少一些错误处理和其他选项。</p><p>首先，查看的目录结构<code>reader</code>。该软件包完全位于一个目录中，该目录也名为<code>reader</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">reader/</span><br><span class="line">│</span><br><span class="line">├── reader/</span><br><span class="line">│   ├── config.txt</span><br><span class="line">│   ├── feed.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── __main__.py</span><br><span class="line">│   └── viewer.py</span><br><span class="line">│</span><br><span class="line">├── tests/</span><br><span class="line">│   ├── test_feed.py</span><br><span class="line">│   └── test_viewer.py</span><br><span class="line">│</span><br><span class="line">├── MANIFEST.<span class="keyword">in</span></span><br><span class="line">├── README.md</span><br><span class="line">└── setup.py</span><br></pre></td></tr></table></figure><p>软件包的源代码和<code>reader</code>配置文件位于子目录中。在单独的子目录中有一些测试。这些测试不在此处讨论，但是您可以在<a href="https://github.com/realpython/reader" target="_blank" rel="noopener">GitHub存储库中</a>找到它们。要了解有关测试的更多信息，请参见Anthony Shaw的精彩教程<a href="https://realpython.com/python-testing/" target="_blank" rel="noopener">《 Python测试入门》</a>。</p><p>如果您使用自己的软件包，则可以使用其他结构或在软件​​包目录中包含其他文件。我们的<a href="https://realpython.com/python-application-layouts/" target="_blank" rel="noopener">Python应用程序布局</a>参考讨论了几个不同的选项。本指南中的说明将独立于您使用的布局工作。</p><p>在本节的其余部分，您将看到该 <code>reader</code> 程序包如何工作。在<a href="https://realpython.com/pypi-publish-python-package/#preparing-your-package-for-publication" target="_blank" rel="noopener">接下来的部分</a>，你会得到的特殊文件，其中包括仔细一看<code>setup.py</code>，<code>README.md</code>和<code>MANIFEST.in</code>，这需要发布你的包。</p><h3 id="使用real-python-reader">使用Real Python Reader</h3><p><code>reader</code> 是一个非常基本的 <a href="https://en.wikipedia.org/wiki/Web_feed" target="_blank" rel="noopener">Web提要</a>阅读器，可以从 <a href="https://realpython.com/contact/#rss-atom-feed" target="_blank" rel="noopener">Real Python提要中</a>下载最新的Real Python文章。</p><p>这是一个使用阅读器获取最新文章列表的示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ python -m reader</span><br><span class="line">The latest tutorials from Real Python (https://realpython.com/)</span><br><span class="line"> 0 How to Publish an Open-Source Python Package to PyPI</span><br><span class="line"> 1 Python <span class="string">"while"</span> Loops (Indefinite Iteration)</span><br><span class="line"> 2 Writing Comments <span class="keyword">in</span> Python (Guide)</span><br><span class="line"> 3 Setting Up Python <span class="keyword">for</span> Machine Learning on Windows</span><br><span class="line"> 4 Python Community Interview With Michael Kennedy</span><br><span class="line"> 5 Practical Text Classification With Python and Keras</span><br><span class="line"> 6 Getting Started With Testing <span class="keyword">in</span> Python</span><br><span class="line"> 7 Python, Boto3, and AWS S3: Demystified</span><br><span class="line"> 8 Python<span class="string">'s range() Function (Guide)</span></span><br><span class="line"><span class="string"> 9 Python Community Interview With Mike Grouchy</span></span><br><span class="line"><span class="string"> 10 How to Round Numbers in Python</span></span><br><span class="line"><span class="string"> 11 Building and Documenting Python REST APIs With Flask and Connexion – Part 2</span></span><br><span class="line"><span class="string"> 12 Splitting, Concatenating, and Joining Strings in Python</span></span><br><span class="line"><span class="string"> 13 Image Segmentation Using Color Spaces in OpenCV + Python</span></span><br><span class="line"><span class="string"> 14 Python Community Interview With Mahdi Yusuf</span></span><br><span class="line"><span class="string"> 15 Absolute vs Relative Imports in Python</span></span><br><span class="line"><span class="string"> 16 Top 10 Must-Watch PyCon Talks</span></span><br><span class="line"><span class="string"> 17 Logging in Python</span></span><br><span class="line"><span class="string"> 18 The Best Python Books</span></span><br><span class="line"><span class="string"> 19 Conditional Statements in Python</span></span><br></pre></td></tr></table></figure><p>请注意，每篇文章都有编号。要阅读一篇特定的文章，请使用相同的命令，但也要包括文章的编号。例如，要阅读<a href="https://realpython.com/pypi-publish-python-package/" target="_blank" rel="noopener">如何将开源Python程序包发布到PyPI</a>，您可以添加<code>0</code>以下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ python -m reader <span class="number">0</span></span><br><span class="line"><span class="comment"># How to Publish an Open-Source Python Package to PyPI</span></span><br><span class="line"></span><br><span class="line">Python <span class="keyword">is</span> famous <span class="keyword">for</span> coming <span class="keyword">with</span> batteries included. Sophisticated</span><br><span class="line">capabilities are available <span class="keyword">in</span> the standard library. You can find modules</span><br><span class="line"><span class="keyword">for</span> working <span class="keyword">with</span> sockets, parsing CSV, JSON, <span class="keyword">and</span> XML files, <span class="keyword">and</span></span><br><span class="line">working <span class="keyword">with</span> files <span class="keyword">and</span> file paths.</span><br><span class="line"></span><br><span class="line">However great the packages included <span class="keyword">with</span> Python are, there are many</span><br><span class="line">fantastic projects available outside the standard library. These are</span><br><span class="line">most often hosted at the Python Packaging Index (PyPI), historically</span><br><span class="line">known <span class="keyword">as</span> the Cheese Shop. At PyPI, you can find everything <span class="keyword">from</span> Hello</span><br><span class="line">World to advanced deep learning libraries.</span><br><span class="line"></span><br><span class="line">[... The full text of the article ...]</span><br></pre></td></tr></table></figure><p>这将使用 <a href="https://www.markdownguide.org/basic-syntax" target="_blank" rel="noopener">Markdown</a>文本格式将完整的文章打印到控制台。</p><p><strong>注意：</strong> <code>python -m</code> 用于运行<a href="https://docs.python.org/library/__main__.html" target="_blank" rel="noopener">库模块或软件包而不是脚本</a>。如果运行程序包，<code>__main__.py</code> 则将执行文件的内容。有关更多信息，请参见 <a href="https://realpython.com/pypi-publish-python-package/#different-ways-of-calling-a-package" target="_blank" rel="noopener">调用包的不同方式</a>。</p><p>通过更改文章编号，您可以阅读任何可用的文章。</p><h3 id="快速查看代码">快速查看代码</h3><p><code>reader</code> 对于本教程而言，如何工作的细节并不重要。但是，如果您对实现有兴趣，可以展开以下部分。该软件包包含五个文件：</p><h4 id="config.txt"><code>config.txt</code></h4><p>config.txt是一个配置文件，用于指定Real Python教程的feed的URL 。这是一个文本文件，可由configparser标准库读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.txt</span></span><br><span class="line"></span><br><span class="line">[feed]</span><br><span class="line">url = https://realpython.com/atom.xml</span><br></pre></td></tr></table></figure><p>通常，这样的配置文件包含分成部分的键/值对。该特定文件仅包含一个部分（feed）和一个键（url）。</p><p>注意：对于这个简单的程序包，配置文件可能是多余的。我们将其包含在此处用于演示目的。</p><h4 id="main__.py"><code>__main__.py</code></h4><p>我们将看的第一个源代码文件是__main__.py。双下划线表示该文件在Python中具有特殊含义。确实，当使用上述方法将程序包作为脚本运行时-m，Python会执行__main__.py文件的内容。</p><p>换句话说，它__main__.py充当程序的切入点并负责主流程，并根据需要调用其他部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __main__.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> configparser <span class="keyword">import</span> ConfigParser</span><br><span class="line"><span class="keyword">from</span> importlib <span class="keyword">import</span> resources  <span class="comment"># Python 3.7+</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> reader <span class="keyword">import</span> feed</span><br><span class="line"><span class="keyword">from</span> reader <span class="keyword">import</span> viewer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""Read the Real Python article feed"""</span></span><br><span class="line">    <span class="comment"># Read URL of the Real Python feed from config file</span></span><br><span class="line">    cfg = ConfigParser()</span><br><span class="line">    cfg.read_string(resources.read_text(<span class="string">"reader"</span>, <span class="string">"config.txt"</span>))</span><br><span class="line">    url = cfg.get(<span class="string">"feed"</span>, <span class="string">"url"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If an article ID is given, show the article</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">        article = feed.get_article(url, sys.argv[<span class="number">1</span>])</span><br><span class="line">        viewer.show(article)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If no ID is given, show a list of all articles</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        site = feed.get_site(url)</span><br><span class="line">        titles = feed.get_titles(url)</span><br><span class="line">        viewer.show_list(site, titles)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>注意，main()在最后一行调用了该命令。如果我们不调用main()，那么我们的程序将什么也不做。如您先前所见，该程序可以列出所有文章或打印一篇特定文章。这是由if-else内部处理的main()。</p><p>要从配置文件读取提要的URL，我们使用configparser和importlib.resources。后者用于从包中导入非代码（或资源）文件，而不必担心完整的文件路径。在将程序包发布到PyPI时特别有用，因为资源文件可能最终存储在二进制存档中。</p><p>importlib.resources成为Python 3.7中标准库的一部分。如果您使用的是旧版本的Python，则可以importlib_resources改用。这是与Python 2.7和3.4及更高版本兼容的反向端口。importlib_resources可以从PyPI安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install importlib_resources</span><br></pre></td></tr></table></figure><p>有关更多信息，请参见Barry Warzaw在PyCon 2018上的演讲。</p><h4 id="init__.py"><code>__init__.py</code></h4><p>下一个文件是__init__.py。同样，文件名中的双下划线告诉我们这是一个特殊文件。<strong>init</strong>.py表示包的根。它通常应该保持非常简单，但这是放置包常量，文档等的好地方：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Version of the realpython-reader package</span></span><br><span class="line">__version__ = <span class="string">"1.0.0"</span></span><br></pre></td></tr></table></figure><p>特殊变量__version__是Python中的约定，用于将版本号添加到包中。它是在PEP 396中引入的。稍后我们将详细讨论版本控制。</p><p>中定义的__init__.py变量在包名称空间中可用作变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> reader</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reader.__version__</span><br><span class="line"><span class="string">'1.0.0'</span></span><br></pre></td></tr></table></figure><p>您还应该__version__在自己的包中定义变量。</p><h4 id="feed.py"><code>feed.py</code></h4><p>查看__main__.py，您将看到导入了两个模块feed和viewer，并用于从Feed中读取内容并显示结果。这些模块完成大部分实际工作。</p><p>首先考虑一下feed.py。该文件包含用于从Web订阅源读取和解析结果的功能。幸运的是，已经有很棒的库可以做到这一点。feed.py取决于PyPI上已有的两个模块：feedparser和html2text。</p><p>feed.py包含几个功能。我们将一次讨论一次。</p><p>为了避免从Web提要中读取过多信息，我们首先创建一个函数，以在第一次读取提要时记住该提要：</p><h1 id="feed.py-1">feed.py</h1><p>import feedparser<br />import html2text</p><p>_CACHED_FEEDS = dict()</p><p>def _feed(url):<br />"""Only read a feed once, by caching its contents"""<br />if url not in _CACHED_FEEDS:<br />_CACHED_FEEDS[url] = feedparser.parse(url)<br />return _CACHED_FEEDS[url]<br />feedparser.parse()从网络读取提要并以类似于字典的结构返回它。为了避免多次下载该供稿，将其存储在其中_CACHED_FEEDS并在以后调用时重复使用_feed()。两者_CACHED_FEEDS和_feed()均以下划线作为前缀，以表明它们是不打算直接使用的支持对象。</p><p>通过查看.feed元数据，我们可以获得有关提要的一些基本信息。以下功能挑选标题并链接到包含提要的网站：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_site</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""Get name and link to web site of the feed"""</span></span><br><span class="line">    info = _feed(url).feed</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"<span class="subst">&#123;info.title&#125;</span> (<span class="subst">&#123;info.link&#125;</span>)"</span></span><br><span class="line">除了.title和.link，属性一样.subtitle，.updated和.id是也可以。</span><br><span class="line"></span><br><span class="line">供稿中可用的文章可以在.entries列表内找到。可以通过列表理解找到文章标题：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_titles</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""List titles in feed"""</span></span><br><span class="line">    articles = _feed(url).entries</span><br><span class="line">    <span class="keyword">return</span> [a.title <span class="keyword">for</span> a <span class="keyword">in</span> articles]</span><br><span class="line">.entries列出了Feed中按时间顺序排序的文章，因此最新的文章是.entries[<span class="number">0</span>]。</span><br><span class="line"></span><br><span class="line">为了获取一篇文章的内容，我们将其在.entries列表中的索引用作文章ID：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_article</span><span class="params">(url, article_id)</span>:</span></span><br><span class="line">    <span class="string">"""Get article from feed with the given ID"""</span></span><br><span class="line">    articles = _feed(url).entries</span><br><span class="line">    article = articles[int(article_id)]</span><br><span class="line">    html = article.content[<span class="number">0</span>].value</span><br><span class="line">    text = html2text.html2text(html)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"# <span class="subst">&#123;article.title&#125;</span>\n\n<span class="subst">&#123;text&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>从.entries列表中选择正确的文章后，我们在第28行找到该文章的文本为HTML。接下来，html2text做了一个体面的工作，将HTML转换为可读性更高的文本。由于HTML不包含文章标题，因此标题会在返回之前添加。</p><h4 id="viewer.py"><code>viewer.py</code></h4><p>最后一个模块是viewer.py。目前，它包含两个非常简单的功能。实际上，我们可以print()直接使用in <strong>main</strong>.py而不是调用viewer函数。但是，将功能拆分开可以使以后更轻松地用更高级的功能替换它。也许我们可以在更高版本中添加GUI界面？</p><p>viewer.py 包含两个功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># viewer.py</span><br><span class="line"></span><br><span class="line">def show(article):</span><br><span class="line">    &quot;&quot;&quot;Show one article&quot;&quot;&quot;</span><br><span class="line">    print(article)</span><br><span class="line"></span><br><span class="line">def show_list(site, titles):</span><br><span class="line">    &quot;&quot;&quot;Show list of articles&quot;&quot;&quot;</span><br><span class="line">    print(f&quot;The latest tutorials from &#123;site&#125;&quot;)</span><br><span class="line">    for article_id, title in enumerate(titles):</span><br><span class="line">        print(f&quot;&#123;article_id:&gt;3&#125; &#123;title&#125;&quot;)</span><br></pre></td></tr></table></figure><p>show()只需将一篇文章打印到控制台，同时show_list()打印标题列表。后者还会创建在选择阅读一篇特定文章时使用的文章ID。</p><h3 id="调用包裹的不同方式">调用包裹的不同方式</h3><p>当您的项目变得越来越复杂时，挑战之一就是与用户交流如何使用您的项目。由于该软件包包含四个不同的源代码文件，因此用户如何知道要调用哪个文件来运行 <code>reader</code>？</p><p>该 <code>python</code> 解释程序有一个 <code>-m</code> 选项，允许你指定一个模块名称而不是文件名。例如，如果您有一个名为的脚本 <code>hello.py</code>，则以下两个命令是等效的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python hello.py</span><br><span class="line">Hi there!</span><br><span class="line"></span><br><span class="line">$ python -m hello</span><br><span class="line">Hi there!</span><br></pre></td></tr></table></figure><p>后者的优点之一是它还允许您调用Python内置的模块。一个例子是调用<a href="http://python-history.blogspot.com/2010/06/import-antigravity.html" target="_blank" rel="noopener"><code>antigravity</code></a>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python -m antigravity</span><br><span class="line">Created new window <span class="keyword">in</span> existing browser session.</span><br></pre></td></tr></table></figure><p>使用的另一个优点 <code>-m</code> 是它既适用于包又适用于模块。如前所述，您可以通过以下方式调用 <code>reader</code> 软件包 <code>-m</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python -m reader</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>由于 <code>reader</code> 是软件包，因此名称仅指目录。Python如何确定该目录中要运行的代码？它查找名为的文件 <code>__main__.py</code> 。如果存在这样的文件，则将其执行。如果 <code>__main__.py</code> 不存在，则会显示一条错误消息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python -m math</span><br><span class="line">python: No code object available <span class="keyword">for</span> math</span><br></pre></td></tr></table></figure><p>在此示例中，您看到 <code>math</code> 标准库尚未定义 <code>__main__.py</code> 文件。</p><p>如果要创建应该执行的程序包，则应包括一个 <code>__main__.py</code> 文件。<a href="https://realpython.com/pypi-publish-python-package/#configuring-your-package" target="_blank" rel="noopener">稍后</a>，您将看到如何还可以为程序包创建入口点，其行为类似于常规程序。</p><h2 id="准备打包发布">准备打包发布</h2><p>现在，您已经有了要发布的软件包，或者您已经<a href="https://github.com/realpython/reader" target="_blank" rel="noopener">复制了我们的软件包</a>。将包上传到PyPI之前，需要执行哪些步骤？</p><h3 id="命名包裹">命名包裹</h3><p>第一步（可能也是最困难的一步）是为您的包装命名。PyPI上的所有软件包都必须具有唯一的名称。在PyPI上已经有超过150,000个软件包，很可能已经采用了您喜欢的名称。</p><p>您可能需要集思广益，并做一些研究才能找到完美的名字。使用<a href="https://pypi.org/search/" target="_blank" rel="noopener">PyPI搜索</a>来检查名称是否已被使用。您想出的名称将在PyPI上可见。</p><p>为了使该<code>reader</code>包更易于在PyPI上找到，我们给它起了更具描述性的名称，并命名为<code>realpython-reader</code>。使用以下名称来安装软件包<code>pip</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install realpython-reader</span><br></pre></td></tr></table></figure><p>即使我们使用<code>realpython-reader</code>PyPI名称，<code>reader</code>但在导入时仍会调用该包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> reader</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(reader)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> reader <span class="keyword">import</span> feed</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>feed.get_titles()</span><br><span class="line">[<span class="string">'How to Publish an Open-Source Python Package to PyPI'</span>, ...]</span><br></pre></td></tr></table></figure><p>如您所见，您可以在PyPI上和导入时为包使用不同的名称。但是，如果您使用相同或非常相似的名称，则对您的用户而言将更加容易。</p><h3 id="配置程序包-1">配置程序包</h3><p>为了将您的包上传到PyPI，您需要提供有关它的一些基本信息。该信息通常以 <code>setup.py</code> 文件的形式提供。有一些<a href="https://www.python.org/dev/peps/pep-0518/" target="_blank" rel="noopener">举措</a>试图简化这种信息收集。目前，这 <code>setup.py</code> 是提供有关包装信息的唯一完全受支持的方法。</p><p>该 <code>setup.py</code> 文件应放在包的顶部文件夹中。一个相当最小 <code>setup.py</code> 的 <code>reader</code> 看起来像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"></span><br><span class="line"><span class="comment"># The directory containing this file</span></span><br><span class="line">HERE = pathlib.Path(__file__).parent</span><br><span class="line"></span><br><span class="line"><span class="comment"># The text of the README file</span></span><br><span class="line">README = (HERE / <span class="string">"README.md"</span>).read_text()</span><br><span class="line"></span><br><span class="line"><span class="comment"># This call to setup() does all the work</span></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">"realpython-reader"</span>,</span><br><span class="line">    version=<span class="string">"1.0.0"</span>,</span><br><span class="line">    description=<span class="string">"Read the latest Real Python tutorials"</span>,</span><br><span class="line">    long_description=README,</span><br><span class="line">    long_description_content_type=<span class="string">"text/markdown"</span>,</span><br><span class="line">    url=<span class="string">"https://github.com/realpython/reader"</span>,</span><br><span class="line">    author=<span class="string">"Real Python"</span>,</span><br><span class="line">    author_email=<span class="string">"office@realpython.com"</span>,</span><br><span class="line">    license=<span class="string">"MIT"</span>,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">"License :: OSI Approved :: MIT License"</span>,</span><br><span class="line">        <span class="string">"Programming Language :: Python :: 3"</span>,</span><br><span class="line">        <span class="string">"Programming Language :: Python :: 3.7"</span>,</span><br><span class="line">    ],</span><br><span class="line">    packages=[<span class="string">"reader"</span>],</span><br><span class="line">    include_package_data=<span class="literal">True</span>,</span><br><span class="line">    install_requires=[<span class="string">"feedparser"</span>, <span class="string">"html2text"</span>],</span><br><span class="line">    entry_points=&#123;</span><br><span class="line">        <span class="string">"console_scripts"</span>: [</span><br><span class="line">            <span class="string">"realpython=reader.__main__:main"</span>,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们将仅涵盖 <code>setuptools</code> 此处提供的一些选项。该<a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#basic-use" target="_blank" rel="noopener">文档</a>很好地完成了所有细节。</p><p>调用中100％必需的参数 <code>setup()</code> 如下：</p><ul><li><strong><code>name</code>：</strong>将在PyPI上显示的软件包名称</li><li><strong><code>version</code>：</strong>您软件包的当前版本</li><li><strong><code>packages</code>：</strong>包含您的源代码的软件包和子软件包</li></ul><p>稍后我们将<a href="https://realpython.com/pypi-publish-python-package/#versioning-your-package" target="_blank" rel="noopener">详细讨论版本</a>。该<code>packages</code>参数获取软件包列表。在我们的示例中，只有一个包：<code>reader</code>。</p><p>您还需要指定任何子包。在更复杂的项目中，可能会列出许多软件包。为了简化此工作，<code>setuptools</code>包括include <a href="https://setuptools.readthedocs.io/en/latest/setuptools.html#using-find-packages" target="_blank" rel="noopener"><code>find_packages()</code></a>可以很好地发现所有子包。您可以按以下方式<code>find_packages()</code>在<code>reader</code>项目中使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> find_packages, setup</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    ...</span><br><span class="line">    packages=find_packages(exclude=(<span class="string">"tests"</span>,)),</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>虽然只是<code>name</code>，<code>version</code>和<code>packages</code>需要，你的包变得更容易找到PyPI上如果添加一些更多的信息。看一下<a href="https://pypi.org/project/realpython-reader/" target="_blank" rel="noopener"><code>realpython-reader</code>PyPI</a>上的<a href="https://pypi.org/project/realpython-reader/" target="_blank" rel="noopener">页面</a>，并将信息与<code>setup.py</code>上面的内容进行比较。所有信息都来自<code>setup.py</code>和<code>README.md</code>。</p><p><img src="https://2020.iosdevlog.com/2020/03/22/pip/pypi_realpython-reader.png" /></p><p>最后两个参数<code>setup()</code>值得特别提及：</p><ul><li><p><strong><code>install_requires</code></strong>用于列出您的软件包对第三方库的任何依赖关系。在<code>reader</code>依赖于<code>feedparser</code>和<code>html2text</code>，因此他们应该在这里列出。</p></li><li><p><strong><code>entry_points</code></strong>用于创建调用程序包中的函数的脚本。在我们的示例中，我们创建了一个在文件内<code>realpython</code>调用的新脚本 <code>reader/__main__.py</code>。</p></li></ul><p><img src="https://2020.iosdevlog.com/2020/03/22/pip/How-to-publish-an-open-source-Python-package-to-PyPI_Watermark.png" /></p><p>有关典型安装文件的另一个示例，请参阅<a href="https://github.com/kennethreitz/setup.py" target="_blank" rel="noopener"><code>setup.py</code>GitHub上的</a> Kenneth Reitz的<a href="https://github.com/kennethreitz/setup.py" target="_blank" rel="noopener">存储库</a>。</p><h3 id="记录包裹">记录包裹</h3><p>在向外界发布您的软件包之前，您应该<a href="https://realpython.com/documenting-python-code/" target="_blank" rel="noopener">添加一些文档</a>。根据您的软件包，文档可以小到一个简单的<code>README</code>文件，也可以大到包括教程，示例库和API参考的完整网页。</p><p>至少，您应该<code>README</code>在项目中包含一个文件。<a href="https://dbader.org/blog/write-a-great-readme-for-your-github-project" target="_blank" rel="noopener">一个好的人<code>README</code></a>应该快速描述您的项目，并告诉您的用户如何安装和使用您的软件包。通常，您希望将包括在内<code>README</code>作为<code>long_description</code>参数<code>setup()</code>。这将<code>README</code>在PyPI上显示您。</p><p>传统上，PyPI使用<a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="noopener">reStructuredText</a>来包装文档。然而，由于2018三月<a href="https://www.markdownguide.org/basic-syntax" target="_blank" rel="noopener">降价</a>已经<a href="https://dustingram.com/articles/2018/03/16/markdown-descriptions-on-pypi" target="_blank" rel="noopener">也被支持</a>。</p><p>在PyPI之外，Markdown比reStructuredText更受支持。如果您不需要reStructuredText的任何特殊功能，最好将其保留<code>README</code>在Markdown中。请注意，您应该使用<code>setup()</code>参数<code>long_description_content_type</code>来<a href="https://packaging.python.org/guides/making-a-pypi-friendly-readme/?highlight=long_description_content_type" target="_blank" rel="noopener">告诉您使用哪种格式的PyPI</a>。有效值是<code>text/markdown</code>，<code>text/x-rst</code>和<code>text/plain</code>。</p><p>对于较大的项目，您可能想提供比合理地容纳在单个文件中更多的文档。在这种情况下，您可以使用<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>或<a href="https://readthedocs.org/" target="_blank" rel="noopener">Read Docs之</a>类的网站，并使用<code>url</code>参数链接到文档。在<code>setup.py</code>上面的示例中，<code>url</code>用于链接到<a href="https://github.com/realpython/reader" target="_blank" rel="noopener"><code>reader</code>GitHub存储库</a>。</p><h3 id="打包版本">打包版本</h3><p>您的软件包需要有一个版本，而PyPI仅允许您为软件包上传一个特定版本。换句话说，如果要在PyPI上更新软件包，则需要先增加版本号。这是一件好事，因为它保证了可重复性：具有相同版本软件包的两个系统应具有相同的行为。</p><p>有<a href="https://en.wikipedia.org/wiki/Software_versioning" target="_blank" rel="noopener">许多不同的方案</a>，可用于您的版本号。对于Python项目，<a href="https://www.python.org/dev/peps/pep-0440/" target="_blank" rel="noopener">PEP 440</a>提供了一些建议。但是，为了灵活起见，PEP很复杂。对于简单的项目，请坚持使用简单的版本控制方案。</p><p><a href="https://semver.org/" target="_blank" rel="noopener">语义版本控制</a>是一个很好的默认方案。版本号由三个数字部分给出，例如<code>0.1.2</code>。这些组件称为MAJOR，MINOR和PATCH，并且有关于何时增加每个组件的简单规则：</p><blockquote><ul><li>当您更改不兼容的API时，请增加MAJOR版本。</li><li>当您以向后兼容的方式添加功能时，请增加MINOR版本。</li><li>进行向后兼容的错误修复时，请增加PATCH版本。（<a href="https://semver.org/" target="_blank" rel="noopener">来源</a>）</li></ul></blockquote><p>您可能需要在项目内的其他文件中指定版本。在<code>reader</code>项目中，我们在<code>setup.py</code>和中都指定了版本<code>reader/__init__.py</code>。为了确保版本号保持一致，可以使用一个名为<a href="https://pypi.org/project/bumpversion/" target="_blank" rel="noopener">Bumpversion</a>的工具。</p><p>您可以从PyPI安装Bumpversion：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install bumpversion</span><br></pre></td></tr></table></figure><p>要增加MINOR版本<code>reader</code>，您可以执行以下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bumpversion --current-version <span class="number">1.0</span><span class="number">.0</span> minor setup.py reader/__init__.py</span><br></pre></td></tr></table></figure><p>这将更改从版本号<code>1.0.0</code>以<code>1.1.0</code>两个<code>setup.py</code>和<code>reader/__init__.py</code>。为了简化命令，您还可以在配置文件中提供大多数信息。有关详细信息，请参见<a href="https://pypi.org/project/bumpversion/" target="_blank" rel="noopener">Bumpversion文档</a>。</p><h3 id="将文件添加到包中">将文件添加到包中</h3><p>有时，您的程序包中会包含不是源代码文件的文件。示例包括数据文件，二进制文件，文档以及（如我们在本项目中一样）配置文件。</p><p>要告知<code>setup()</code>要包含此类文件，请使用清单文件。对于许多项目，您无需担心清单，因为它<code>setup()</code>创建了一个清单，其中包括所有代码文件以及<code>README</code>文件。</p><p>如果需要更改清单，请创建一个清单模板，该模板必须命名为<code>MANIFEST.in</code>。该文件为要包含和排除的内容指定了规则：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include reader/*.txt</span><br></pre></td></tr></table></figure><p>此示例将包括<code>.txt</code>目录中的所有文件，该文件<code>reader</code>实际上是配置文件。请参阅<a href="https://docs.python.org/distutils/commandref.html#creating-a-source-distribution-the-sdist-command" target="_blank" rel="noopener">文档</a>以获取可用规则列表。</p><p>除了创建之外<code>MANIFEST.in</code>，还需要告诉<code>setup()</code>您<a href="https://python-packaging.readthedocs.io/en/latest/non-code-files.html" target="_blank" rel="noopener">复制这些非代码文件</a>。这是通过将<code>include_package_data</code>参数设置为来完成的<code>True</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setup(</span><br><span class="line">    ...</span><br><span class="line">    include_package_data=<span class="literal">True</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>该<code>include_package_data</code>参数控制在安装软件包时是否复制非代码文件。</p><h2 id="发布到pypi">发布到PyPI</h2><p>您的包裹终于准备就绪，可以与您的计算机外部世界见面！在本节中，您将看到如何实际将软件包上传到PyPI。</p><p>如果您尚未在PyPI上拥有帐户，那么现在该创建一个<a href="https://pypi.org/account/register/" target="_blank" rel="noopener">帐户了：在PyPI上注册您的帐户</a>。在使用它时，还应该<a href="https://test.pypi.org/manage/projects/" target="_blank" rel="noopener">在TestPyPI上注册一个帐户</a>。TestPyPI非常有用，因为如果您搞砸了，可以尝试发布软件包的所有步骤，而不会造成任何后果。</p><p>要将软件包上传到PyPI，您将使用一个名为<a href="https://twine.readthedocs.io/" target="_blank" rel="noopener">Twine</a>的工具。您可以照常使用Pip安装Twine：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install twine</span><br></pre></td></tr></table></figure><p>使用Twine非常简单，您将很快看到如何使用它来检查和发布您的软件包。</p><h3 id="建立你的包裹">建立你的包裹</h3><p>PyPI上的软件包不作为纯源代码分发。而是将它们包装到分发包中。分发程序包最常见的格式是源档案和<a href="https://wheel.readthedocs.io/en/stable/" target="_blank" rel="noopener">Python wheel</a>。</p><p>源归档文件由您的源代码和包装在一个<a href="https://en.wikipedia.org/wiki/Tar_%28computing%29" target="_blank" rel="noopener"><code>tar</code>文件中的</a>所有支持文件组成。同样，轮子实际上是包含您的代码的zip存档。与源归档文件相反，该转轮包括任何可以使用的扩展名。</p><p>要为您的包裹创建一个源档案和一个转轮，您可以运行以下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python setup.py sdist bdist_wheel</span><br></pre></td></tr></table></figure><p>这将在一个新创建的<code>dist</code>目录中创建两个文件，一个源档案和一个转轮：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reader/</span><br><span class="line">│</span><br><span class="line">└── dist/</span><br><span class="line">    ├── realpython_reader<span class="number">-1.0</span><span class="number">.0</span>-py3-none-any.whl</span><br><span class="line">    └── realpython-reader<span class="number">-1.0</span><span class="number">.0</span>.tar.gz</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>在Windows上，<code>.zip</code>默认情况下，源归档文件将是一个文件。您可以<a href="https://python.readthedocs.io/en/stable/distutils/sourcedist.html" target="_blank" rel="noopener">使用<code>--format</code>命令行选项选择</a>源归档的格式。</p><p>您可能想知道如何<code>setup.py</code>知道如何处理<code>sdist</code>and <code>bdist_wheel</code>参数。如果你<a href="https://realpython.com/pypi-publish-python-package/#configuring-your-package" target="_blank" rel="noopener">回头看看</a>如何<code>setup.py</code>被实现的，有没有提及<code>sdist</code>，<code>bdist_wheel</code>或任何其他命令行参数。</p><p>相反，所有命令行参数都在上游<a href="https://github.com/python/cpython/tree/master/Lib/distutils/command" target="_blank" rel="noopener"><code>distutils</code>标准库中实现</a>。您可以通过添加<code>--help-commands</code>选项列出所有可用的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python setup.py --help-commands</span><br><span class="line">Standard commands:</span><br><span class="line"> build             build everything needed to install</span><br><span class="line"> build_py          <span class="string">"build"</span> pure Python modules (copy to build directory)</span><br><span class="line"> build_ext         build C/C++ <span class="keyword">and</span> Cython extensions (compile/link to build directory)</span><br><span class="line">&lt; ... many more commands ...&gt;</span><br></pre></td></tr></table></figure><p>有关一个特定命令的信息，您可以执行类似的操作<code>python setup.py sdist --help</code>。</p><h3 id="测试您的包裹">测试您的包裹</h3><p>首先，您应检查新建的分发程序包是否包含所需的文件。在Linux和macOS上，您应该能够<code>tar</code>如下列出源档案的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ tar tzf realpython-reader<span class="number">-1.0</span><span class="number">.0</span>.tar.gz</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/setup.cfg</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/README.md</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/reader/</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/reader/feed.py</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/reader/__init__.py</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/reader/viewer.py</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/reader/__main__.py</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/reader/config.txt</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/PKG-INFO</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/setup.py</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/MANIFEST.<span class="keyword">in</span></span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/realpython_reader.egg-info/</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/realpython_reader.egg-info/SOURCES.txt</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/realpython_reader.egg-info/requires.txt</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/realpython_reader.egg-info/dependency_links.txt</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/realpython_reader.egg-info/PKG-INFO</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/realpython_reader.egg-info/entry_points.txt</span><br><span class="line">realpython-reader<span class="number">-1.0</span><span class="number">.0</span>/realpython_reader.egg-info/top_level.txt</span><br></pre></td></tr></table></figure><p>在Windows上，您可以使用<a href="https://www.7-zip.org/" target="_blank" rel="noopener">7-zip之</a>类的实用程序来查看相应<code>zip</code>文件的内部。</p><p>您应该看到列出了所有源代码，以及已经创建的一些新文件，其中包含您在中提供的信息<code>setup.py</code>。特别是，请确保包括所有子包和支持文件。</p><p>您也可以通过解压缩轮子来查看轮子内部，就好像它是一个zip文件一样。但是，如果您的源归档文件包含您期望的文件，则转轮也应该很好。</p><p>较新版本的Twine（<code>1.12.0</code>及更高版本）还可以检查您的包装说明可在PyPI上正确呈现。您可以<code>twine check</code>在中创建的文件上运行<code>dist</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ twine check dist/*</span><br><span class="line">Checking distribution dist/realpython_reader<span class="number">-1.0</span><span class="number">.0</span>-py3-none-any.whl: Passed</span><br><span class="line">Checking distribution dist/realpython-reader<span class="number">-1.0</span><span class="number">.0</span>.tar.gz: Passed</span><br></pre></td></tr></table></figure><p>虽然它不能解决您可能遇到的所有问题，但是例如，它将使您知道使用的内容类型是否错误。</p><h3 id="上载您的包裹">上载您的包裹</h3><p>现在，您可以将包实际上传到PyPI了。为此，您将再次使用“ Twine”工具，告诉它上载已构建的分发程序包。首先，您应该上传到<a href="https://packaging.python.org/guides/using-testpypi/" target="_blank" rel="noopener">TestPyPI</a>以确保一切正常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ twine upload --repository-url https://test.pypi.org/legacy/ dist/*</span><br></pre></td></tr></table></figure><p>Twine会询问您您的用户名和密码。</p><p><strong>注意：</strong>如果您以<code>reader</code>软件包为例按照本教程进行操作，则先前的命令可能会失败，并显示一条消息，提示您不允许上载到<code>realpython-reader</code>项目。</p><p>您可以将<code>name</code>in 更改为<code>setup.py</code>唯一的内容，例如<code>test-your-username</code>。然后再次构建项目，并将新建的文件上传到TestPyPI。</p><p>如果上传成功，您可以快速转到<a href="https://test.pypi.org/" target="_blank" rel="noopener">TestPyPI</a>，向下滚动并查看在新版本中自豪地显示的项目！单击您的包裹，并确保一切正常。</p><p>如果您一直在使用该<code>reader</code>软件包，那么教程将在此处结束！尽管您可以随意使用TestPyPI，但不应将虚拟包上传到PyPI进行测试。</p><p>但是，如果您要发布自己的软件包，那么此刻终于来临！完成所有准备工作后，最后一步很短：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ twine upload dist/*</span><br></pre></td></tr></table></figure><p>根据要求提供您的用户名和密码。而已！</p><p>前往<a href="https://pypi.org/" target="_blank" rel="noopener">PyPI</a>并查找您的包裹。您可以通过<a href="https://pypi.org/search/" target="_blank" rel="noopener">搜索</a>，查看“ <a href="https://pypi.org/manage/projects/" target="_blank" rel="noopener"><em>您的项目”</em>页面</a>或直接转到项目的URL：<a href="https://pypi.org/project/realpython-reader/" target="_blank" rel="noopener">pypi.org/project/your-package-name/</a>来找到它。</p><p>恭喜你！您的软件包已在PyPI上发布！</p><h3 id="pip-install-您的包裹"><code>pip install</code> 您的包裹</h3><p>花一点时间沐浴在PyPI网页的蓝色光芒中，（当然）向您的朋友吹牛。</p><p>然后再次打开一个终端。还有一个更大的回报！</p><p>将您的软件包上传到PyPI后，您还可以通过以下方式进行安装<code>pip</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install your-package-name</span><br></pre></td></tr></table></figure><p>替换<code>your-package-name</code>为您为软件包选择的名称。例如，要安装<code>reader</code>软件包，您可以执行以下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install realpython-reader</span><br></pre></td></tr></table></figure><p>看到自己安装的代码<code>pip</code>是一种美妙的感觉！</p><h2 id="其他有用的工具">其他有用的工具</h2><p>在总结之前，还有一些其他的工具对于创建和发布Python软件包非常有用。</p><h3 id="虚拟环境">虚拟环境</h3><p>在本指南中，我们没有讨论虚拟环境。当使用不同的项目时，虚拟环境非常有用，每个项目都有各自不同的要求和依赖性。</p><p>有关更多信息，请参见以下指南：</p><ul><li><a href="https://realpython.com/python-virtual-environments-a-primer" target="_blank" rel="noopener">Python虚拟环境：入门</a></li><li><a href="https://realpython.com/pipenv-guide" target="_blank" rel="noopener">Pipenv：新Python打包工具指南</a></li><li><a href="https://realpython.com/products/managing-python-dependencies/" target="_blank" rel="noopener">使用Pip和虚拟环境管理Python依赖关系</a></li></ul><p>特别是，在最小的虚拟环境中测试软件包很有用，以确保在<code>setup.py</code>文件中包含所有必需的依赖项。</p><h3 id="切碎机">切碎机</h3><p>开始使用项目的一种好方法是使用<a href="https://cookiecutter.readthedocs.io/" target="_blank" rel="noopener">Cookiecutter</a>。它通过基于模板询问几个问题来设置您的项目。<a href="https://cookiecutter.readthedocs.io/en/latest/README.html#a-pantry-full-of-cookiecutters" target="_blank" rel="noopener">可以使用许多不同的模板</a>。</p><p>首先，请确保您的系统上安装了Cookiecutter。您可以从PyPI安装它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install cookiecutter</span><br></pre></td></tr></table></figure><p>作为示例，我们将使用<a href="https://github.com/kragniz/cookiecutter-pypackage-minimal" target="_blank" rel="noopener">pypackage-minimal</a>模板。要使用模板，请给Cookiecutter指向模板的链接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cookiecutter https://github.com/kragniz/cookiecutter-pypackage-minimal</span><br><span class="line">author_name [Louis Taylor]: Real Python</span><br><span class="line">author_email [louis@kragniz.eu]: office@realpython.com</span><br><span class="line">package_name [cookiecutter_pypackage_minimal]: realpython-reader</span><br><span class="line">package_version [<span class="number">0.1</span><span class="number">.0</span>]:</span><br><span class="line">package_description [...]: Read Real Python tutorials</span><br><span class="line">package_url [...]: https://github.com/realpython/reader</span><br><span class="line">readme_pypi_badge [<span class="literal">True</span>]:</span><br><span class="line">readme_travis_badge [<span class="literal">True</span>]: <span class="literal">False</span></span><br><span class="line">readme_travis_url [...]:</span><br></pre></td></tr></table></figure><p>在回答了一系列问题之后，Cookiecutter设置您的项目。在此示例中，模板创建了以下文件和目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">realpython-reader/</span><br><span class="line">│</span><br><span class="line">├── realpython-reader/</span><br><span class="line">│   └── __init__.py</span><br><span class="line">│</span><br><span class="line">├── tests/</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── test_sample.py</span><br><span class="line">│</span><br><span class="line">├── README.rst</span><br><span class="line">├── setup.py</span><br><span class="line">└── tox.ini</span><br></pre></td></tr></table></figure><p><a href="https://cookiecutter.readthedocs.io/" target="_blank" rel="noopener">Cookiecutter的文档</a>内容广泛，包括一长串可用的cookiecutter，以及有关如何创建自己的模板的教程。</p><h3 id="掠过">掠过</h3><p><a href="https://www.pypa.io/en/latest/history/" target="_blank" rel="noopener">Python打包的历史</a>非常混乱。一种<a href="https://www.python.org/dev/peps/pep-0518/#rationale" target="_blank" rel="noopener">普遍的批评</a>是，使用可执行文件之类<code>setup.py</code>的配置信息并不理想。</p><p><a href="https://www.python.org/dev/peps/pep-0518/" target="_blank" rel="noopener">PEP 518</a>定义了一个替代方案：使用一个名为的文件<code>pyproject.toml</code>代替。该<a href="https://github.com/toml-lang/toml" target="_blank" rel="noopener">TOML格式</a>是一个简单的配置文件格式：</p><blockquote><p>[…] it is human-usable (unlike JSON), it is flexible enough (unlike configparser), stems from a standard (also unlike configparser), and it is not overly complex (unlike YAML). (<a href="https://www.python.org/dev/peps/pep-0518/#file-format" target="_blank" rel="noopener">Source</a>)</p></blockquote><p>虽然PEP 518已经使用了几年，但 <code>pyproject.toml</code> 标准工具尚未完全支持该配置文件。</p><p>但是，有一些基于的新工具可以发布到PyPI <code>pyproject.toml</code>。这样的工具就是<a href="https://flit.readthedocs.io/" target="_blank" rel="noopener">Flit</a>，这是一个很棒的小项目，可轻松发布简单的Python包。Flit不支持高级软件包，例如创建C扩展的软件包。</p><p>您可以<code>pip install flit</code>，然后按如下所示开始使用它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ flit init</span><br><span class="line">Module name [reader]:</span><br><span class="line">Author []: Real Python</span><br><span class="line">Author email []: office@realpython.com</span><br><span class="line">Home page []: https://github.com/realpython/reader</span><br><span class="line">Choose a license (see http://choosealicense.com/ <span class="keyword">for</span> more info)</span><br><span class="line"><span class="number">1</span>\. MIT - simple <span class="keyword">and</span> permissive</span><br><span class="line"><span class="number">2</span>\. Apache - explicitly grants patent rights</span><br><span class="line"><span class="number">3</span>\. GPL - ensures that code based on this <span class="keyword">is</span> shared <span class="keyword">with</span> the same terms</span><br><span class="line"><span class="number">4</span>\. Skip - choose a license later</span><br><span class="line">Enter <span class="number">1</span><span class="number">-4</span> [<span class="number">1</span>]:</span><br><span class="line"></span><br><span class="line">Written pyproject.toml; edit that file to add optional extra info.</span><br></pre></td></tr></table></figure><p>该<code>flit init</code>命令将<code>pyproject.toml</code>根据您对几个问题的答案创建文件。使用该文件之前，您可能需要稍微对其进行编辑。对于该<code>reader</code>项目，<code>pyproject.toml</code>Flit文件最终看起来如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[build-system]</span><br><span class="line">requires = [<span class="string">"flit"</span>]</span><br><span class="line">build-backend = <span class="string">"flit.buildapi"</span></span><br><span class="line"></span><br><span class="line">[tool.flit.metadata]</span><br><span class="line">module = <span class="string">"reader"</span></span><br><span class="line">dist-name = <span class="string">"realpython-reader"</span></span><br><span class="line">description-file = <span class="string">"README.md"</span></span><br><span class="line">author = <span class="string">"Real Python"</span></span><br><span class="line">author-email = <span class="string">"office@realpython.com"</span></span><br><span class="line">home-page = <span class="string">"https://github.com/realpython/reader"</span></span><br><span class="line">classifiers = [</span><br><span class="line"> <span class="string">"License :: OSI Approved :: MIT License"</span>,</span><br><span class="line"> <span class="string">"Programming Language :: Python :: 3"</span>,</span><br><span class="line"> <span class="string">"Programming Language :: Python :: 3.7"</span>,</span><br><span class="line">]</span><br><span class="line">requires-python = <span class="string">"&gt;=3.7"</span></span><br><span class="line">requires = [<span class="string">"feedparser"</span>, <span class="string">"html2text"</span>]</span><br><span class="line"></span><br><span class="line">[tool.flit.scripts]</span><br><span class="line">realpython = <span class="string">"reader.__main__:main"</span></span><br></pre></td></tr></table></figure><p>您应该从我们的原始物品中识别出大多数物品<code>setup.py</code>。但是要注意的一件事是，<code>version</code>并且<code>description</code>缺少。这不是一个错误。Flit实际上通过使用<code>__version__</code>和<code>__init__.py</code>文件中定义的docstring 自己找出了这些。<a href="https://flit.readthedocs.io/" target="_blank" rel="noopener">Flit的文档</a>解释了有关<code>pyproject.toml</code>文件的所有内容。</p><p>Flit可以构建您的包，甚至将其发布到PyPI。要构建您的软件包，只需执行以下操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flit build</span><br></pre></td></tr></table></figure><p>就像<code>python setup.py sdist bdist_wheel</code>之前一样，这将创建一个源存档和一个转盘。要将软件包上传到PyPI，您可以像以前一样使用Twine。但是，您也可以直接使用Flit：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flit publish</span><br></pre></td></tr></table></figure><p>如果需要 <code>publish</code>，该命令将构建您的软件包，然后将文件上传到PyPI，并在必要时提示您输入用户名和密码。</p><p>要了解Flit的实际应用，请查看EuroSciPy 2017 的<a href="https://www.youtube.com/watch?v=qTgk2DUM6G0&amp;t=11m50s" target="_blank" rel="noopener">2分钟闪电演讲</a>。Flit <a href="https://flit.readthedocs.io/" target="_blank" rel="noopener">文档</a>是获取更多信息的重要资源。Brett Cannon的<a href="https://snarky.ca/a-tutorial-on-python-package-building/" target="_blank" rel="noopener">打包PyPI的Python代码</a>的<a href="https://snarky.ca/a-tutorial-on-python-package-building/" target="_blank" rel="noopener">教程</a>包括有关Flit的部分。</p><h3 id="诗歌poetry">诗歌（poetry）</h3><p><a href="https://poetry.eustace.io/" target="_blank" rel="noopener">诗歌（poetry）</a>是可以用来构建和上传软件包的另一种工具。它与Flit非常相似，尤其是对于我们在这里要看的东西。</p><p>使用诗歌之前，需要先安装它。也有可能<code>pip install poetry</code>。但是，<a href="https://poetry.eustace.io/docs/#installation" target="_blank" rel="noopener">作者建议</a>您使用自定义安装脚本来避免潜在的依赖冲突。请参阅<a href="https://poetry.eustace.io/docs/#installation" target="_blank" rel="noopener">文档</a>以获取安装说明。</p><p>安装了Poetry之后，您可以通过以下<code>init</code>命令开始使用它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ poetry init</span><br><span class="line"></span><br><span class="line">This command will guide you through creating your pyproject.toml config.</span><br><span class="line"></span><br><span class="line">Package name [code]: realpython-reader</span><br><span class="line">Version [<span class="number">0.1</span><span class="number">.0</span>]: <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">Description []: Read the latest Real Python tutorials</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这将<code>pyproject.toml</code>根据您对包裹问题的回答创建一个文件。不幸的是，《<code>pyproject.toml</code>弗里特》和《诗歌》中的实际规范有所不同。对于诗歌，<code>pyproject.toml</code>文件最终看起来如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[tool.poetry]</span><br><span class="line">name = <span class="string">"realpython-reader"</span></span><br><span class="line">version = <span class="string">"1.0.0"</span></span><br><span class="line">description = <span class="string">"Read the latest Real Python tutorials"</span></span><br><span class="line">readme = <span class="string">"README.md"</span></span><br><span class="line">homepage = <span class="string">"https://github.com/realpython/reader"</span></span><br><span class="line">authors = [<span class="string">"Real Python &lt;office@realpython.com&gt;"</span>]</span><br><span class="line">license = <span class="string">"MIT"</span></span><br><span class="line">packages = [&#123;include = <span class="string">"reader"</span>&#125;]</span><br><span class="line">include = [<span class="string">"reader/*.txt"</span>]</span><br><span class="line"></span><br><span class="line">[tool.poetry.dependencies]</span><br><span class="line">python = <span class="string">"&gt;=3.7"</span></span><br><span class="line">feedparser = <span class="string">"&gt;=5.2"</span></span><br><span class="line">html2text = <span class="string">"&gt;=2018.1"</span></span><br><span class="line"></span><br><span class="line">[tool.poetry.scripts]</span><br><span class="line">realpython = <span class="string">"reader.__main__:main"</span></span><br><span class="line"></span><br><span class="line">[build-system]</span><br><span class="line">requires = [<span class="string">"poetry&gt;=0.12"</span>]</span><br><span class="line">build-backend = <span class="string">"poetry.masonry.api"</span></span><br></pre></td></tr></table></figure><p>同样，您应该从的早期讨论中认识到所有这些项目<code>setup.py</code>。需要注意的一件事是，Poetry会根据许可证和您指定的Python版本自动添加分类器。诗歌还要求您明确说明依赖项的版本。实际上，依赖性管理是诗歌的长处之一。</p><p>就像Flit一样，Poetry可以构建软件包并将其上传到PyPI。该<code>build</code>命令创建一个源档案和一个轮子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry build</span><br></pre></td></tr></table></figure><p>这将在<code>dist</code>子目录中创建两个常用文件，您可以像以前一样使用Twine上载这些文件。您还可以使用“诗歌”发布到PyPI：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry publish</span><br></pre></td></tr></table></figure><p>这会将您的包上传到PyPI。除了构建和发布外，Poetry还可以在此过程的早期帮助您。类似于Cookiecutter，Poetry可以帮助您使用该<code>new</code>命令启动新项目。它还支持使用虚拟环境。有关所有详细信息，请参见<a href="https://poetry.eustace.io/docs/" target="_blank" rel="noopener">诗歌的文档</a>。</p><p>除了略有不同的配置文件外，Flit和Poetry的工作原理非常相似。诗歌的范围更广，因为它还旨在帮助进行依属关系管理，而弗利特（Flit）的历史已经更长了。安德鲁·平克汉姆（Andrew Pinkham）的文章《<a href="http://andrewsforge.com/article/python-new-package-landscape/" target="_blank" rel="noopener">Python的新包装</a>格局》涵盖了Flit和Poetry。诗歌是<a href="https://pythonbytes.fm/episodes/show/100/the-big-100-with-special-guests" target="_blank" rel="noopener">Python Bytes播客第100集</a>的特别主题之一。</p><h2 id="结论">结论</h2><p>您现在知道了如何准备项目并将其上传到PyPI，以便其他人可以安装和使用它。尽管您需要完成一些步骤，但是在PyPI上看到自己的软件包是很有意义的。让其他人发现您的项目很有用！</p><p>在本教程中，您已经看到发布自己的程序包所必需的步骤：</p><ul><li>为您的包裹找一个好名字</li><li>使用以下方式配置您的软件包 <code>setup.py</code></li><li>建立你的包裹</li><li>将您的包上传到PyPI</li></ul><p>此外，您还看到了一些用于发布程序包的新工具，这些工具使用新的<code>pyproject.toml</code>配置文件来简化过程。</p><p>如果您仍有疑问，请随时在下面的评论部分中提出。另外，<a href="https://packaging.python.org/" target="_blank" rel="noopener">Python打包机构</a>拥有比我们此处介绍的更多的信息。</p><p>原文：<a href="https://realpython.com/pypi-publish-python-package/" target="_blank" rel="noopener">How to Publish an Open-Source Python Package to PyPI</a><br />作者：<a href="https://realpython.com/team/gahjelle/" target="_blank" rel="noopener">About Geir Arne Hjelle</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/22/pip/How-to-publish-an-open-source-Python-package-to-PyPI_Watermark.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;本教程有一个由 Real Python 团队创建的相关视频课程。与书面教程一起观看，以加深您的理解：如何将自己的 Python 包发布到 PyPI 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://2020.iosdevlog.com/categories/code/"/>
    
    
      <category term="Python" scheme="https://2020.iosdevlog.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>最有效的 Python 项目源码阅读方式</title>
    <link href="https://2020.iosdevlog.com/2020/03/21/pylint/"/>
    <id>https://2020.iosdevlog.com/2020/03/21/pylint/</id>
    <published>2020-03-21T14:54:29.000Z</published>
    <updated>2020-03-21T15:56:32.036Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/21/pylint/pylint.png" /></p><p>Pylint - Star your Python code!</p><a id="more"></a><p>众所周知，目前（2020年）人工智能项目大部分代码是使用 <code>Python</code> 语言编写的。</p><p>在发 <code>Paper</code> 的学术界有 <code>Pytorch</code>；在工业界部署 <code>First</code> 的工业界，这两个框架已经占据了深度学习的中心地位。</p><p>在机器学习领域有包含几乎所有常用机器学习算法的开源库：<code>sklean</code>。</p><p>如果遇到问题，找开源代码是参考是最简捷的方案。</p><p>目前大部分的人工智能相关项目的源码都是合适 <code>Python</code> 编写的，如何快速阅读这些源码呢？</p><p>这里推荐一套最有效的阅读 <code>Python</code> 源码的方式。</p><ol type="1"><li>下载相关源码：推荐去 <code>GitHub</code> 上下载，也可以用 <code>Chrome</code> 插件看</li><li>查看 <code>README.md</code> 和相关说明文档</li><li>参考 <code>Tutorials</code> 将代码跑起来</li><li>利用 <a href="https://www.pylint.org" target="_blank" rel="noopener">Pyreverse 包含在 Pypylint</a> 生成项目框架图</li><li>找到需要参考的代码，修改</li></ol><p>下面介绍一下如何生成 <code>manim</code> 项目框架图</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pylint</span></span><br><span class="line">pip install pylint</span><br><span class="line"><span class="comment"># touch ....../__init__.py</span></span><br><span class="line">pyreverse -A -o png -p manimlib manim/manimlib</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/21/pylint/pylint.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Pylint - Star your Python code!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://2020.iosdevlog.com/categories/Python/"/>
    
    
      <category term="Code" scheme="https://2020.iosdevlog.com/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>《统计学习方法》第 14 章 聚类方法 KMeans</title>
    <link href="https://2020.iosdevlog.com/2020/03/20/kmeans/"/>
    <id>https://2020.iosdevlog.com/2020/03/20/kmeans/</id>
    <published>2020-03-20T15:48:06.000Z</published>
    <updated>2020-03-20T15:52:10.458Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/20/kmeans/kmeans.gif" /></p><a id="more"></a><h2 id="k-均值聚类">k-均值聚类</h2><p>n 个样本分到 k 个不同的类或簇，每个样本到其所属类的中心的距离最小。</p><p>每个样本只能属于一个类，所有 <strong>k-均值聚类</strong> 是 <strong>硬聚类</strong>。</p><h3 id="模型">模型</h3><ul><li>k &lt; n</li></ul><p><span class="math display">\[G_{i} \cap G_{j} = \varnothing, \bigcup_{i=1}^{k}G_{i} = X\]</span></p><!--more--><h3 id="策略">策略</h3><ul><li>距离： 欧式距离</li><li>损失函数：样本与所属类的中心的距离总保</li><li>NP 困难问题</li></ul><h3 id="算法">算法</h3><p>目标函数极小化</p><ol type="1"><li>初始化，随机取 $ k $ 个样本做中心</li><li>对样本进行聚类，计算样本到类中心距离，每个样本指派到与其最近的中心的类</li><li>计算新的类中心。对聚类结果计算样本的均值，做为新的类中心</li><li>如果迭代收敛或符合停止条件，输出。否则，令 $ t = t + 1 $ ，返回 2</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X)</span>:</span></span><br><span class="line">    self._setup_input(X)</span><br><span class="line">    n_samples, _ = X.shape</span><br><span class="line">    <span class="comment"># 从 X 中随机获取 k 个元素做中心</span></span><br><span class="line">    self._centers = np.array(</span><br><span class="line">        random.sample(list(np.unique(X, axis=<span class="number">0</span>)), self.k))</span><br><span class="line"></span><br><span class="line">    old_clusters = <span class="literal">None</span></span><br><span class="line">    n_iters = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        new_clusters = [self._min_k(x) <span class="keyword">for</span> x <span class="keyword">in</span> X]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> new_clusters == old_clusters:</span><br><span class="line">            print(<span class="string">"Training finished after &#123;n_iters&#125; iterations!"</span>.format(n_iters=n_iters))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        old_clusters = new_clusters</span><br><span class="line">        n_iters += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> cluster_i <span class="keyword">in</span> range(self.k):</span><br><span class="line">            <span class="comment"># 计算新的中心</span></span><br><span class="line">            points_idx = np.where(np.array(new_clusters) == cluster_i)</span><br><span class="line">            xi = X[points_idx]</span><br><span class="line">            self._centers[cluster_i] = xi.mean(axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        self._centers_list.append(np.copy(self._centers))</span><br></pre></td></tr></table></figure><p>源码：<a href="https://github.com/iOSDevLog/slmethod" target="_blank" rel="noopener">https://github.com/iOSDevLog/slmethod</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/20/kmeans/kmeans.gif&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="统计学习方法" scheme="https://2020.iosdevlog.com/categories/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="ML" scheme="https://2020.iosdevlog.com/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>《统计学习方法》导论 anim</title>
    <link href="https://2020.iosdevlog.com/2020/03/19/slm/"/>
    <id>https://2020.iosdevlog.com/2020/03/19/slm/</id>
    <published>2020-03-19T15:35:11.000Z</published>
    <updated>2020-03-19T15:40:27.739Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/19/slm/Model.png" /></p><a id="more"></a><p><img src="https://2020.iosdevlog.com/2020/03/19/slm/Title.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/19/slm/SupervisedStep.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/19/slm/SupervisedLearning.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/19/slm/Statisc.png" /><br /><img src="https://2020.iosdevlog.com/2020/03/19/slm/End.png" /></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/19/slm/Model.png&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://2020.iosdevlog.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="manim" scheme="https://2020.iosdevlog.com/tags/manim/"/>
    
      <category term="统计学习方法" scheme="https://2020.iosdevlog.com/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>AI开发日志 代码资源等</title>
    <link href="https://2020.iosdevlog.com/2020/03/18/AIDevLog/"/>
    <id>https://2020.iosdevlog.com/2020/03/18/AIDevLog/</id>
    <published>2020-03-18T15:44:51.000Z</published>
    <updated>2020-03-18T16:30:41.907Z</updated>
    
    <content type="html"><![CDATA[<figure><img src="https://2020.iosdevlog.com/2020/03/18/AIDevLog/Issues.png" alt="" /><figcaption>Issues</figcaption></figure><a id="more"></a><h2 id="云社区">云<span class="math inline">\(^{+}\)</span>社区</h2><p>昨天收到一个来自 云<span class="math inline">\(^{+}\)</span>社区 的小礼物：一个公仔，一张腾讯视频 VIP 月卡。</p><p>我记得是从简书抓取的文章，我 <a href="https://www.jianshu.com/u/1577b98c62f4" target="_blank" rel="noopener">简书</a> 也有很长时间没有更新。</p><figure><img src="https://2020.iosdevlog.com/2020/03/18/AIDevLog/Tencent.png" alt="" /><figcaption>Tencent</figcaption></figure><h2 id="github-ios">GitHub iOS</h2><p>今天（2020-03-18）收到 GitHub 邮件，说 iOS 版正式发布了。</p><p>Thanks for signing up for the GitHub for mobile beta. The Android and iOS versions are now out of beta and generally available! Head over to Google Play or the App Store to start using the releases.</p><p><a href="https://github.us11.list-manage.com/track/click?u=9d7ced8c4bbd6c2f238673f0f&amp;id=8c49f60050&amp;e=ab5005febc" target="_blank" rel="noopener">Download for Android</a></p><p><a href="https://github.us11.list-manage.com/track/click?u=9d7ced8c4bbd6c2f238673f0f&amp;id=a5ee567519&amp;e=ab5005febc" target="_blank" rel="noopener">Download for iOS</a></p><h3 id="with-github-for-mobile-you-can">With GitHub for mobile, you can: </h3><ul><li><strong>Organize tasks in a swipe:</strong> Get your inbox to zero in no time—swipe to finish a task or save the notification to return to it later.</li><li><strong>Give feedback and respond to issues:</strong> Respond to comments while you’re on the go.</li><li><strong>Review and merge pull requests:</strong> Merge and mark pull requests to breeze through your workflow, wherever you are.</li></ul><p><a href="https://github.us11.list-manage.com/track/click?u=9d7ced8c4bbd6c2f238673f0f&amp;id=69c429f973&amp;e=ab5005febc" target="_blank" rel="noopener">Learn more about GitHub for mobile</a></p><figure><img src="https://2020.iosdevlog.com/2020/03/18/AIDevLog/GitHub.png" alt="" /><figcaption>GitHub</figcaption></figure><p>下载体验后，<code>Issues</code> 里面发现 <a href="https://github.com/iOSDevLog/AIDevLog/" target="_blank" rel="noopener">AIDevLog</a> 里面我从 <a href="https://github.com/iOSDevLog/AIDevLog/projects" target="_blank" rel="noopener">Project</a> 生成的 <a href="https://github.com/iOSDevLog/AIDevLog/issues/10" target="_blank" rel="noopener">Issues</a> 已经是 10 个月前。</p><figure><img src="https://2020.iosdevlog.com/2020/03/18/AIDevLog/Projects.png" alt="" /><figcaption>Issues</figcaption></figure><h2 id="消失-10-个月的-aidevlog">消失 10 个月的 AIDevLog</h2><figure><img src="https://2020.iosdevlog.com/2020/03/18/AIDevLog/AIDevLog.png" alt="" /><figcaption>AIDevLog</figcaption></figure><ol type="1"><li>预备知识<ol type="1"><li><a href="https://github.com/iOSDevLog/AIDevLog/blob/master/Python%20基础/README.md" target="_blank" rel="noopener">Python 基础</a></li><li><a href="https://github.com/iOSDevLog/AIDevLog/blob/master/数学基础/README.md" target="_blank" rel="noopener">数学基础</a></li></ol></li><li>机器学习<ol type="1"><li><a href="https://github.com/iOSDevLog/AIDevLog/blob/master/统计学习方法/README.md" target="_blank" rel="noopener">统计学习方法</a></li><li><a href="https://github.com/iOSDevLog/AIDevLog/blob/master/西瓜书/README.md" target="_blank" rel="noopener">统计学习（西瓜书）</a></li><li><a href="https://github.com/iOSDevLog/AIDevLog/blob/master/机器学习实战/README.md" target="_blank" rel="noopener">机器学习实战</a></li></ol></li><li>深度学习<ol type="1"><li><a href="https://github.com/iOSDevLog/AIDevLog/blob/master/花书/README.md" target="_blank" rel="noopener">深度学习（花书）</a></li><li><a href="https://github.com/iOSDevLog/AIDevLog/blob/master/Tensorflow/README.md" target="_blank" rel="noopener">Tensorflow</a></li><li><a href="https://github.com/iOSDevLog/AIDevLog/blob/master/PyTorch/README.md" target="_blank" rel="noopener">PyTorch</a></li><li><a href="https://github.com/iOSDevLog/AIDevLog/blob/master/计算机视觉/README.md" target="_blank" rel="noopener">CS231n: 计算机视觉</a></li><li><a href="https://github.com/iOSDevLog/AIDevLog/blob/master/自然语言处理/README.md" target="_blank" rel="noopener">CS224n: 自然语言处理</a></li></ol></li><li>强化学习<ol type="1"><li><a href="https://github.com/iOSDevLog/AIDevLog/blob/master/简易%20AlphaGo/README.md" target="_blank" rel="noopener">简易 AlphaGo</a></li></ol></li><li>竞赛<ol type="1"><li><a href="https://github.com/iOSDevLog/AIDevLog/blob/master/Kaggle/README.md" target="_blank" rel="noopener">Kaggle</a></li></ol></li></ol><h3 id="进度">进度</h3><p><a href="https://github.com/iOSDevLog/AIDevLog/projects?query=is%3Aopen+sort%3Aname-asc" target="_blank" rel="noopener">https://github.com/iOSDevLog/AIDevLog/projects</a></p><h3 id="联系方式">联系方式</h3><p>网站: <a href="https://2019.iosdevlog.com/" target="_blank" rel="noopener">http://2019.iosdevlog.com/</a></p><p>GitHub: <a href="https://github.com/iOSDevLog/AIDevLog" target="_blank" rel="noopener">https://github.com/iOSDevLog/AIDevLog</a></p><blockquote><p>不积跬步，无以至千里；不积小流，无以成江海</p></blockquote><p>——荀子《劝学篇》</p><p>计划做的再好，没有去实施也终究是计划。</p><p>明日开始在公众号里面更新。</p>]]></content>
    
    <summary type="html">
    
      &lt;figure&gt;
&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/18/AIDevLog/Issues.png&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Issues&lt;/figcaption&gt;
&lt;/figure&gt;
    
    </summary>
    
    
      <category term="game" scheme="https://2020.iosdevlog.com/categories/game/"/>
    
    
      <category term="Godot" scheme="https://2020.iosdevlog.com/tags/Godot/"/>
    
  </entry>
  
  <entry>
    <title>微积分的本质（Essence of calculus)</title>
    <link href="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/"/>
    <id>https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/</id>
    <published>2020-03-17T07:30:34.000Z</published>
    <updated>2020-03-17T15:44:45.779Z</updated>
    
    <content type="html"><![CDATA[<figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/1.png" alt="" /><figcaption>Essence of calculus</figcaption></figure><a id="more"></a><h2 id="概论">01. 概论</h2><p>圆的面积</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Circle.png" alt="" /><figcaption>Circle</figcaption></figure><h2 id="导数的悖论">02. 导数的悖论</h2><p>微积分之父</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Fathers_of_Calculus.png" alt="" /><figcaption>Fathers_of_Calculus</figcaption></figure><p>汽车</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/dt.png" alt="" /><figcaption>dt</figcaption></figure><h2 id="用几何来求导">03. 用几何来求导</h2><p>应用</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Applications.png" alt="" /><figcaption>Applications</figcaption></figure><p><span class="math inline">\(x^{2}\)</span></p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/2.png" alt="" /><figcaption>2</figcaption></figure><p><span class="math inline">\(x^{3}\)</span></p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/3.png" alt="" /><figcaption>3</figcaption></figure><p><span class="math inline">\(x^{n}\)</span></p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/n.png" alt="" /><figcaption>n</figcaption></figure><p><span class="math inline">\(\sin(x)\)</span></p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Sin.png" alt="" /><figcaption>Sin</figcaption></figure><p><span class="math inline">\(\frac{1}{x})\)</span></p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/x.png" /></p><h2 id="直观理解链式法则和乘积法则">04. 直观理解链式法则和乘积法则</h2><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Chain.png" alt="" /><figcaption>Chain</figcaption></figure><p>组合函数 求导</p><ul><li>加 Sum</li><li>乘 Product</li><li>复合 Composition</li></ul><p>加法法则</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Sum.png" alt="" /><figcaption>Sum</figcaption></figure><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Sum_rule.png" alt="" /><figcaption>Sum rule</figcaption></figure><p>乘积法则</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Product.png" alt="" /><figcaption>Product</figcaption></figure><p>复合：链式法则</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Composition.png" alt="" /><figcaption>Composition</figcaption></figure><h2 id="指数函数求导">05. 指数函数求导</h2><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/e.png" alt="" /><figcaption>e</figcaption></figure><p>2的指数 -&gt; e表示</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/ln2.png" alt="" /><figcaption>ln2</figcaption></figure><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/ln.png" alt="" /><figcaption>ln</figcaption></figure><h2 id="隐函数求导是怎么回事">06. 隐函数求导是怎么回事</h2><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/hide.png" alt="" /><figcaption>hide</figcaption></figure><p>变化落在函数曲线上</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/1_x.png" alt="" /><figcaption>1_x</figcaption></figure><h2 id="极限">07. 极限</h2><p>目标</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Goal.png" alt="" /><figcaption>Goal</figcaption></figure><p>导数定义</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Derivative.png" alt="" /><figcaption>Derivative</figcaption></figure><p><span class="math inline">\(dx\)</span> -&gt; <span class="math inline">\(h\)</span></p><ol type="1"><li>明确表示 <span class="math inline">\(h\)</span> 是一个普通的数，与无穷小无关</li><li><span class="math inline">\(dx\)</span> 就是无穷小量</li></ol><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Limit.png" alt="" /><figcaption>Limit</figcaption></figure><p><span class="math inline">\(\frac{0}{0}\)</span></p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/0_0.png" alt="" /><figcaption>0_0</figcaption></figure><h2 id="积分与微积分的基本定理">08. 积分与微积分的基本定理</h2><p><code>积分</code></p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Calculus.png" alt="" /><figcaption>Calculus</figcaption></figure><p><code>积分：求导的逆运算</code></p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Inverse.png" alt="" /><figcaption>Inverse</figcaption></figure><p><code>积分</code>：小量累积</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Integrates.png" alt="" /><figcaption>Integrates</figcaption></figure><p>微积分基本定理</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Theorem.png" alt="" /><figcaption>Theorem</figcaption></figure><p>原函数 &lt;==&gt; 导数</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Origin.png" alt="" /><figcaption>Origin</figcaption></figure><h2 id="面积与斜率有什么关系">09. 面积与斜率有什么关系</h2><p>平均值</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Average.png" alt="" /><figcaption>Average</figcaption></figure><h2 id="脚注-高阶导数">09脚注-高阶导数</h2><p>二阶导数</p><ul><li>导数的导数</li><li>变化量的变化量</li></ul><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Second_derivatives.png" alt="" /><figcaption>Second_derivatives</figcaption></figure><p>高阶导数</p><figure><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Higher_orders.png" alt="" /><figcaption>Higher_orders</figcaption></figure><h2 id="泰勒级数">10. 泰勒级数</h2><p>泰勒级数是利用函数某单个点的导数来近似这个点附近函数的值</p><p>用多项式 <code>近似</code> 其它函数</p><ul><li>好计算</li><li>好求导</li><li>好积分</li></ul><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/cos1.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/cos2.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/cos3.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/cos4.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/cos5.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/cos6.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/cos7.png" /></p><ol type="1"><li><span class="math inline">\(c_{0}\)</span>：多项式在 x=0 处与 cos(0) 相等</li><li><span class="math inline">\(c_{1}\)</span>：两者导数一致</li><li><span class="math inline">\(c_{2}\)</span>：两者二阶导数一致</li></ol><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/not_affect.png" /></p><p>控制</p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Control.png" /></p><p>泰勒多项式</p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Taylor.png" /></p><p>泰勒公式</p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Taylor_formula.png" /></p><p><span class="math inline">\(e^{x}\)</span> 泰勒多项式</p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Taylor_e.png" /></p><p>几何表示</p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Taylor_geometry.png" /></p><p>泰勒级数</p><ul><li>泰勒多项：有限多项</li><li>泰勒级数：无阶多项</li></ul><p>收敛</p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Converge.png" /></p><p>发散</p><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Diverges.png" /></p><h2 id="你在微积分课上学不到的知识">11. 你在微积分课上学不到的知识</h2><p><img src="https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/Knowledge.png" /></p><p>在这里观看完整的“微积分的本质”播放列表：&lt;hhttp://3b1b.co/calculus&gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;figure&gt;
&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/17/Essence-of-calculus/1.png&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;Essence of calculus&lt;/figcaption&gt;
&lt;/figure&gt;
    
    </summary>
    
    
      <category term="math" scheme="https://2020.iosdevlog.com/categories/math/"/>
    
    
      <category term="manim" scheme="https://2020.iosdevlog.com/tags/manim/"/>
    
      <category term="calculus" scheme="https://2020.iosdevlog.com/tags/calculus/"/>
    
      <category term="3b1b" scheme="https://2020.iosdevlog.com/tags/3b1b/"/>
    
  </entry>
  
  <entry>
    <title>线性代数的本质（Essence of linear algebra）</title>
    <link href="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/"/>
    <id>https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/</id>
    <published>2020-03-16T14:24:25.000Z</published>
    <updated>2020-03-17T08:31:41.862Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/1.png" /></p><a id="more"></a><h2 id="向量">向量</h2><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Vector.png" /></p><p>空间的一组基的严格定义是这样的:</p><blockquote><p>张成该空间的一个线性无关向量的集合</p></blockquote><ul><li>单个向量：箭头表示</li><li>多个向量：点表示</li></ul><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Vector3.png" /></p><h2 id="变换">变换</h2><p><span class="math display">\[变换 == 函数\]</span></p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Linear_transformation.png" /></p><p><span class="math display">\[y = f(x)\]</span></p><ul><li>IN: 向量(x)</li><li>OUT： 向量(y)</li></ul><h3 id="为什么叫-变换">为什么叫 <code>变换</code></h3><blockquote><p>因为使用“变换”是在暗示以特定方式来可视化这一输入-输出关系</p></blockquote><p>运动 =&gt; 向量的函数</p><h3 id="线性变换">线性变换</h3><ol type="1"><li>直线在变换后仍然保持为直线,不能有所弯曲</li><li>原点必须保持固定</li></ol><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/base.png" /></p><p>基向量</p><figure><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Matrix_multiplication.png" alt="" /><figcaption>直观</figcaption></figure><p>矩阵乘法</p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Composition.png" /></p><p>复合变换 -&gt; 复合函数</p><h2 id="行列式">行列式</h2><blockquote><p>线性变换改变面积的比例。</p></blockquote><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Determinant.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Det0.png" /></p><ul><li>行列式为 <span class="math inline">\(0\)</span> =&gt; 空间压缩到更小的维度</li><li>当空间定向改变的情况发生时,行列式为 <code>负</code></li></ul><h3 id="计算行列式">计算行列式</h3><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Det1.png" /></p><ul><li><span class="math inline">\(a\)</span>： <span class="math inline">\(x\)</span> 轴伸缩比例</li><li><span class="math inline">\(b\)</span>： 对角方向 拉伸/压缩 比例</li><li><span class="math inline">\(c\)</span>： 对角方向 拉伸/压缩 比例</li><li><span class="math inline">\(d\)</span>： <span class="math inline">\(y\)</span> 轴伸缩比例</li></ul><h3 id="二阶行列式">二阶行列式</h3><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Det2.png" /></p><h3 id="三阶行列式">三阶行列式</h3><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Det3.png" /></p><p>平行六面体的体积</p><h2 id="矩阵">矩阵</h2><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Matrix.png" /></p><p><span class="math inline">\(A\)</span> 代表变换矩阵</p><h3 id="逆矩阵">逆矩阵</h3><p>恒等变换：单位矩阵</p><p><span class="math display">\[A^{-1}A = I\]</span></p><p>逆乘以 <span class="math inline">\(A\)</span></p><ul><li><code>列空间</code>：矩阵的列所张成的空间</li><li><code>秩</code>：列空间的维数（变换后空间的维数）</li></ul><h3 id="矩阵乘法">矩阵乘法</h3><p>变换矩阵</p><ul><li><code>行</code>：变换后的独立坐标</li><li><code>列</code>：变换前的基向量</li><li><code>零空间/核</code>：变换后落在 <code>原点</code> 的向量的集合</li></ul><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/2to3.png" /></p><p>2 列 -&gt; 3 行<br />=&gt;<br />2 维 -&gt; 3 维</p><h2 id="点积数量积标量积">点积（数量积/标量积）</h2><blockquote><p>一种接受两个等长的数字序列（通常是坐标向量）、返回单个数字的代数运算</p></blockquote><ul><li>内积：两个笛卡尔坐标向量的点积常称为内积</li></ul><p>代数定义</p><p><span class="math display">\[\vec{a} \cdot \vec{b} = \sum_{i=1}^n a_ib_i = a_1b_1 + a_2b_2 + \cdots + a_nb_n\]</span></p><p><span class="math display">\[\vec{a} \cdot \vec{b} = \vec{a}\vec{b}^T\]</span></p><p>几何定义</p><p><span class="math display">\[\vec{a} \cdot \vec{b} = |\vec{a}| \, |\vec{b}| \cos \theta \;\]</span></p><ul><li><span class="math inline">\(|\vec{a}|\)</span>：模长</li><li><span class="math inline">\(\theta\)</span>：夹角</li></ul><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Dot_product_1.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Dot_product_2.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Dot_product.png" /></p><h2 id="叉积">叉积</h2><p>面积</p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Cross_product.png" /></p><p>求行列式</p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Det.png" /></p><p>方向（右手定则）</p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Cross_product_direction.png" /></p><h2 id="特征向量-和-特征值-eigenvectors-and-eigenvalues">特征向量 和 特征值 Eigenvectors and eigenvalues</h2><ul><li>特征向量：线性变换[a]之后，得到的新向量仍然与原来的向量保持在同一条直线上</li></ul><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Eigenvectors.png" /></p><ul><li>特征值：特征向量的长度在该线性变换下 <strong>缩放</strong> 的比例</li></ul><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Eigenvalue.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Eigenvectors_formula.png" /></p><ul><li>特征基：一组基向量（也是特征向量）构成的集合</li></ul><h2 id="抽象向量空间">抽象向量空间</h2><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Coordinate.png" /></p><p><code>函数</code> =&gt; 向量特性</p><figure><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Function_addition.png" alt="" /><figcaption>Addtion</figcaption></figure><figure><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Function_product.png" alt="" /><figcaption>Scaling</figcaption></figure><p>向量</p><figure><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Vector_Operation.png" alt="" /><figcaption>Vector_Operation</figcaption></figure><p>函数</p><figure><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Function_Operation.png" alt="" /><figcaption>Function_Operation</figcaption></figure><p>导数：函灵敏的线性变换</p><figure><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Derivative.png" alt="" /><figcaption>Derivative</figcaption></figure><p>线性</p><blockquote><p>线性变换保持向量 <em>加法</em> 运算和 <em>数乘</em> 运算</p></blockquote><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Linear.png" /></p><p>求导是线性的</p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Derivative_addition.png" /></p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Derivative_multiplication.png" /></p><p>基函数</p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Base_function.png" /></p><p>矩阵求导</p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Matrix_derivative.png" /></p><p>线性代数 vs 函数</p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Linear_function.png" /></p><p>向量空间</p><p>类似向量的事物</p><ul><li>箭头 （物理）</li><li>一组数 （计算机）</li><li>函数</li><li>...</li></ul><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Vector_Spaces.png" /></p><p>公理</p><p><img src="https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/Axioms.png" /></p><p>在这里观看完整的“线性代数的本质”播放列表：<a href="https://goo.gl/R1kBdb" target="_blank" rel="noopener" class="uri">https://goo.gl/R1kBdb</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/16/Essence-of-linear-algebra/1.png&quot; /&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="math" scheme="https://2020.iosdevlog.com/categories/math/"/>
    
    
      <category term="manim" scheme="https://2020.iosdevlog.com/tags/manim/"/>
    
      <category term="3b1b" scheme="https://2020.iosdevlog.com/tags/3b1b/"/>
    
      <category term="linear" scheme="https://2020.iosdevlog.com/tags/linear/"/>
    
  </entry>
  
  <entry>
    <title>机器学习算法之旅</title>
    <link href="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/"/>
    <id>https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/</id>
    <published>2020-03-15T13:49:49.000Z</published>
    <updated>2020-03-15T15:20:59.941Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/ensemble.png" /></p><p>最合适的线条组合的一个很好的例子。弱预测成员为灰色，组合预测为红色。</p><p>绘图来自Wikipedia，在公共领域获得许可。</p><a id="more"></a><p>在本文中，我们将浏览<strong><em>最流行的机器学习算法</em></strong>。</p><p>考察该领域的主要算法对了解可用的方法很有用。</p><p>有太多算法，当抛出算法名称时会感到不知所措，并且您应该只知道它们是什么以及它们适合什么位置。</p><p>我想给您提供两种方式来考虑和分类您在该领域可能遇到的算法。</p><ul><li>首先是按照<strong>学习风格</strong>对算法进行分组。</li><li>第二个是按形式或功能上的<strong>相似性</strong>将算法分组（例如将相似的动物分组在一起）。</li></ul><p>两种方法都是有用的，但是我们将着重于通过相似性进行算法分组，并浏览各种不同的算法类型。</p><p>阅读这篇文章后，您将对用于监督学习的最受欢迎的机器学习算法以及它们之间的关系有更好的了解。</p><p><a href="https://machinelearningmastery.com/master-machine-learning-algorithms/" target="_blank" rel="noopener">在我的新书中</a>（包括22个excel教程和示例），了解机器学习算法如何工作，包括kNN，决策树，朴素贝叶斯，SVM，集成等。</p><p>让我们开始吧。</p><h2 id="按学习风格分组的算法">按学习风格分组的算法</h2><p>算法可以根据其与经验或环境的交互作用或我们要调用输入数据的方式，以不同的方式对问题建模。</p><p>首先要考虑算法可以采用的学习方式，这在机器学习和人工智能教科书中很普遍。</p><p>一个算法只能有几种主要的学习方式或学习模型，我们将在此通过一些适合他们的算法和问题类型的示例进行介绍。</p><p>这种分类法或组织机器学习算法的方法很有用，因为它迫使您考虑输入数据的角色和模型准备过程，并选择最适合您问题的模型，以获得最佳结果。</p><h3 id="让我们看一下机器学习算法中的三种不同的学习风格">让我们看一下机器学习算法中的三种不同的学习风格：</h3><h4 id="监督学习"><strong>1.监督学习</strong></h4><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Supervised-Learning-Algorithms.png" /></p><p>输入数据称为训练数据，并且一次具有已知标签或结果，例如垃圾邮件/非垃圾邮件或股票价格。</p><p>通过训练过程来准备模型，其中需要进行预测，并在这些预测错误时进行校正。训练过程将继续进行，直到模型在训练数据上达到所需的准确性水平为止。</p><p>示例问题是 <strong>分类</strong> 和 <strong>回归</strong>。</p><p>示例算法包括：<strong>逻辑回归</strong> 和 <strong>反向传播神经网络</strong>。</p><h4 id="无监督学习"><strong>2.无监督学习</strong></h4><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Unsupervised-Learning-Algorithms.png" /></p><p>输入数据未标记，结果未知。</p><p>通过推导输入数据中存在的结构来准备模型。这可能是提取一般规则。可以通过数学过程来系统地减少冗余，也可以通过相似性组织数据。</p><p>示例问题包括 <strong>聚类</strong>，<strong>降维</strong> 和 <strong>关联规则学习</strong>。</p><p>示例算法包括：<strong>Apriori算法</strong> 和 <strong>K-Means</strong>。</p><h4 id="半监督学习"><strong>3.半监督学习</strong></h4><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Semi-supervised-Learning-Algorithms.png" /></p><p>输入数据是带标签和未带标签的示例的混合。</p><p>存在一个期望的预测问题，但是模型必须学习用于组织数据以及进行预测的结构。</p><p>示例问题是 <strong>分类</strong> 和 <strong>回归</strong>。</p><p>示例算法是对其他灵活方法的扩展，这些方法对如何建模未标记数据进行了假设。</p><h3 id="机器学习算法概述">机器学习算法概述</h3><p>处理数据以对业务决策进行建模时，最典型的情况是您使用有监督和无监督的学习方法。</p><p>目前最热门的话题是 <strong>图像分类</strong> 等领域的 <code>半监督</code> 学习方法，在这些领域中，大型数据集的示例很少。</p><h2 id="相似度分组算法">相似度分组算法</h2><p>算法通常在功能（工作方式）方面按相似性分组。例如，基于树的方法和基于神经网络的方法。</p><p>我认为这是对算法进行分组的最有用的方法，也是我们将在此处使用的方法。</p><p>这是一种有用的分组方法，但并不完美。仍然有一些算法可以很容易地适合多个类别，例如“学习矢量量化”既是神经网络启发性方法又是基于实例的方法。也有描述问题的同名类别和算法类别，例如回归和聚类。</p><p>我们可以通过两次列出算法或选择主观上 <em>最</em> 适合的组来处理这些情况。我喜欢后一种方法，即不重复算法以保持简单。</p><p>在本节中，我们列出了许多流行的机器学习算法，这些算法按照我们认为最直观的方式进行了分组。该列表在组或算法中都不是详尽无遗的，但我认为它是具有代表性的，对您了解土地状况将很有用。</p><blockquote><p><strong>请注意</strong>：用于分类和回归的算法有很大的偏见，这是您将遇到的两个最普遍的监督式机器学习问题。</p></blockquote><p>如果您知道某个算法或一组未列出的算法，请在注释中添加并与我们分享。让我们潜入。</p><h3 id="回归算法">回归算法</h3><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Regression-Algorithms.png" /></p><p>回归模型涉及对变量之间的关系进行建模，这些变量之间的关系使用模型进行的预测中的误差度量进行了迭代完善。</p><p>回归方法是统计工作的主力军，已被选入统计机器学习中。这可能会造成混淆，因为我们可以使用回归来指代问题的类别和算法的类别。确实，回归是一个过程。</p><p>最受欢迎的回归算法是：</p><ul><li>普通最小二乘回归（OLSR）</li><li>线性回归</li><li>逻辑回归</li><li>逐步回归</li><li>多元自适应回归样条（MARS）</li><li>局部估计的散点图平滑（LOESS）</li></ul><h3 id="基于实例的算法">基于实例的算法</h3><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Instance-based-Algorithms.png" /></p><p>基于实例的学习模型是一个决策问题，其中包含训练数据的实例或示例，这些实例或示例被认为对该模型很重要或需要。</p><p>这样的方法通常建立示例数据的数据库，并使用相似性度量将新数据与数据库进行比较，以便找到最佳匹配并做出预测。因此，基于实例的方法也称为获胜者通吃方法和基于内存的学习。重点放在存储实例的表示以及实例之间使用的相似性度量上。</p><p>最受欢迎的基于实例的算法是：</p><ul><li>k最近邻居（kNN）</li><li>学习矢量量化（LVQ）</li><li>自组织图（SOM）</li><li>本地加权学习（LWL）</li><li>支持向量机（SVM）</li></ul><h3 id="正则化算法">正则化算法</h3><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Regularization-Algorithms.png" /></p><p>对另一种方法（通常是回归方法）的扩展，该方法根据模型的复杂性对模型进行惩罚，而倾向于更易于泛化的简单模型。</p><p>我在这里单独列出了正则化算法，因为它们是对其他方法的流行，功能强大且通常简单的修改。</p><p>最受欢迎的正则化算法是：</p><ul><li>岭回归</li><li>最小绝对收缩和选择算子（LASSO）</li><li>弹性网</li><li>最小角度回归（LARS）</li></ul><h3 id="决策树算法">决策树算法</h3><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Decision-Tree-Algorithms.png" /></p><p>决策树方法构建了一个基于数据中属性的实际值制定的决策模型。</p><p>决策派生到树结构中，直到为给定记录做出预测决策为止。对决策树进行有关分类和回归问题的数据训练。决策树通常快速，准确，并且在机器学习中大受欢迎。</p><p>最受欢迎的决策树算法是：</p><ul><li>分类和回归树（CART）</li><li>迭代二叉树 3 代（ID3）</li><li>C4.5和C5.0（功能强大的方法的不同版本）</li><li>卡方自动互动检测（CHAID）</li><li>决策树桩</li><li>M5</li><li>条件决策树</li></ul><h3 id="贝叶斯算法">贝叶斯算法</h3><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Bayesian-Algorithms.png" /></p><p>贝叶斯方法是将贝叶斯定理明确应用于分类和回归等问题的方法。</p><p>最受欢迎的贝叶斯算法是：</p><ul><li>朴素贝叶斯</li><li>高斯朴素贝叶斯</li><li>多项式朴素贝叶斯</li><li>平均一依赖估计量（AODE）</li><li>贝叶斯信仰网络（BBN）</li><li>贝叶斯网络（BN）</li></ul><h3 id="聚类算法">聚类算法</h3><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Clustering-Algorithms.png" /></p><p>像回归一样，聚类描述问题的类别和方法的类别。</p><p>聚类方法通常通过建模方法（例如基于质心和层次的方法）进行组织。所有方法都涉及使用数据中的固有结构来最好地将数据组织成具有最大共性的组。</p><p>最受欢迎的聚类算法是：</p><ul><li>k均值 k-Means</li><li>k中位数 k-Medians</li><li>期望最大化（EM）</li><li>层次聚类</li></ul><h3 id="关联规则学习算法">关联规则学习算法</h3><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Assoication-Rule-Learning-Algorithms.png" /></p><p>关联规则学习方法提取的规则可以最好地解释数据中变量之间观察到的关系。</p><p>这些规则可以在组织可以利用的大型多维数据集中发现重要的商业上有用的关联。</p><p>最受欢迎的关联规则学习算法是：</p><ul><li>Apriori 算法</li><li>Eclat 算法</li></ul><h3 id="人工神经网络算法">人工神经网络算法</h3><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Artificial-Neural-Network-Algorithms.png" /></p><p>人工神经网络是受生物神经网络的结构和/或功能启发的模型。</p><p>它们是一类模式匹配，通常用于回归和分类问题，但实际上是一个巨大的子领域，由数百种算法和各种问题类型的变体组成。</p><p>请注意，由于该领域的迅速发展和普及，我将深度学习与神经网络分开了。在这里，我们关注更经典的方法。</p><p>最受欢迎的人工神经网络算法是：</p><ul><li>感知器</li><li>多层感知器（MLP）</li><li>反向传播</li><li>随机梯度下降</li><li>霍普菲尔德网络</li><li>径向基函数网络（RBFN）</li></ul><h3 id="深度学习算法">深度学习算法</h3><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Deep-Learning-Algorithms.png" /></p><p><a href="https://machinelearningmastery.com/what-is-deep-learning/" target="_blank" rel="noopener">深度学习</a>方法是对利用大量廉价计算的人工神经网络的一种现代更新。</p><p>他们关注的是构建更大，更复杂的神经网络，并且如上所述，许多方法都涉及标记的模拟数据（例如图像，文本）的超大型数据集。音频和视频。</p><p>最受欢迎的深度学习算法是：</p><ul><li>卷积神经网络（CNN）</li><li>递归神经网络（RNN）</li><li>长短期记忆网络（LSTM）</li><li>堆叠式自动编码器</li><li>深玻尔兹曼机（DBM）</li><li>深度信仰网络（DBN）</li></ul><h3 id="降维算法">降维算法</h3><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Dimensional-Reduction-Algorithms.png" /></p><p>像聚类方法一样，降维会寻找和利用数据中的固有结构，但是在这种情况下，将以无监督的方式或顺序使用较少的信息来汇总或描述数据。</p><p>这对于可视化尺寸数据或简化可以在监督学习方法中使用的数据很有用。这些方法中的许多方法都可以用于分类和回归。</p><ul><li>主成分分析（PCA）</li><li>主成分回归（PCR）</li><li>偏最小二乘回归（PLSR）</li><li>萨蒙地图</li><li>多维缩放（MDS）</li><li>投影追踪</li><li>线性判别分析（LDA）</li><li>混合判别分析（MDA）</li><li>二次判别分析（QDA）</li><li>弹性判别分析（FDA）</li></ul><h3 id="集成学习算法">集成学习算法</h3><p><img src="https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/Ensemble-Algorithms.png" /></p><p>集合方法是由多个较弱的模型组成的模型，这些模型经过独立训练，其预测以某种方式组合在一起以进行总体预测。</p><p>对于要组合哪些类型的弱学习者以及如何将它们组合在一起，需要付出很多努力。这是一类非常强大的技术，因此非常受欢迎。</p><ul><li>Boosting</li><li>Bootstrapped Aggregation (Bagging)</li><li>AdaBoost</li><li>加权平均值（混合）</li><li>堆叠泛化（堆叠）Stacked Generalization (Stacking)</li><li>梯度提升机（GBM）Gradient Boosting Machines (GBM)</li><li>梯度增强回归树（GBRT）Gradient Boosting Machines (GBM)</li><li>随机森林</li></ul><h3 id="其他机器学习算法">其他机器学习算法</h3><p>许多算法没有涵盖。</p><p>在机器学习过程中，我没有涉及特殊任务的算法，例如：</p><ul><li>特征选择算法</li><li>算法精度评估</li><li>绩效指标</li><li>优化算法</li></ul><p>我也没有涵盖来自机器学习专业子领域的算法，例如：</p><ul><li>计算智能（进化算法等）</li><li>计算机视觉（CV）</li><li>自然语言处理（NLP）</li><li>推荐系统</li><li>强化学习</li><li>图形模型</li><li>更多…</li></ul><p>这些可能会在以后的帖子中出现。</p><h2 id="机器学习算法的进一步阅读">机器学习算法的进一步阅读</h2><p>这次机器学习算法之旅旨在为您提供概述，以及有关如何将算法相互关联的一些想法。</p><p>我已经收集了一些资源，供您继续阅读算法。如果您有特定问题，请发表评论。</p><h3 id="机器学习算法的其他列表">机器学习算法的其他列表</h3><p>如果您有兴趣，还有很多其他的算法列表。以下是一些精选示例。</p><ul><li><a href="http://en.wikipedia.org/wiki/List_of_machine_learning_algorithms" target="_blank" rel="noopener">机器学习算法列表</a>：在Wikipedia上。尽管内容广泛，但我认为此列表或算法的组织并没有特别有用。</li><li><a href="http://en.wikipedia.org/wiki/Category:Machine_learning_algorithms" target="_blank" rel="noopener">机器学习算法类别</a>：也在Wikipedia上，比上面的Wikipedia很棒的列表稍微有用。它按字母顺序组织算法。</li><li><a href="http://cran.r-project.org/web/views/MachineLearning.html" target="_blank" rel="noopener">CRAN任务视图：机器学习和统计学习</a>：R中每个机器学习软件包所支持的所有软件包和所有算法的列表。它使您对现有内容以及人们日常使用的分析有扎实的感觉。</li><li><a href="http://www.cs.uvm.edu/~icdm/algorithms/index.shtml" target="_blank" rel="noopener">数据挖掘中的十大算法</a>：已<a href="http://link.springer.com/article/10.1007/s10115-007-0114-2" target="_blank" rel="noopener">发表的文章</a>，现在是一<a href="http://www.amazon.com/dp/1420089641?tag=inspiredalgor-20" target="_blank" rel="noopener">本有关最流行的数据挖掘算法的书</a>（会员链接）。另一种扎根但不太压倒性的方法可以让您深入学习。</li></ul><h3 id="如何学习机器学习算法">如何学习机器学习算法</h3><p>算法是机器学习的重要组成部分。这是我热衷的话题，并在此博客上写了很多。以下是一些可能会吸引您进一步阅读的精选帖子。</p><ul><li><a href="http://machinelearningmastery.com/how-to-learn-a-machine-learning-algorithm/" target="_blank" rel="noopener">如何学习任何机器学习算法</a>：一种可以使用“算法描述模板”来学习和理解任何机器学习算法的系统方法（我用这种方法写了<a href="http://cleveralgorithms.com/nature-inspired/index.html" target="_blank" rel="noopener">第一本书</a>）。</li><li><a href="http://machinelearningmastery.com/create-lists-of-machine-learning-algorithms/" target="_blank" rel="noopener">如何创建机器学习算法的目标列表</a>：如何创建自己的机器学习算法的系统列表，以开始处理下一个机器学习问题。</li><li><a href="http://machinelearningmastery.com/how-to-research-a-machine-learning-algorithm/" target="_blank" rel="noopener">如何研究机器学习算法</a>：您可以用来研究机器学习算法的系统方法（与上面列出的模板方法协同工作非常有效）。</li><li><a href="http://machinelearningmastery.com/how-to-investigate-machine-learning-algorithm-behavior/" target="_blank" rel="noopener">如何研究机器学习算法的行为</a>：可以通过对行为进行很小的研究并对其进行研究，从而了解机器学习算法如何工作的方法。研究不仅针对学者！</li><li><a href="http://machinelearningmastery.com/how-to-implement-a-machine-learning-algorithm/" target="_blank" rel="noopener">如何实施机器学习算法</a>：从头开始实施机器学习算法的过程，技巧和窍门。</li></ul><h3 id="如何运行机器学习算法">如何运行机器学习算法</h3><p>有时，您只想深入研究代码。以下是一些链接，您可以使用这些链接来运行机器学习算法，使用标准库对其进行编码或从头开始实施它们。</p><ul><li><a href="http://machinelearningmastery.com/how-to-get-started-with-machine-learning-algorithms-in-r/" target="_blank" rel="noopener">如何开始使用R中的机器学习算法</a>：链接到此站点上的大量代码示例，这些示例演示了R中的机器学习算法。</li><li><a href="http://machinelearningmastery.com/get-your-hands-dirty-with-scikit-learn-now/" target="_blank" rel="noopener">scikit-learn中的机器学习算法食谱</a>：一系列Python代码示例，展示了如何使用scikit-learn创建预测模型。</li><li><a href="http://machinelearningmastery.com/how-to-run-your-first-classifier-in-weka/" target="_blank" rel="noopener">如何在Weka中运行您的第一个分类器如何在Weka</a>：中运行第一个分类器的教程（<strong>无需任何代码！</strong>）。</li></ul><p>原文：<a href="https://machinelearningmastery.com/a-tour-of-machine-learning-algorithms/" target="_blank" rel="noopener">A Tour of Machine Learning Algorithms</a></p><p>作者：<a href="https://machinelearningmastery.com/author/jasonb/" target="_blank" rel="noopener" title="Posts by Jason Brownlee">Jason Brownlee</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/15/A-Tour-of-Machine-Learning-Algorithms/ensemble.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;最合适的线条组合的一个很好的例子。弱预测成员为灰色，组合预测为红色。&lt;/p&gt;
&lt;p&gt;绘图来自Wikipedia，在公共领域获得许可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="https://2020.iosdevlog.com/categories/AI/"/>
    
    
      <category term="ml" scheme="https://2020.iosdevlog.com/tags/ml/"/>
    
      <category term="algorithm" scheme="https://2020.iosdevlog.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>机器学习算法实现的简洁示例：MLAlgorithms</title>
    <link href="https://2020.iosdevlog.com/2020/03/15/MLAlgorithms/"/>
    <id>https://2020.iosdevlog.com/2020/03/15/MLAlgorithms/</id>
    <published>2020-03-15T13:03:07.000Z</published>
    <updated>2020-03-15T13:42:39.639Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/15/MLAlgorithms/1.jpg" /></p><p>Minimal and clean examples of machine learning algorithms implementations</p><p>介绍一个常用的机器学习算法的最小和简洁实现的集合：机器学习算法库 <a href="https://github.com/rushter/MLAlgorithms" target="_blank" rel="noopener" class="uri">https://github.com/rushter/MLAlgorithms</a>。</p><a id="more"></a><h2 id="为什么"><a href="https://github.com/rushter/MLAlgorithms#why" target="_blank" rel="noopener">为什么</a>？</h2><p>该项目面向想要学习ml算法的内部知识或从头开始实现它们的人们。</p><p>与优化的库相比，该代码更易于遵循和使用。</p><p>所有算法均使用 <code>numpy</code>，<code>scipy</code> 和 <code>autograd</code> 在 <code>Python</code> 中实现。</p><h2 id="实现"><a href="https://github.com/rushter/MLAlgorithms#implemented" target="_blank" rel="noopener">实现</a> ：</h2><ul><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/neuralnet" target="_blank" rel="noopener">深度学习（MLP，CNN，RNN，LSTM）</a></li><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/linear_models.py" target="_blank" rel="noopener">线性回归，逻辑回归</a></li><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/ensemble/random_forest.py" target="_blank" rel="noopener">随机森林</a></li><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/svm" target="_blank" rel="noopener">支持向量机（SVM），带有内核（线性，多项式，RBF）</a></li><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/kmeans.py" target="_blank" rel="noopener">K均值</a></li><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/gaussian_mixture.py" target="_blank" rel="noopener">高斯混合模型</a></li><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/knn.py" target="_blank" rel="noopener">K近邻</a></li><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/naive_bayes.py" target="_blank" rel="noopener">朴素贝叶斯</a></li><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/pca.py" target="_blank" rel="noopener">主成分分析（PCA）</a></li><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/fm.py" target="_blank" rel="noopener">分解机</a></li><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/rbm.py" target="_blank" rel="noopener">受限玻尔兹曼机（RBM）</a></li><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/tsne.py" target="_blank" rel="noopener">t分布随机邻居嵌入（t-SNE）</a></li><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/ensemble/gbm.py" target="_blank" rel="noopener">梯度增强树（也称为GBDT，GBRT，GBM，XGBoost）</a></li><li><a href="https://github.com/rushter/MLAlgorithms/blob/master/mla/rl" target="_blank" rel="noopener">强化学习（深度Q学习）</a></li></ul><h2 id="安装"><a href="https://github.com/rushter/MLAlgorithms#installation" target="_blank" rel="noopener">安装</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;rushter&#x2F;MLAlgorithms</span><br><span class="line"> cd MLAlgorithms </span><br><span class="line">pip install scipy numpy </span><br><span class="line">python setup.py开发</span><br></pre></td></tr></table></figure><h2 id="如何在不安装的情况下运行示例"><a href="https://github.com/rushter/MLAlgorithms#how-to-run-examples-without-installation" target="_blank" rel="noopener">如何在不安装的情况下运行示例</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd MLAlgorithms </span><br><span class="line">python -m examples.linear_models</span><br></pre></td></tr></table></figure><h2 id="如何在docker中运行示例"><a href="https://github.com/rushter/MLAlgorithms#how-to-run-examples-within-docker" target="_blank" rel="noopener">如何在Docker中运行示例</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd MLAlgorithms docker </span><br><span class="line">build -t mlalgorithms 。</span><br><span class="line">docker run --rm -it mlalgorithms bash </span><br><span class="line">python -m examples.linear_models</span><br></pre></td></tr></table></figure><h2 id="贡献"><a href="https://github.com/rushter/MLAlgorithms#contributing" target="_blank" rel="noopener">贡献</a></h2><p>永远欢迎您的贡献！<br />随时改进现有代码，文档或实施新算法。<br />如果您的更改足够大，请提出一个建议。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/15/MLAlgorithms/1.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Minimal and clean examples of machine learning algorithms implementations&lt;/p&gt;
&lt;p&gt;介绍一个常用的机器学习算法的最小和简洁实现的集合：机器学习算法库 &lt;a href=&quot;https://github.com/rushter/MLAlgorithms&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;uri&quot;&gt;https://github.com/rushter/MLAlgorithms&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="https://2020.iosdevlog.com/categories/AI/"/>
    
    
      <category term="nn" scheme="https://2020.iosdevlog.com/tags/nn/"/>
    
      <category term="dl" scheme="https://2020.iosdevlog.com/tags/dl/"/>
    
      <category term="ml" scheme="https://2020.iosdevlog.com/tags/ml/"/>
    
      <category term="algorithm" scheme="https://2020.iosdevlog.com/tags/algorithm/"/>
    
      <category term="python" scheme="https://2020.iosdevlog.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>仿抖音小游戏《潜水艇》-FlappyBird</title>
    <link href="https://2020.iosdevlog.com/2020/03/14/FalppyBird/"/>
    <id>https://2020.iosdevlog.com/2020/03/14/FalppyBird/</id>
    <published>2020-03-14T13:01:39.000Z</published>
    <updated>2020-03-14T13:28:44.786Z</updated>
    
    <content type="html"><![CDATA[<figure><img src="https://raw.githubusercontent.com/iOSDevLog/FlappySwift/master/FlappySwift.png" alt="" /><figcaption>FlappySwift</figcaption></figure><a id="more"></a><h2 id="flappyswift">FlappySwift</h2><p>An implementation of Flappy Bird and Face Detection in Swift for iOS 11.</p><p><a href="https://www.bilibili.com/video/av96310774/" target="_blank" rel="noopener">B站视频</a></p><h2 id="face-detection">Face Detection</h2><p><a href="https://www.raywenderlich.com/1163620-face-detection-tutorial-using-the-vision-framework-for-ios" target="_blank" rel="noopener">Face Detection Tutorial Using the Vision Framework for iOS</a></p><h2 id="flappybird">FlappyBird</h2><p><a href="https://github.com/fullstackio/FlappySwift" target="_blank" rel="noopener">FlappySwift</a></p><h2 id="github">GitHub</h2><p><a href="https://github.com/iOSDevLog/FlappySwift" target="_blank" rel="noopener" class="uri">https://github.com/iOSDevLog/FlappySwift</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/iOSDevLog/FlappySwift/master/FlappySwift.png&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;FlappySwift&lt;/figcaption&gt;
&lt;/figure&gt;
    
    </summary>
    
    
      <category term="game" scheme="https://2020.iosdevlog.com/categories/game/"/>
    
    
      <category term="iOS" scheme="https://2020.iosdevlog.com/tags/iOS/"/>
    
      <category term="Swift" scheme="https://2020.iosdevlog.com/tags/Swift/"/>
    
      <category term="cv" scheme="https://2020.iosdevlog.com/tags/cv/"/>
    
  </entry>
  
  <entry>
    <title>tf2 CheekSheet</title>
    <link href="https://2020.iosdevlog.com/2020/03/13/tf2/"/>
    <id>https://2020.iosdevlog.com/2020/03/13/tf2/</id>
    <published>2020-03-13T15:34:37.000Z</published>
    <updated>2020-03-14T13:29:46.585Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://2020.iosdevlog.com/2020/03/13/tf2/0.jpg" /></p><p><a href="https://www.aicheatsheets.com/" target="_blank" rel="noopener" class="uri">https://www.aicheatsheets.com/</a></p><a id="more"></a><p><img src="https://2020.iosdevlog.com/2020/03/13/tf2/1.jpg" /><br /><img src="https://2020.iosdevlog.com/2020/03/13/tf2/2.jpg" /><br /><img src="https://2020.iosdevlog.com/2020/03/13/tf2/3.jpg" /></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/13/tf2/0.jpg&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.aicheatsheets.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; class=&quot;uri&quot;&gt;https://www.aicheatsheets.com/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="https://2020.iosdevlog.com/categories/AI/"/>
    
    
      <category term="tf2" scheme="https://2020.iosdevlog.com/tags/tf2/"/>
    
      <category term="cheeksheet" scheme="https://2020.iosdevlog.com/tags/cheeksheet/"/>
    
  </entry>
  
  <entry>
    <title>《香农传》</title>
    <link href="https://2020.iosdevlog.com/2020/03/12/Shannon/"/>
    <id>https://2020.iosdevlog.com/2020/03/12/Shannon/</id>
    <published>2020-03-12T09:15:04.000Z</published>
    <updated>2020-03-12T15:30:10.685Z</updated>
    
    <content type="html"><![CDATA[<figure><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/1.jpg" alt="" /><figcaption>《香农传》</figcaption></figure><p>书名：香农传<br />作者：[美]吉米·索尼，[美]罗伯·古德曼<br />译者：杨晔<br />出版社：中信出版集团<br />出版时间：2019-02<br />ISBN：9787508694801</p><a id="more"></a><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/20.jpg" /></p><p>克劳德·香农的父亲老克劳德·艾尔伍德·香农，1862年出生于美国新泽西州，他曾做过家具推销员、丧葬承办人和遗嘱检验法官。克劳德的母亲玛贝尔·沃尔夫是一位德国移民的女儿，她曾做过教师和校长。1909年，他们的婚礼公告成为盖洛德的头条新闻。这验证了这座城有多么小，也验证了香农夫妇在这一社群里的活跃角色</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/3.jpg" /></p><p>到了克劳德·香农在密歇根大学拍下注册照片的时候，他已经成为一名娴熟的发明家。他的发明包括简易升降机、后院小推车和通过带刺铁丝网传递加密消息的电报系统</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/4.jpg" /></p><p>香农似乎遗传了他的爷爷戴维·香农的才华，他骄傲地持有美国第407130号专利，对洗衣机进行了一系列改进。这个男孩继承了爷爷在机械方面的天赋，对于他来说，家里出了这样一名拥有专利的发明家是一件值得炫耀的事情</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/5.jpg" /></p><p>在香农入学之前，密歇根大学工程学院经历了巨大的发展。在学院的一次公开展览上，学生们“震惊了访客，他们使用20000转/分钟的纸张切割木材，通过液态气体冷冻鲜花，还展示了只用两根细线支撑的瓶子，水流从中缓缓流出——这是罕有人能够解决的难题”。密歇根大学的工程建筑可以满足重工业的要求，正如这间工厂……</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/6.jpg" /></p><p>……以及这个船舶池，学生们在这里测试模型船的流体动力</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/7.jpg" /></p><p>1934年春，克劳德·香农于17岁的时候，在《美国数学月刊》第191页上发表了第一篇学术作品。香农解出了一道数学难题。他阅读这类期刊的行为本身，揭示了他对学术事务非同寻常的关注，而他的解题方法被选中也表明他不是一个普通的人才</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/8.jpg" /></p><p>麻省理工学院的校园是香农初次作为工程师成名的地方，它的设计是建筑师们相互妥协的产物，建筑上方的圆顶秉承了“效率的原则，避免师生做无用功，它相当于最好的工业作品”。它半是庙宇，半是工厂</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/9.jpg" /></p><p>在麻省理工学院，香农加入了一个小组。这个小组旨在使得微分分析仪成为通用机械计算机，助力解决计算电力传输、电话网络等工程难题或宇宙射线和亚原子微粒等高等物理难题。这个项目追随了威廉·汤姆森的步伐，他是一名留着独特胡子的物理学家，被尊称为凯尔文爵士。他在1876年建造了早期的机械计算机</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/10.jpg" /></p><p>在麻省理工学院，香农在业余时间选修了飞行课。这门课的执教教授强烈建议麻省理工学院的校长禁止他继续上课，他认为香农是一个不可多得的人才，不应为可能发生的飞机事故而冒险。校长则拒绝了他的建议：“我怀疑以他智力超群为由，禁止这位年轻人参加飞行课或者武断地剥夺他的机会是明智的。”</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/11.jpg" /></p><p>微分分析仪是如房间般大小的“大脑”，为了解决问题会日夜不停地运转。“这个由轴、齿轮、线路、滚轮组成的家伙十分可怕，但它确实有效。”</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/12.jpg" /></p><p>在绝大多数情况下，范内瓦·布什都是20世纪中期美国最有权力的科学家。他在麻省理工学院主持微分分析仪，为总统提供咨询服务，在“二战”期间领导美国的科学家。《科利尔》杂志将他称为“会决定战争胜利或失败的男人”；《时代周刊》将他称作“物理将军”。而且，这些成就中尤其有这么一条：他成为克劳德·香农的第一位导师，也是对他影响最大的导师</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/13.jpg" /></p><p>1939年夏，香农来到了冷泉港，抵达了美国最顶尖的基因实验室，这也是美国最大的科学羞耻之一——优生学记录室。它收藏了大量基因数据，基于此，香农完成了他的理论基因学论文</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/14.jpg" /></p><p>香农拿到奖学金前往负有盛名的普林斯顿高等研究院，但这次经历并不令人愉快。这里见证了他第一段婚姻的失败，以及他对愈演愈烈的第二次世界大战的恐惧；在这里他还与阿尔伯特·爱因斯坦有过几次接触</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/15.jpg" /></p><p>这里是1936年的贝尔实验室综合楼，照片上的视角是从曼哈顿西村的华盛顿街看过去的景象。香农的一名同事回忆道：“大家在贝尔实验室做得非常好，他们做的事在其他人看来根本不可能。”当贝尔实验室的办公场所还在下曼哈顿区（靠近当今的高线公园）的时候，香农签下了这里的全职工作</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/16.jpg" /></p><p>克劳德·香农和他的同事戴维·哈格尔巴格一同在贝尔实验室工作。另一名同事回忆起那段时光：“在这里，我可以任意获取全世界电气工程领域的信息。我所需要的就是拿起电话或者去询问某人，然后便能得到答案。”</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/17.jpg" /></p><p>桑顿·弗赖伊成立了实验室的数学组，并将香农派到这里。他有一次说，“数学家们都是怪人，这是事实，所以遇到任何足够奇怪而你又不知道如何沟通的人，你就说，‘这家伙是个数学家，把他交给弗赖伊吧’。”</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/18.jpg" /></p><p>香农和约翰·皮尔斯（如图）同巴尼·奥利弗一起组成了实验室的天才三人组。一位同辈开玩笑道：“他们三个人的智商高到令人难以忍受的程度。”</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/19.jpg" /></p><p>在曼哈顿，香农是一名单身汉（在第一段婚姻终结之后），他有一间位于格林尼治村的小公寓和一份要求颇高的工作。他保留了一些时间以满足自己古怪的爱好，包括用力弹琴，以及欣赏纽约爵士乐</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/2.jpg" /></p><p>对抗纳粹德国一定程度上是一场“科学战争”，香农在这方面的贡献包括研究密码学、防空火力控制和“绿色大黄蜂”系统（如图），后者是迄今为止最具野心的语言加扰系</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/21.jpg" /></p><p>对香农的信息论研究影响最大的是拉尔夫·哈特利。他1927年关于“信息传递”的论文是当时最接近掌握信息本质的方法，解释了科学家是怎样从物理的角度而非心理的角度思索这一问题的</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/22.jpg" /></p><p>在《通信的数学理论》之前，长达一个世纪的常识与反复进行的工程试验，都认为通信必然会伴有噪声——这是物理世界要求我们付出的代价。然而香农证明了信道噪声是可以被克服的，由A点发出的信息“总是可以”，而不仅仅是“经常能够”在B点被完全接收。他向工程师提供了使信息数字化并将其可靠发送（或者，准确地说，可能伴有少量随机误差）的概念工具，直到香农证实噪声可控之前，该结论一直被当作不可能实现的乌托邦</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/23.jpg" /></p><p>1948年之后，香农被媒体赞誉为科学名人。他接受电视采访，被国家出版物报道，并被授予一些荣誉学位</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/24.jpg" /></p><p>1948年，克劳德·香农认识了贝蒂·摩尔，她是贝尔实验室的一名工作人员，他鼓起勇气邀请她共进晚餐。之后他们又有了第二顿、第三顿，直到他们每天都在一起吃晚餐</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/25.jpg" /></p><p>克劳德·香农和贝蒂·摩尔的关系发展得非常迅速：他们相识于1948年秋，而到了1949年年初，克劳德便求婚了。根据贝蒂的回忆，求婚是以“不太正式”的方式进行的。她不仅有幽默感，而且同他一样热爱数学，这奠定了他们伙伴关系的基础，直到克劳德生命的终结</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/26.jpg" /></p><p>贝蒂为克劳德购买了他的第一辆独轮车，这开启了他与这种机器一辈子的不解之缘。他为自己亲手打造了各种量身定制的独轮车，并在贝尔实验室狭窄的甬道里骑车。这使得访客们对他的灵活性印象深刻</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/27.jpg" /></p><p>即使成了科学名人，香农也仍然是一名发明家。他最著名的发明“忒修斯”是一只能够自动穿越迷宫并“记住”金属乳酪位置的人工老鼠。（倘若乳酪被拿走了，“忒修斯”就只会漫无目的地走来走去。一名科学家说：“这一切都太人性化了。”）</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/28.jpg" /><br /><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/29.jpg" /></p><p>贝尔实验室墨累山园区——“设想与设计未来的地方，这里的未来指的是我们所谓的现在。”</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/30.jpg" /></p><p>香农建造了世界上最早的弈棋机。它在1949年完工，香农的机器只能控制六枚棋子，聚焦于棋局中的走位。它使用了超过150个继电器计算走棋，它的处理能力使得机器能够在10~15秒做出决定</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/31.jpg" /></p><p>“我是机器，你也是机器，我们都会思考，不是吗？”</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/32.jpg" /></p><p>香农为人工智能设定了四个目标：到2001年，创造出打败世界冠军的象棋程序；写出被《纽约客》认可的诗文的诗歌程序；写出能够证明难以捉摸的黎曼假设的数学程序；以及“最重要的”，设计出收益超过50%的选股软件。他半开玩笑地说，“这些目标可能意味着逐步淘汰愚蠢的、熵增加的、好战的人类，转而支持更加合乎逻辑的、节约能源的、友善的物种，即计算机。”</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/33.jpg" /></p><p>诺伯特·维纳（图片中间，右侧为香农，左侧为麻省理工学院校长朱利叶斯·斯特拉顿）曾是一名神童，“控制论”的提出者，也是唯一可能挑战香农“信息论之父”地位的人</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/34.jpg" /></p><p>香农在马萨诸塞州温彻斯特买下了一幢房子，是一处位于麻省理工学院以北8千米的近郊住宅区。这幢房子建于1858年，是为天才发明家托马斯·杰斐逊的曾孙女艾伦·德怀特修建的。它占地约48.6平方千米，受蒙蒂塞洛启发而设计</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/35.jpg" /></p><p>在一次前往俄罗斯的旅程中，香农想要与苏联国际象棋冠军、计算机工程师米哈伊尔·鲍特维尼克下一场友谊赛。鲍特维尼克并没有给予足够的重视，直至香农在对弈中吃掉了他的马和兵。在走了42步之后，香农推倒了他的王，认输了。但能与鲍特维尼克对弈几十步，仍然为香农赢得了值得终生吹嘘的资本，因为前者一直被认为是最具天赋的棋手之一</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/36.jpg" /></p><p>1957年，香农回到麻省理工学院做教授。然而，他的研究生名额并未招满，“你必须有足够的自信，才能请求像香农这样的人做你的导师”</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/37.jpg" /></p><p>1967年2月6日，林登·B.约翰逊总统向克劳德·香农颁发了美国国家科学奖奖章，以表彰他“对通信和信息处理的数学理论的杰出贡献”</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/38.jpg" /></p><p>早期，香农在麻省理工学院的讲座场场爆满，但这些都比不过他做的关于股票市场的报告，这场在学校里最大的报告厅内举办的讲座挤满了听众</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/39.jpg" /></p><p>在美国马萨诸塞州，香农教授留起了胡子，继续杂耍事业。他也完全沉浸在自己发明创造的兴趣爱好里，在自己家颇具规模的工作坊里设计出许多自己最著名的发明</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/40.jpg" /></p><p>世界上第一台可穿戴计算机是由香农和爱德华·索普开发的，可用来计算轮盘赌一类的东西。他们佩戴着它，在拉斯维加斯的赌场里成功了几次，却最终放弃了这个项目，因为他们惧怕卷入与黑手党的麻烦之中</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/41.jpg" /></p><p>香农使用建造者套件模仿W.C.菲尔兹打造了这个机器人，它可以抛接三个球。球从钢鼓上弹起，机器人以摇摆的动作挥舞桨臂。“每次手臂摆下来它都能接住球，而当手臂摆上去它又会抛出球。”</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/42.jpg" /></p><p>香农自己既是一名技艺高超的杂耍者，也是第一位将杂耍数学写成论文的作者。他写道，他的读者应当“尽量不要忘记杂耍的诗歌、喜剧和音乐……我听起来是不是很自以为是？”</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/43.jpg" /></p><p>香农在生命中的最后几年，仍旧保持着骑独轮车的爱好</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/44.jpg" /></p><p>香农终其一生都在追求满足自己的好奇心，认真地做游戏：他是罕见的科学天才，像满足于探索数字电路一样，满足于制作杂耍机器人和喷射小号</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/45.jpg" /><br /><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/46.jpg" /></p><p>六步解法</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/52.jpg" /></p><h2 id="庥省理工学院">庥省理工学院</h2><p>乔治·布尔</p><ul><li>和（And）<code>*</code></li><li>或（Or）<code>+</code></li><li>非（Not）<code>‘</code></li><li>如果（If）</li></ul><p>电流</p><ul><li>串联 =&gt; “和”</li><li>并联 =&gt; “或”</li><li>两个并联 =&gt; 1+1=1</li></ul><h2 id="贝尔实验室">贝尔实验室</h2><h2 id="密码学研究">密码学研究</h2><h2 id="与图灵的友谊">与图灵的友谊</h2><p>1942年，图灵跟随英国政府发起的军事密码项目访问团来到美国。</p><p>1936年，他设计出图灵机，这一里程碑式的思想实验为现代电脑的发明打下了理论基础。</p><p>除此之外，图灵还开始破解密码。</p><h2 id="从情报到信息">从情报到信息</h2><p><code>情报减去含义即为信息。</code></p><ol type="1"><li>奈奎斯特曾使用“情报”这个模糊的概念，</li><li>哈特利曾努力地解释撇开心理学和语义学的价值，</li><li>而到香农的时代，他已经理所当然地认为含义是可以被忽略的。</li></ol><p>最简本质</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/64.jpg" /></p><ul><li>信源生成信息。</li><li>发射器将信息转码成能够发射的信号。</li><li>信道是信号通过的媒介。</li><li>噪声源代表了信号在被接收的过程中遭到的扭曲与破坏。</li><li>接收器解码消息，与发射器原理相反。</li><li>信宿是信息的接收者。</li></ul><p>这种精简模式的妙处在于它的普遍适用性。信息对于一则故事来说无意义，却能将它播放出来，包括人的信息、电路中的信息、神经元中的信息、血液中的信息。你对着电话听筒讲话（信源）；电话将你声音的声压编码成电信号（发射器）；信号通过电线（信道）；附近的电线会干扰信号（噪声）；信号被解码回声音（接收器）；声音到达另一个人的耳中（信宿）。</p><p>在细胞中，DNA链指导蛋白质的生成（信源）；它通过编码转录储存在信使RNA链中（发射器）；信使RNA携带代码到细胞的蛋白质合成处（信道）；RNA编码中的一个“字母”随机地在“点突变”（噪声）中切换；每3个“字母”代码被翻译成氨基酸–蛋白质的构件（接收器）；氨基酸被结合到蛋白质链中。DNA由此得到复制（信宿）。</p><p>香农认为，信息科学仍然未能发现对信息至关重要的东西——<code>概率的本质</code>。</p><p>新生科学需要新的计量单位，或者至少要证明他们一直谈论的概念最终能否被数字捕捉。香农研究的信息科学的新单位要表达选择的基本情况。由于它是在0或1之间的选择，所以它是“二进制数字”。在香农的全部设计中，仅有有限的部分是他允许与其他人进行合作的，这包括他在午餐时提出与贝尔实验室的同事们商讨一个更简洁的名字。二进制符号“binit”和二进制数字“bigit”在经过考量后被放弃了，最终赢得大家认可的方案是由一名在贝尔实验室工作的普林斯顿大学的教授约翰·图基提出的 <code>“比特”（bit）</code>。</p><p>比特是在两个等概率的可能性之中进行选择后所产生的信息量。所以<code>“一台拥有两种稳定状态的设备……能够存储1比特信息”</code>。这种设备的位元（包括具有两种位置的开关，具有正反两面的硬币，以及具有两种状态的数字）不在选择的结果之中，而在可能选择的数量以及进行选择的概率之中。两台这样的器件能够代表全部4种选择，并且可被称作存储2比特。</p><blockquote><p>因为香农的标准是呈对数出现的（以2为基础，换句话说，就是“倒过来”将2赋予给定数字的权力），每当可供选择的数量平方之后，比特的数量将增加1倍：</p></blockquote><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/65.jpg" /></p><blockquote><p>信息到底衡量了什么？</p></blockquote><p><strong>它衡量了我们所克服的不确定性。</strong></p><p>它衡量了我们学习新事物的可能性，或者更具体地说，当一件事物承载了关于其他事物的信息（正如计数器能够告诉我们一个物理量，或一本书能够告诉我们人生），它所涵盖的信息数量反映了未知情况的减少。能够解析最大程度的不确定性的消息，即以最公平的方式从最广泛的符号集合中选择出的包含最丰富的信息。但当一切都充满确定性的时候，并不能产生信息，因为没有什么可以传达。</p><p>香农用 <code>抛硬币</code> 事件（判断给定正反面的可能性，这里称作p，有0、50%、100%三种情况）展示了利益攸关的信息量：</p><p><img src="https://2020.iosdevlog.com/2020/03/12/Shannon/66.jpg" /></p><p>H =–p log p – q log q</p><p>在这一公式中，p和q分别是两种结果的概率（硬币的任一面或者能被传输的任一符号），两者的数值加起来刚好为100%。</p><h2 id="维纳的控制论">维纳的控制论</h2><blockquote><p>维纳自以为到了家，笨拙地摸索出钥匙，却发现打不开门。他转向街道上玩耍的孩子们问道：“你们能告诉我维纳家住在哪里吗？”一个小女孩回答道：“爸爸，跟我走。妈妈派我来告诉你我们的新家在哪里。”</p></blockquote><p>他对这一领域的贡献是广泛而深入的：量子力学、布朗运动、控制论、随机过程、谐波分析。他涉猎了几乎所有数学世界的领域。1948年，他的简历上已经布满了闪闪发光的奖项和荣誉。维纳的合作伙伴与联系人名单也同样引人注目：范内瓦·布什、G. H.哈代、伯特兰·罗素、保罗·莱维、库尔特·哥德尔……和克劳德·香农。</p><p>《控制论》</p><h2 id="人造机器">人造机器</h2><blockquote><p>机器能够思考吗？它会痛吗？我们可以说人体也是机器吗？无疑，人体和机器非常相似，但是机器绝对不会思考！我们这样说有什么实证根据吗？并没有，我们可以这样说人，说一切可以思考的东西；而我们也可以这样说布娃娃，毫无疑问，还有鬼神。</p></blockquote><p>——路德维希·维特根斯坦</p><blockquote><p>我是机器，你也是机器，我们都会思考，不是吗？</p></blockquote><p>——克劳德·香农</p>]]></content>
    
    <summary type="html">
    
      &lt;figure&gt;
&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/12/Shannon/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;《香农传》&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;书名：香农传&lt;br /&gt;
作者：[美]吉米·索尼，[美]罗伯·古德曼&lt;br /&gt;
译者：杨晔&lt;br /&gt;
出版社：中信出版集团&lt;br /&gt;
出版时间：2019-02&lt;br /&gt;
ISBN：9787508694801&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="https://2020.iosdevlog.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="AI" scheme="https://2020.iosdevlog.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>看见统计</title>
    <link href="https://2020.iosdevlog.com/2020/03/11/seeing-theory/"/>
    <id>https://2020.iosdevlog.com/2020/03/11/seeing-theory/</id>
    <published>2020-03-11T10:51:29.000Z</published>
    <updated>2020-03-11T15:44:36.263Z</updated>
    
    <content type="html"><![CDATA[<figure><img src="https://2020.iosdevlog.com/2020/03/11/seeing-theory/1.png" alt="" /><figcaption>看见统计</figcaption></figure><p>看见统计由Daniel Kunin在布朗大学读本科的时候开始制作。致力于用数据可视化让统计概念更容易理解。 (数据可视化使用Mike Bostock的javascript库D3.js制作。)</p><a id="more"></a><h2 id="基础概率论">基础概率论</h2><p>主要介绍了概率论中的一些基本概念</p><h3 id="随机事件概率事件">随机事件(概率事件)</h3><p>生活中充满了随机性。概率论是一门用数学语言来刻画这些随机事件的学科。一个随机事件的概率是一个介于0与1之间的实数，这个实数的大小反映了这个事件发生的可能性。因此，概率为0意味着这个事件不可能发生（不可能事件），概率为1意味着这个事件必然发生（必然事件）。</p><p>以一个投掷一枚公平的硬币（出现正面和反面的概率相等，均为1/2）的经典的概率实验为例：。在现实中，如果我们重复抛一枚硬币，出现正面的频率可能不会恰好是50%。但是当抛硬币的次数增加时，出现正面的概率会越来越接近50%。</p><p>如果硬币两面的重量不一样， 出现正面的概率就和出现反面的概率不一样了。上下拖动屏幕右侧蓝色柱状图来改变硬币正面和反面的的重量分布。如果我们用一个实数来代表抛硬币的结果：比如说1表示正面，0表示反面，那么我们称这个数为 随机变量。</p><h3 id="期望">期望</h3><p>一个随机变量的期望刻画的是这个随机变量的概率分布的“中心”。简而言之，当有无穷多来自同一个概率分布的独立样本时，它们的平均值就是期望。数学上对期望的定义是以概率（或密度）为权重的加权平均值。</p><p><span class="math display">\[\mathrm{E}[X]=\sum_{x \in \mathcal{X}} x P(x)\]</span></p><p>现在以另一个经典的概率实验为例：扔一枚公平的骰子，每一面出现的概率相等，均为1/6。当试验的次数越来越多时，扔出的结果的平均值慢慢趋向于它的期望3.5。</p><h3 id="方差">方差</h3><p>如果说随机变量的期望刻画了它的概率分布的“中心”，那么方差则刻画了概率分布的分散度。方差的定义是一个随机变量与它的期望之间的差的平方的加权平均值。这里的权重仍然是概率（或者密度）。</p><p><span class="math display">\[\operatorname{Var}(X)=\mathrm{E}\left[(X-\mathrm{E}[X])^{2}\right]\]</span></p><p>随机从下面十张牌中抽牌。当抽取的次数越来越多时，可以观察到样本平方差的平均值（绿色）逐渐趋向于它的方差（蓝色）。</p><h2 id="进阶概率论">进阶概率论</h2><p>概率论中的一些核心知识</p><h3 id="集合论">集合论</h3><p>广而言之，一个集合指的是一些物体的总体。在概率论中，我们用一个集合来表示一些事件的组合。比如，我们可以用集合 <span class="math inline">\(\{2,4,6\}\)</span> 来表示“投骰子投出偶数”这个事件。因此我们有必要掌握一些基本的集合的运算。</p><h3 id="古典概型">古典概型</h3><p>古典概型本质上就是数数。但是在概率论中，数数有时候比想象中要困难的多。因为我们有时要数清楚符合一些性质的事件或者轨道个数的，而这些性质往往比较复杂，因此数数的任务也变得困难起来。假设我们有一袋珠子，每个珠子的颜色都不相同。如果我们无放回地从袋子里抽取珠子，一共有多少种可能出现的颜色序列（排列）呢？有多少种可能出现的没有顺序的序列（组合）呢？</p><h3 id="条件概率">条件概率</h3><p>条件概率让我们可以利用已有的信息。举个例子，在今天多云 的情况下，我们会估计“明天下雨”的概率小于“今天下雨”。这种基于已有的相关信息得出的概率称为条件概率。</p><p>数学上，条件概率的计算一般会把的样本空间缩小到一个我们已知信息的事件。再以之前举的下雨为例，我们现在只考虑所有前一天多云的日子，而不是考虑所有的日子。然后我们确定在这些天中有多少天下雨，这些下雨天数在所有我们考虑的天数中的比例即为条件概率。</p><h2 id="概率分布">概率分布</h2><p>描述了随机变量取值的规律</p><h3 id="随机变量">随机变量</h3><p>随机变量是一个函数，它用数字来表示一个可能出现的事件。你可以定义你自己的随机变量，然后生成一些样本来观察它的经验分布。</p><h3 id="离散型和连续型随机变量">离散型和连续型随机变量</h3><p>常见的随机变量类型有两种：</p><ul><li>离散型随机变量</li></ul><p>一个离散型随机变量可能的取值范围只有有限个或可列个值。离散型随机变量的定义是：如果 <span class="math inline">\(X\)</span> 是一个随机变量，存在非负函数 <span class="math inline">\(f(x)\)</span> 和 <span class="math inline">\(F(X)\)</span>,使得</p><p><span class="math display">\[\begin{array}{l}P(X=x)=f(x) \\P(X&lt;x)=F(x)\end{array}\]</span></p><p>则称 <span class="math inline">\(X\)</span> 是一个离散型随机变量。</p><p><code>伯努利分布(Bernoulli)</code></p><p>如果一个随机变量 <span class="math inline">\(X\)</span> 只取值 <span class="math inline">\(0\)</span> 或 <span class="math inline">\(1\)</span>，概率分布是</p><p><span class="math display">\[P(X=1)=p, \quad P(X=0)=1-p\]</span></p><p>则称 <span class="math inline">\(X\)</span> 符合伯努利分布(Bernoulli)。我们常用伯努利分布来模拟只有两种结果的试验，如抛硬币。</p><p>在概率论中，概率质量函数（probability mass function，简写为 <code>pmf</code>）是离散随机变量在各特定取值上的概率。</p><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>PMF</th><th>期望</th><th>方差</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(f(x ; p)=\left\{\begin{array}{ll}p &amp; \text { if } x=1 \\ 1-p &amp; \text { if } x=0\end{array}\right.\)</span></td><td><span class="math inline">\(p\)</span></td><td><span class="math inline">\(p(1-p)\)</span></td></tr></tbody></table><p><code>二项分布(Binomial)</code></p><p>如果随机变量 <span class="math inline">\(X\)</span> 是 <span class="math inline">\(n\)</span> 个参数为p的独立伯努利随机变量之和，则称 <span class="math inline">\(X\)</span> 是二项分布(binomial)。我们常用二项分布来模拟若干独立同分布的伯努利试验中的成功次数。比如说，抛五次硬币，其中正面的次数可以用二项分布来表示：<span class="math inline">\(\operatorname{Bin}\left(5, \frac{1}{2}\right)\)</span>。</p><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>PMF</th><th>期望</th><th>方差</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(f(x ; n, p)=\left(\begin{array}{l}n \\ x\end{array}\right) p^{x}(1-p)^{n-x}\)</span></td><td><span class="math inline">\(np\)</span></td><td><span class="math inline">\(np(1-p)\)</span></td></tr></tbody></table><p><code>几何分布(Geometric)</code></p><p>一个服从几何分布的随机变量表示了在重复独立同分布的伯努利试验中获得一次成功所需要的试验此时。比如说，如果我们重复投一枚骰子，我们则可以用几何分布来表示投出一个6所需要的试验次数。</p><table><thead><tr class="header"><th>PMF</th><th>期望</th><th>方差</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(f(x ; p)=(1-p)^{x} p\)</span></td><td><span class="math inline">\(\frac{1}{p}\)</span></td><td><span class="math inline">\(\frac{1-p}{p^{2}}\)</span></td></tr></tbody></table><p><code>泊松分布(Poisson)</code></p><p>表示了一个事件在固定时间或者空间中发生的次数。泊松分布的参数 <span class="math inline">\(λ\)</span> 是这个时间发生的频率。比方说，我们可以用泊松分布来刻画流星雨或者足球比赛中的进球数。</p><table><thead><tr class="header"><th>PMF</th><th>期望</th><th>方差</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(f(x ; \lambda)=\frac{\lambda^{x} e^{-\lambda}}{x !}\)</span></td><td><span class="math inline">\(\lambda\)</span></td><td><span class="math inline">\(\lambda\)</span></td></tr></tbody></table><p><code>负二项分布(Negative Binomial)</code></p><p>一个负二项分布的随机变量X表示的是若干独立同分布的参数为p的伯努利试验中获得r次失败前成功的次数。比方说，如果我们重复抛一枚硬币，我们则可以用负二项分布来表示抛出三次反面之前抛出正面的次数。</p><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>PMF</th><th>期望</th><th>方差</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(f(x ; n, r, p)=\left(\begin{array}{c}x+r-1 \\ x\end{array}\right) p^{x}(1-p)^{r}\)</span></td><td><span class="math inline">\(\frac{p r}{1-p}\)</span></td><td><span class="math inline">\(\frac{p r}{(1-p)^{2}}\)</span></td></tr></tbody></table><p><code>概率分布表</code></p><table><colgroup><col style="width: 25%" /><col style="width: 25%" /><col style="width: 25%" /><col style="width: 25%" /></colgroup><thead><tr class="header"><th>概率分布</th><th>PMF</th><th style="text-align: center;">期望</th><th style="text-align: center;">方差</th></tr></thead><tbody><tr class="odd"><td>伯努利分布(Bernoulli)</td><td><span class="math inline">\(f(x ; p)=\left\{\begin{array}{ll}p &amp; \text { if } x=1 \\ 1-p &amp; \text { if } x=0\end{array}\right.\)</span></td><td style="text-align: center;"><span class="math inline">\(p\)</span></td><td style="text-align: center;"><span class="math inline">\(p(1-p)\)</span></td></tr><tr class="even"><td>二项分布(Binomial)</td><td><span class="math inline">\(f(x ; n, p)=\left(\begin{array}{l}n \\ x\end{array}\right) p^{x}(1-p)^{n-x}\)</span></td><td style="text-align: center;"><span class="math inline">\(np\)</span></td><td style="text-align: center;"><span class="math inline">\(np(1-p)\)</span></td></tr><tr class="odd"><td>几何分布(Geometric)</td><td><span class="math inline">\(f(x ; p)=(1-p)^{x} p\)</span></td><td style="text-align: center;"><span class="math inline">\(\frac{1}{p}\)</span></td><td style="text-align: center;"><span class="math inline">\(\frac{1-p}{p^{2}}\)</span></td></tr><tr class="even"><td>泊松分布(Poisson)</td><td><span class="math inline">\(f(x ; \lambda)=\frac{\lambda^{x} e^{-\lambda}}{x !}\)</span></td><td style="text-align: center;"><span class="math inline">\(\lambda\)</span></td><td style="text-align: center;"><span class="math inline">\(\lambda\)</span></td></tr><tr class="odd"><td>负二项分布(Negative Binomial)</td><td><span class="math inline">\(f(x ; n, r, p)=\left(\begin{array}{c}x+r-1 \\ x\end{array}\right) p^{x}(1-p)^{r}\)</span></td><td style="text-align: center;"><span class="math inline">\(\frac{p r}{1-p}\)</span></td><td style="text-align: center;"><span class="math inline">\(\frac{p r}{(1-p)^{2}}\)</span></td></tr></tbody></table><ul><li>连续型随机变量</li></ul><p>连续型随机变量可能取值的范围是一个无限不可数集合（如全体实数)。连续型随机变量的定义是：设X为随机变量，存在非负函数f(x)使得：</p><p><span class="math display">\[\begin{aligned}P(a \leq X \leq b) &amp;=\int_{a}^{b} f(x) d x \\P(X&lt;x) &amp;=F(x)\end{aligned}\]</span></p><p><code>均匀分布(Uniform)</code></p><p>如果随机变量X在其支撑集上所有相同长度的区间上有相同的概率，即如果 <span class="math inline">\(b_{1}-a_{1}=b_{2}-a_{2}\)</span>,则</p><p><span class="math display">\[P\left(X \in\left[a_{1}, b_{1}\right]\right)=P\left(X \in\left[a_{2}, b_{2}\right]\right)\]</span></p><p>那么我们称 <span class="math inline">\(X\)</span> 服从均匀分布(Uniform)。比方说，我们一般可以假设人在一年中出生的概率是相等的，因此可以用均匀分布来模拟人的出生时间。</p><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>概率分布</th><th>期望</th><th>方差</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(f(x ; a, b)=\left\{\begin{array}{l}\frac{1}{b-a} \text { for } x \in[a, b] \\ 0 \quad \text { otherwise }\end{array}\right.\)</span></td><td><span class="math inline">\(\frac{a+b}{2}\)</span></td><td><span class="math inline">\(\frac{(b-a)^{2}}{12}\)</span></td></tr></tbody></table><p><code>正态分布/高斯分布(Normal)</code></p><p>正态分布（也称高斯分布）的密度函数是一个钟形曲线。科学中常用正态分布来模拟许多小效应的叠加。比方说，我们知道人的身高是许多微小的基因和环境效应的叠加。因此可以用正态分布来表示人的身高，</p><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>概率分布</th><th>期望</th><th>方差</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(f\left(x ; \mu, \sigma^{2}\right)=\frac{1}{\sqrt{2 \pi \sigma^{2}}} e^{-\frac{(x-\mu)^{2}}{2 \sigma^{2}}}\)</span></td><td><span class="math inline">\(\mu\)</span></td><td><span class="math inline">\(\sigma^{2}\)</span></td></tr></tbody></table><p><code>学生t分布(Student T)</code></p><p>学生t分布（也称t分布）往往在估计正态总体期望时出现。当我们只有较少的样本和未知的方差时，许多大样本性质并不适用，此时我们则需要用到t分布。</p><table><thead><tr class="header"><th>概率分布</th><th>说明</th><th>期望</th><th>方差</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\frac{Z}{\sqrt{U / k}}\)</span></td><td><span class="math inline">\(Z \sim N(0,1)\)</span> <span class="math inline">\(U \sim \chi_{k}\)</span></td><td><span class="math inline">\(0\)</span></td><td><span class="math inline">\(\frac{k}{k-2}\)</span></td></tr></tbody></table><p><code>卡方分布(Chi Squared)</code></p><p>如果随机变量 <span class="math inline">\(X\)</span> 是 <span class="math inline">\(k\)</span> 个独立的标准正态随机变量的平方和，则称 <span class="math inline">\(X\)</span> 是自由度为k的卡方随机变量：<span class="math inline">\(X \sim \chi_{k}^{2}\)</span>. 卡方分布常见于假设检验和构造置信区间.</p><table><thead><tr class="header"><th>概率分布</th><th>期望</th><th>方差</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\sum_{i=1}^{k} Z_{i}^{2} \quad Z_{i} \stackrel{i: i, d}{\sim} N(0,1)\)</span></td><td><span class="math inline">\(k\)</span></td><td><span class="math inline">\(2 k\)</span></td></tr></tbody></table><p><code>指数分布(Exponential)</code></p><p>指数分布可以看作是几何分布的连续版本，其常用于描述等待时间。</p><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>概率分布</th><th>期望</th><th>方差</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(f(x ; \lambda)=\left\{\begin{array}{ll}\lambda e^{-\lambda x} &amp; \text { if } x \geq 0 \\ 0 &amp; \text { otherwise }\end{array}\right.\)</span></td><td><span class="math inline">\(\frac{1}{\lambda}\)</span></td><td><span class="math inline">\(\frac{1}{\lambda^{2}}\)</span></td></tr></tbody></table><p><code>F分布(F)</code></p><p>F分布(Fisher–Snedecor分布)常在假设检验中出现，一个比较有名的例子是 方差分析。</p><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>概率分布</th><th>期望</th><th>方差</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\begin{array}{ll}\frac{U_{1} / d_{1}}{U_{2} / d_{2}} &amp; U_{1} \sim \chi_{d_{1}} \\ &amp; U_{2} \sim \chi_{d_{2}}\end{array}\)</span></td><td><span class="math inline">\(\frac{d_{2}}{d_{2}-2}\)</span></td><td><span class="math inline">\(\frac{2 d_{2}^{2}\left(d_{1}+d_{2}-2\right)}{d_{1}\left(d_{2}-2\right)^{2}\left(d_{2}-4\right)}\)</span></td></tr></tbody></table><p><code>Gamma分布(Gamma)</code></p><p>Gamma分布是一组连续型概率密度。</p><blockquote><p>指数分布和卡方分布是Gamma分布的两个特殊情形。</p></blockquote><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>概率分布</th><th>期望</th><th>方差</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(f(x ; k, \theta)=\frac{1}{\Gamma(k) \theta^{k}} x^{k-1} e^{-\frac{x}{\theta}}\)</span></td><td><span class="math inline">\(k\theta\)</span></td><td><span class="math inline">\(k\theta^{2}\)</span></td></tr></tbody></table><p><code>连续概率分布表</code></p><table><colgroup><col style="width: 25%" /><col style="width: 25%" /><col style="width: 25%" /><col style="width: 25%" /></colgroup><thead><tr class="header"><th>连续分布</th><th>概率分布</th><th style="text-align: center;">期望</th><th style="text-align: center;">方差</th></tr></thead><tbody><tr class="odd"><td>均匀分布(Uniform)</td><td><span class="math inline">\(f(x ; a, b)=\left\{\begin{array}{l}\frac{1}{b-a} \text { for } x \in[a, b] \\ 0 \quad \text { otherwise }\end{array}\right.\)</span></td><td style="text-align: center;"><span class="math inline">\(\frac{a+b}{2}\)</span></td><td style="text-align: center;"><span class="math inline">\(\frac{(b-a)^{2}}{12}\)</span></td></tr><tr class="even"><td>正态分布/高斯分布(Normal)</td><td><span class="math inline">\(f\left(x ; \mu, \sigma^{2}\right)=\frac{1}{\sqrt{2 \pi \sigma^{2}}} e^{-\frac{(x-\mu)^{2}}{2 \sigma^{2}}}\)</span></td><td style="text-align: center;"><span class="math inline">\(\mu\)</span></td><td style="text-align: center;"><span class="math inline">\(\sigma^{2}\)</span></td></tr><tr class="odd"><td>学生t分布(Student T)</td><td><span class="math inline">\(\frac{Z}{\sqrt{U / k}}\)</span></td><td style="text-align: center;"><span class="math inline">\(0\)</span></td><td style="text-align: center;"><span class="math inline">\(\frac{k}{k-2}\)</span></td></tr><tr class="even"><td>卡方分布(Chi Squared)</td><td><span class="math inline">\(\sum_{i=1}^{k} Z_{i}^{2} \quad Z_{i} \stackrel{i: i, d}{\sim} N(0,1)\)</span></td><td style="text-align: center;"><span class="math inline">\(k\)</span></td><td style="text-align: center;"><span class="math inline">\(2 k\)</span></td></tr><tr class="odd"><td>指数分布(Exponential)</td><td><span class="math inline">\(f(x ; \lambda)=\left\{\begin{array}{ll}\lambda e^{-\lambda x} &amp; \text { if } x \geq 0 \\ 0 &amp; \text { otherwise }\end{array}\right.\)</span></td><td style="text-align: center;"><span class="math inline">\(\frac{1}{\lambda}\)</span></td><td style="text-align: center;"><span class="math inline">\(\frac{1}{\lambda^{2}}\)</span></td></tr><tr class="even"><td>F分布(F)</td><td><span class="math inline">\(\begin{array}{ll}\frac{U_{1} / d_{1}}{U_{2} / d_{2}} &amp; U_{1} \sim \chi_{d_{1}} \\ &amp; U_{2} \sim \chi_{d_{2}}\end{array}\)</span></td><td style="text-align: center;"><span class="math inline">\(\frac{d_{2}}{d_{2}-2}\)</span></td><td style="text-align: center;"><span class="math inline">\(\frac{2 d_{2}^{2}\left(d_{1}+d_{2}-2\right)}{d_{1}\left(d_{2}-2\right)^{2}\left(d_{2}-4\right)}\)</span></td></tr><tr class="odd"><td>Gamma分布(Gamma)</td><td><span class="math inline">\(f(x ; k, \theta)=\frac{1}{\Gamma(k) \theta^{k}} x^{k-1} e^{-\frac{x}{\theta}}\)</span></td><td style="text-align: center;"><span class="math inline">\(k\theta\)</span></td><td style="text-align: center;"><span class="math inline">\(k\theta^{2}\)</span></td></tr></tbody></table><h3 id="中心极限定理">中心极限定理</h3><p>中心极限定理告诉我们，对于一个（性质比较好的）分布，如果我们有足够大的独立同分布的样本，其样本均值会（近似地）呈正态分布。样本数量越大，其分布与正态越接近。</p><h2 id="统计推断">统计推断</h2><p>通过观察数据来确定背后的概率分布</p><h3 id="频率学派">频率学派</h3><h4 id="点估计理论">点估计理论</h4><p>统计学中一个主要的问题是估计参数。我们用一个取值为样本的函数来估计我们感兴趣的参数，并称这个函数为估计量。这里我们用一个估计圆周率π的例子来具体说明这个想法。 我们知道π可以由圆与其外切正方形的面积比来表示：</p><h4 id="置信区间">置信区间</h4><p>与点估计不同，置信区间用估计的是一个参数的范围。一个置信区间对应着一个置信水平：一个置信水平为95%的置信区间表示这个置信区间包含了真实参数的概率为95%。</p><h4 id="bootstrap方法">Bootstrap方法</h4><p>许多频率学派的统计推断侧重于使用一些“性质比较良好”的估计量。但是我们知道这些统计量本身是样本的函数，因此往往比较难分析它们自己的概率分布。而Bootstrap方法则给我们提供了一种方便的近似确定估计量性质的方法。下面我们通过一个例子来说明Bootstrap方法。假设我们现在有 <span class="math inline">\(n\)</span> 个独立的样本 <span class="math inline">\(X_{1}, \ldots, X_{n}\)</span>，基于这些样本我们就有了一个经验分布函数：</p><p><span class="math display">\[F_{n}(x)=\sum_{i=1}^{n} 1_{\left\{X_{i} \leq x\right\}}\]</span></p><p>我们可以重复根据这个经验分布函数生成样本，利用这些新的样本来估计元样本均值的标准差。</p><h3 id="贝叶斯学派">贝叶斯学派</h3><p>用数据来更新特定假设的概率</p><h4 id="贝叶斯公式">贝叶斯公式</h4><h4 id="似然函数">似然函数</h4><p><span class="math display">\[L(\theta | x)=P(x | \theta)\]</span></p><p>似然函数的概念在频率学派和贝叶斯学派中都有重要的作用。</p><h4 id="从先验概率到后验概率">从先验概率到后验概率</h4><p>贝叶斯统计的核心思想是利用观察到的数据来更新先验信息。</p><h2 id="回归分析">回归分析</h2><p>建立两个变量之间线性模型的方法</p><h3 id="最小二乘法">最小二乘法</h3><p>最小二乘法是一个估计线性模型参数的方法。这个方法的目标是找到一组线性模型参数，使得这个模型预测的数据和实际数据间的平方误差达到最小。</p><h3 id="相关性">相关性</h3><p>相关性是一种刻画两个变量之间线性关系的度量。相关性的数学定义是</p><p><span class="math display">\[r=\frac{s_{x y}}{\sqrt{s_{x x}} \sqrt{s_{y y}}}\]</span></p><p>其中</p><p><span class="math display">\[\begin{aligned}&amp;\begin{array}{l}s_{x y}=\sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)\left(y_{i}-\bar{y}\right) \\s_{x x}=\sum_{i=1}^{n}\left(x_{i}-\bar{x}\right)^{2}\end{array}\\&amp;s_{y y}=\sum_{i=1}^{n}\left(y_{i}-\bar{y}\right)^{2}\end{aligned}\]</span></p><p>由上述定义我们可以看出 <span class="math inline">\(r \in[-1.1]\)</span>。</p><h3 id="方差分析">方差分析</h3><p>方差分析（ANONA，Analysis of Variace）是一种检验各组数据是否有相同均值的统计学方法。方差分析将t检验从检验两组数据均值推广到检验多组数据均值，其主要方法是比较组内和组间平方误差。</p><p>可视化网站：<a href="https://seeing-theory.brown.edu/cn.html" target="_blank" rel="noopener" class="uri">https://seeing-theory.brown.edu/cn.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure&gt;
&lt;img src=&quot;https://2020.iosdevlog.com/2020/03/11/seeing-theory/1.png&quot; alt=&quot;&quot; /&gt;&lt;figcaption&gt;看见统计&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;看见统计由Daniel Kunin在布朗大学读本科的时候开始制作。致力于用数据可视化让统计概念更容易理解。 (数据可视化使用Mike Bostock的javascript库D3.js制作。)&lt;/p&gt;
    
    </summary>
    
    
      <category term="math" scheme="https://2020.iosdevlog.com/categories/math/"/>
    
    
      <category term="Godot" scheme="https://2020.iosdevlog.com/tags/Godot/"/>
    
  </entry>
  
</feed>
